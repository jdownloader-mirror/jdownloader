<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.2.0, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Tue Oct 27 18:53:42 CET 2009

  Jar file to be obfuscated:           JDownloader.jar
  Target Jar file for obfuscated code: JDownloader_obfuscated.jar

-->
<!-- WARNING
Methods are called which may break in obfuscated version at runtime.
Please review your source code to ensure that the dangerous methods are not intended
to act on classes which have been obfuscated.
-->
<!--
     Your class jd.CPluginWrapper calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class jd.JDClassLoader calls the java.lang.ClassLoader method java.lang.Class findLoadedClass(java.lang.String)
     Your class jd.JDClassLoader calls the java.lang.ClassLoader method java.lang.Class findSystemClass(java.lang.String)
     Your class jd.JDClassLoader calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class jd.JDInit calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class jd.Main calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class jd.OptionalPluginWrapper calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class jd.PluginWrapper calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
     Your class jd.PluginWrapper calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class jd.controlling.JDBroadcasterUnused calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class jd.router.SQLRouterData calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.domimpl.HTMLDocumentImpl not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.domimpl.HTMLDocumentImpl not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Authenticator not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Authenticator not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.MessageHandler not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.MessageHandler not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!--
  Memory in use after class data structure built: 12236072 bytes
  Total memory available                        : 83034112 bytes
-->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.userio.UserIOGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.userio.UserIOGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.userio.UserIOGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.userio.UserIOGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.laf.LookAndFeelController -->
<!-- WARNING: No mapping found: jd.gui.swing.laf.LookAndFeelController -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.laf.LookAndFeelWrapper not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.laf.LookAndFeelWrapper -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.laf.LookAndFeelController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.laf.LookAndFeelWrapper not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.BrowseFile -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.BrowseFile -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.gui.swing.Factory -->
<!-- WARNING: No mapping found: jd.gui.swing.components.BrowseFile -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.BrowseFile -->
<!-- WARNING: No mapping found: jd.gui.swing.components.BrowseFile -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.Factory not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.nutils.nativeintegration.LocalBrowser -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.BrowseFile not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.nativeintegration.LocalBrowser not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDFileFilter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDFileFilter not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.JDProxy -->
<!-- WARNING: No mapping found: jd.http.JDProxy -->
<!-- WARNING: No mapping found: jd.http.JDProxy -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.JDProxy not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.laf.LookAndFeelController -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.events.EDTEventQueue -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.JDGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.JDGui not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.SwingGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.SwingGui not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.SwingGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.SwingGui not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.GUIUtils -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.ClassFinder -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.linkbutton.JLink not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.JDProxy not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.laf.LookAndFeelController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.events.EDTEventQueue not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.JDGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.SwingGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.GUIUtils not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.ClassFinder not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.linkbutton.JLink not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.MessageHandler not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.captcha.JACMethod -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: Unresolved external dependency: jd.captcha.pixelgrid.Captcha not found! -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: Unresolved external dependency: jd.captcha.pixelgrid.Captcha not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.userio.UserIOGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.captcha.JACController -->
<!-- WARNING: No mapping found: it.sauronsoftware.junique.JUnique -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.MessageHandler not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.GUIUtils -->
<!-- WARNING: No mapping found: it.sauronsoftware.junique.JUnique -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: No mapping found: jd.gui.swing.MacOSController -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.OutdatedParser -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JACMethod not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JAntiCaptcha not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.userio.UserIOGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JACController not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.JUnique not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.GUIUtils not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.AlreadyLockedException not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.linkbutton.JLink not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.MacOSController not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OutdatedParser not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.captcha.JACController -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JACController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.laf.LookAndFeelController -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.GUIUtils -->
<!-- WARNING: No mapping found: jd.nutils.nativeintegration.ScreenDevices -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.laf.LookAndFeelController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.GUIUtils not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.nativeintegration.ScreenDevices not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Executer not found! -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNException -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.wc.SVNRevision not found! -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.wc.SVNRevision not found! -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.SVNException not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.svn.Subversion not found! -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.wc.SVNRevision not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.Balloon -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.Balloon not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.nutils.nativeintegration.LocalBrowser -->
<!-- WARNING: No mapping found: jd.gui.swing.components.Balloon -->
<!-- WARNING: Unresolved external dependency: jd.nutils.nativeintegration.LocalBrowser not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.Balloon not found! -->
<!-- WARNING: No mapping found: jd.captcha.JACMethod -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: Unresolved external dependency: jd.captcha.pixelgrid.Captcha not found! -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: Unresolved external dependency: jd.captcha.pixelgrid.Captcha not found! -->
<!-- WARNING: No mapping found: jd.captcha.JAntiCaptcha -->
<!-- WARNING: No mapping found: jd.captcha.pixelgrid.Captcha -->
<!-- WARNING: Unresolved external dependency: jd.captcha.LetterComperator not found! -->
<!-- WARNING: No mapping found: jd.captcha.LetterComperator -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JACMethod not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.JAntiCaptcha not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.pixelgrid.Captcha not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.LetterComperator not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.encoding.HTMLEntities -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.HTMLEntities not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ActionController -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ActionController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: it.sauronsoftware.junique.JUnique -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: it.sauronsoftware.junique.JUnique not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AgbDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AgbDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser$BrowserException not found! -->
<!-- WARNING: No mapping found: jd.http.Browser$BrowserException -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser$BrowserException not found! -->
<!-- WARNING: No mapping found: jd.http.Browser$BrowserException -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.gui.swing.components.Balloon -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser$BrowserException not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.Balloon not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.JDProxy not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.JDProxy not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.JDProxy not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: No mapping found: jd.nutils.IPAddress -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.nutils.IPAddress not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader$WorkerListener -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.http.download.Broadcaster not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.http.download.Broadcaster -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.download.Broadcaster not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Executer not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ssdp.SSDPPacket -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.DeviceList not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.DeviceList -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.DeviceList not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Action not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Action -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ArgumentList not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.control.ActionRequest -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.control.ActionRequest -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Action not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ArgumentList not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.control.ActionRequest -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Action -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Action -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ArgumentList not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ArgumentList -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ArgumentList -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Argument not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Argument -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Argument -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.DeviceList not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.DeviceList -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.Device -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.DeviceList -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.DeviceList -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Device not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Action not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.control.ActionRequest not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ArgumentList not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.Argument not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.DeviceList not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.HtmlRendererContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.UserAgentContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.HtmlRendererContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: No mapping found: org.lobobrowser.html.domimpl.HTMLDocumentImpl -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.HtmlRendererContext not found! -->
<!-- WARNING: No mapping found: org.lobobrowser.html.domimpl.HTMLDocumentImpl -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.UserAgentContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.HtmlRendererContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: No mapping found: org.lobobrowser.html.domimpl.HTMLDocumentImpl -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.domimpl.HTMLDocumentImpl not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: org.lobobrowser.html.test.SimpleUserAgentContext -->
<!-- WARNING: No mapping found: org.lobobrowser.html.test.SimpleUserAgentContext -->
<!-- WARNING: No mapping found: org.lobobrowser.html.test.SimpleUserAgentContext -->
<!-- WARNING: No mapping found: org.lobobrowser.html.test.SimpleUserAgentContext -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Cookies not found! -->
<!-- WARNING: No mapping found: jd.http.Cookies -->
<!-- WARNING: No mapping found: jd.http.Cookie -->
<!-- WARNING: No mapping found: jd.http.Cookie -->
<!-- WARNING: No mapping found: org.lobobrowser.html.test.SimpleUserAgentContext -->
<!-- WARNING: No mapping found: org.lobobrowser.html.io.WritableLineReader -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.UserAgentContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.HtmlRendererContext not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: No mapping found: org.lobobrowser.html.js.Executor -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.UserAgentContext not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Scriptable -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.js.JavaFunctionObject not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.js.Window not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.js.JavaObjectWrapper not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.test.SimpleUserAgentContext not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Cookies not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Cookie not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.io.WritableLineReader not found! -->
<!-- WARNING: Unresolved external dependency: org.lobobrowser.html.js.Executor not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.RequestVariable not found! -->
<!-- WARNING: No mapping found: jd.http.requests.RequestVariable -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.RequestVariable not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.HtmlCleaner not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.HtmlCleaner -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.HtmlCleaner not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.HtmlCleaner -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.CleanerProperties not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.CleanerProperties -->
<!-- WARNING: No mapping found: org.htmlcleaner.DomSerializer -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.CleanerProperties not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.HtmlCleaner -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.TagNode not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.DomSerializer -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.TagNode not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.SimpleXmlSerializer -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.CleanerProperties not found! -->
<!-- WARNING: No mapping found: org.htmlcleaner.SimpleXmlSerializer -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.TagNode not found! -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.HtmlCleaner not found! -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.CleanerProperties not found! -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.DomSerializer not found! -->
<!-- WARNING: Unresolved external dependency: org.htmlcleaner.SimpleXmlSerializer not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.easy.load.LoadImage not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.captcha.easy.load.LoadImage -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.nutils.jobber.Jobber -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.captcha.easy.load.LoadImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.Jobber not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF$Panels not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction$Types not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF$Panels not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIF -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF$Panels not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF$Panels not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ActionController -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.actions.ToolBarAction -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.action.JDAction not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction$Types not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction$Types not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.action.JDAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.menu.MenuAction -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIF$Panels not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ActionController not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.linkbutton.JLink not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.actions.ToolBarAction$Types not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.swing.components.Balloon -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.ScriptableObject not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Scriptable not found! -->
<!-- WARNING: No mapping found: org.mozilla.javascript.Context -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.Balloon not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: org.mozilla.javascript.Context not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.menu.MenuAction not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.requests.FormData -->
<!-- WARNING: No mapping found: jd.http.requests.PostFormDataRequest -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.FormData not found! -->
<!-- WARNING: No mapping found: jd.http.requests.FormData -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.PostFormDataRequest not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.FormData not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Base64 -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Base64 not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Base64 -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Base64 -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Base64 -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Base64 not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.plugins.decrypter.MtLnk -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.plugins.decrypter.MtLnk not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Base64 -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Base64 not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.settings.GUIConfigEntry -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader$WorkerListener -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader$WorkerListener -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.settings.GUIConfigEntry -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.settings.GUIConfigEntry -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.settings.GUIConfigEntry not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.http.RequestHeader -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.http.download.Broadcaster not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.http.download.Broadcaster -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.gui.userio.DummyFrame -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ProgressDialog -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.RequestHeader not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ProgressDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.download.Broadcaster not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.userio.DummyFrame not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader$WorkerListener not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: org.hsqldb.lib.StringInputStream -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: org.hsqldb.lib.StringInputStream not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ssdp.SSDPPacket -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: org.hsqldb.lib.StringInputStream -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ssdp.SSDPPacket -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.nutils.jobber.JDRunnable not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: org.cybergarage.upnp.ControlPoint -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.device.SearchResponseListener not found! -->
<!-- WARNING: No mapping found: jd.nutils.Threader -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: org.hsqldb.lib.StringInputStream not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ssdp.SSDPPacket not found! -->
<!-- WARNING: Unresolved external dependency: org.cybergarage.upnp.ControlPoint not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Threader not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.gui.swing.components.linkbutton.JLink -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.linkbutton.JLink not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: No mapping found: jd.nutils.OutdatedParser -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Executer not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.zip.UnZip not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OutdatedParser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.zip.UnZip -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.zip.UnZip not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntry -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntry -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntry -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntry -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntry -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntryPath -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntryPath -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntryPath -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNLogEntryPath -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.SVNException not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.svn.Subversion not found! -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.SVNLogEntry not found! -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.SVNLogEntryPath not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.PasswordAuthentication not found! -->
<!-- WARNING: No mapping found: javax.mail.Authenticator -->
<!-- WARNING: No mapping found: javax.mail.PasswordAuthentication -->
<!-- WARNING: Unresolved external dependency: javax.mail.Authenticator not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.PasswordAuthentication not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message$RecipientType not found! -->
<!-- WARNING: No mapping found: javax.mail.Session -->
<!-- WARNING: Unresolved external dependency: javax.mail.Authenticator not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Session not found! -->
<!-- WARNING: No mapping found: javax.mail.Session -->
<!-- WARNING: Unresolved external dependency: javax.mail.Session not found! -->
<!-- WARNING: No mapping found: javax.mail.internet.MimeMessage -->
<!-- WARNING: Unresolved external dependency: javax.mail.Session not found! -->
<!-- WARNING: No mapping found: javax.mail.internet.InternetAddress -->
<!-- WARNING: No mapping found: javax.mail.Message -->
<!-- WARNING: Unresolved external dependency: javax.mail.Address not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message$RecipientType not found! -->
<!-- WARNING: No mapping found: javax.mail.Message -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message$RecipientType not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Address not found! -->
<!-- WARNING: No mapping found: javax.mail.Message -->
<!-- WARNING: No mapping found: javax.mail.Message -->
<!-- WARNING: No mapping found: javax.mail.Message -->
<!-- WARNING: No mapping found: javax.mail.Transport -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.MessagingException not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Session not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.internet.MimeMessage not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.internet.InternetAddress not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Message$RecipientType not found! -->
<!-- WARNING: Unresolved external dependency: javax.mail.Transport not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.ContainerDialog -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.ContainerDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.gui.swing.dialog.AbstractDialog -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.dialog.AbstractDialog not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: No mapping found: de.savemytube.flv.FLV -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.ConvertDialog$ConversionMode -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog$ConversionMode not found! -->
<!-- WARNING: Unresolved external dependency: de.savemytube.flv.FLV not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.ConvertDialog not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDFileFilter -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.JDImage -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDImage not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.OSDetector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.OSDetector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Executer not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: jd.gui.swing.components.JDFileChooser -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.userio.UserIOGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.components.JDFileChooser -->
<!-- WARNING: No mapping found: jd.gui.swing.components.JDFileChooser -->
<!-- WARNING: No mapping found: jd.gui.swing.components.JDFileChooser -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.JDFileChooser not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.userio.UserIOGui not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Diff not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Diff not found! -->
<!-- WARNING: No mapping found: tests.utils.TestUtils -->
<!-- WARNING: No mapping found: tests.utils.TestUtils -->
<!-- WARNING: No mapping found: tests.utils.TestUtils -->
<!-- WARNING: No mapping found: tests.utils.TestUtils -->
<!-- WARNING: No mapping found: tests.utils.TestUtils -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.DiffMatchPatch -->
<!-- WARNING: No mapping found: jd.nutils.DiffMatchPatch -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: No mapping found: jd.nutils.DiffMatchPatch$Operation -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: No mapping found: jd.nutils.DiffMatchPatch$Operation -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: Unresolved external dependency: tests.utils.TestUtils not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Diff not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.DiffMatchPatch$Operation not found! -->
<!-- WARNING: No mapping found: jd.nutils.Formatter -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Formatter not found! -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: No mapping found: jd.nutils.Executer -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.Executer not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO$FileSelector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO$FileSelector -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: jd.nutils.svn.Subversion -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: org.tmatesoft.svn.core.SVNException -->
<!-- WARNING: No mapping found: jd.nutils.zip.Zip -->
<!-- WARNING: No mapping found: jd.nutils.zip.Zip -->
<!-- WARNING: No mapping found: jd.nutils.zip.Zip -->
<!-- WARNING: No mapping found: jd.nutils.zip.Zip -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.io.JDIO -->
<!-- WARNING: No mapping found: jd.nutils.SimpleFTP -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.zip.Zip -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.nutils.SimpleFTP -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO not found! -->
<!-- WARNING: Unresolved external dependency: org.tmatesoft.svn.core.SVNException not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.svn.Subversion not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.zip.Zip not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.SimpleFTP not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDIO$FileSelector not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.requests.FormData -->
<!-- WARNING: No mapping found: jd.http.requests.PostFormDataRequest -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.FormData not found! -->
<!-- WARNING: No mapping found: jd.http.requests.FormData -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.requests.PostFormDataRequest -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.PostFormDataRequest not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.requests.FormData not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.GuiRunnable -->
<!-- WARNING: No mapping found: jd.gui.swing.SwingGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.SwingGui not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.SwingGui -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.GuiRunnable not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.SwingGui not found! -->
<!-- WARNING: No mapping found: jd.gui.swing.jdgui.GUIUtils -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.nativeintegration.LocalBrowser -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.jdgui.GUIUtils not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.nativeintegration.LocalBrowser not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.nutils.JDFlags -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDFlags not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.JDHash -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: No mapping found: jd.gui.UserIO -->
<!-- WARNING: No mapping found: jd.gui.swing.components.Balloon -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.JDHash not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.UserIO not found! -->
<!-- WARNING: Unresolved external dependency: jd.gui.swing.components.Balloon not found! -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: No mapping found: jd.http.Request -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: No mapping found: jd.http.URLConnectionAdapter -->
<!-- WARNING: No mapping found: jd.nutils.io.JDFileFilter -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.http.Browser -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: No mapping found: jd.nutils.encoding.Encoding -->
<!-- WARNING: Unresolved external dependency: jd.http.Browser not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.Request not found! -->
<!-- WARNING: Unresolved external dependency: jd.http.URLConnectionAdapter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.io.JDFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: jd.nutils.encoding.Encoding not found! -->
<expose>
  <class name="jd.parser.html.Form$MethodType"/>
  <field class="jd.parser.html.Form$MethodType" name="GET"/>
  <field class="jd.parser.html.Form$MethodType" name="ENUM$VALUES"/>
  <field class="jd.parser.html.Form$MethodType" name="UNKNOWN"/>
  <field class="jd.parser.html.Form$MethodType" name="PUT"/>
  <field class="jd.parser.html.Form$MethodType" name="POST"/>
  <method class="jd.parser.html.Form$MethodType" name="jd.parser.html.Form$MethodType valueOf(java.lang.String)"/>
  <method class="jd.parser.html.Form$MethodType" name="jd.parser.html.Form$MethodType[] values()"/>
  <class name="jd.parser.html.Form"/>
  <field class="jd.parser.html.Form" name="preferredSubmit"/>
  <field class="jd.parser.html.Form" name="encoding"/>
  <field class="jd.parser.html.Form" name="action"/>
  <field class="jd.parser.html.Form" name="inputfields"/>
  <field class="jd.parser.html.Form" name="method"/>
  <field class="jd.parser.html.Form" name="htmlcode"/>
  <field class="jd.parser.html.Form" name="serialVersionUID"/>
  <method class="jd.parser.html.Form" name="java.util.ArrayList getRequestVariables()"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.Form[] getForms(java.lang.Object)"/>
  <method class="jd.parser.html.Form" name="void parseInputFields()"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.InputField getInputFieldByProperty(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="java.util.ArrayList getInputFields()"/>
  <method class="jd.parser.html.Form" name="void addInputFieldAt(jd.parser.html.InputField, int)"/>
  <method class="jd.parser.html.Form" name="java.lang.String getPropertyString()"/>
  <method class="jd.parser.html.Form" name="java.lang.String getBestVariable(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="java.util.ArrayList getInputFieldsByType(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="void put(java.lang.String, java.lang.String)"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.InputField getInputField(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="void setPreferredSubmit(int)"/>
  <method class="jd.parser.html.Form" name="java.lang.String getEncoding()"/>
  <method class="jd.parser.html.Form" name="java.lang.String toString()"/>
  <method class="jd.parser.html.Form" name="java.lang.String getHtmlCode()"/>
  <method class="jd.parser.html.Form" name="void parseHeader(java.lang.String[][])"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.InputField getInputFieldByName(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="java.lang.String getAction(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="jd.parser.Regex getRegex(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="boolean containsHTML(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="boolean hasInputFieldByName(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="java.lang.String getAction()"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.Form$MethodType getMethod()"/>
  <method class="jd.parser.html.Form" name="void setPreferredSubmit(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="void setMethod(jd.parser.html.Form$MethodType)"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.InputField getInputFieldByType(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="void remove(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="boolean equalsIgnoreCase(jd.parser.html.Form)"/>
  <method class="jd.parser.html.Form" name="void parse(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="void addInputField(jd.parser.html.InputField)"/>
  <method class="jd.parser.html.Form" name="jd.parser.html.InputField getPreferredSubmit()"/>
  <method class="jd.parser.html.Form" name="void setAction(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="java.util.HashMap getVarsMap()"/>
  <method class="jd.parser.html.Form" name="void setEncoding(java.lang.String)"/>
  <method class="jd.parser.html.Form" name="jd.parser.Regex getRegex(java.util.regex.Pattern)"/>
  <class name="jd.parser.html.XPath"/>
  <field class="jd.parser.html.XPath" name="xpath"/>
  <field class="jd.parser.html.XPath" name="cleaner"/>
  <field class="jd.parser.html.XPath" name="source"/>
  <field class="jd.parser.html.XPath" name="query"/>
  <field class="jd.parser.html.XPath" name="doc"/>
  <method class="jd.parser.html.XPath" name="java.util.ArrayList getMatches()"/>
  <method class="jd.parser.html.XPath" name="int getCount()"/>
  <method class="jd.parser.html.XPath" name="java.lang.String getFirstAttributeMatch(java.lang.String)"/>
  <method class="jd.parser.html.XPath" name="java.lang.String getAttributeMatch(java.lang.String, int)"/>
  <method class="jd.parser.html.XPath" name="java.lang.String getFirstMatch(int)"/>
  <method class="jd.parser.html.XPath" name="java.lang.String getQuery()"/>
  <method class="jd.parser.html.XPath" name="java.util.ArrayList getAttributeMatches(java.lang.String)"/>
  <method class="jd.parser.html.XPath" name="void setQuery(java.lang.String)"/>
  <method class="jd.parser.html.XPath" name="java.lang.String showTransformation()"/>
  <method class="jd.parser.html.XPath" name="java.lang.String getFirstMatch()"/>
  <class name="jd.parser.html.InputField"/>
  <field class="jd.parser.html.InputField" name="key"/>
  <field class="jd.parser.html.InputField" name="type"/>
  <field class="jd.parser.html.InputField" name="value"/>
  <field class="jd.parser.html.InputField" name="serialVersionUID"/>
  <method class="jd.parser.html.InputField" name="java.io.File getFileToPost()"/>
  <method class="jd.parser.html.InputField" name="java.lang.String getKey()"/>
  <method class="jd.parser.html.InputField" name="java.lang.String getType()"/>
  <method class="jd.parser.html.InputField" name="jd.parser.html.InputField parse(java.lang.String)"/>
  <method class="jd.parser.html.InputField" name="void setKey(java.lang.String)"/>
  <method class="jd.parser.html.InputField" name="void setType(java.lang.String)"/>
  <method class="jd.parser.html.InputField" name="java.lang.String toString()"/>
  <method class="jd.parser.html.InputField" name="java.lang.String getValue()"/>
  <method class="jd.parser.html.InputField" name="void setFileToPost(java.io.File)"/>
  <method class="jd.parser.html.InputField" name="void setValue(java.lang.String)"/>
  <field class="jd.parser.html.HTMLParser$1Httppattern" name="group"/>
  <field class="jd.parser.html.HTMLParser$1Httppattern" name="p"/>
  <class name="jd.parser.html.HTMLParser"/>
  <method class="jd.parser.html.HTMLParser" name="java.lang.String getHttpLinkList(java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.util.HashMap getInputHiddenFields(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.lang.String[] getHttpLinks(java.lang.String, java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.util.HashMap getInputHiddenFields(java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.lang.String getFormInputHidden(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.util.ArrayList findPasswords(java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.lang.String joinMap(java.util.Map, java.lang.String, java.lang.String)"/>
  <method class="jd.parser.html.HTMLParser" name="java.lang.String getFormInputHidden(java.lang.String)"/>
  <class name="jd.parser.Regex"/>
  <field class="jd.parser.Regex" name="matcher"/>
  <method class="jd.parser.Regex" name="java.lang.String escape(java.lang.String)"/>
  <method class="jd.parser.Regex" name="void setMatcher(java.util.regex.Matcher)"/>
  <method class="jd.parser.Regex" name="boolean matches()"/>
  <method class="jd.parser.Regex" name="long getSize(java.lang.String)"/>
  <method class="jd.parser.Regex" name="java.lang.String toString()"/>
  <method class="jd.parser.Regex" name="long getMilliSeconds(java.lang.String)"/>
  <method class="jd.parser.Regex" name="boolean matches(java.lang.Object, java.util.regex.Pattern)"/>
  <method class="jd.parser.Regex" name="java.lang.String[][] getMatches()"/>
  <method class="jd.parser.Regex" name="int getMilliSeconds2(java.lang.String)"/>
  <method class="jd.parser.Regex" name="long getMilliSeconds(java.lang.String, java.lang.String, java.util.Locale)"/>
  <method class="jd.parser.Regex" name="java.lang.String[] getRow(int)"/>
  <method class="jd.parser.Regex" name="java.lang.String getMatch(int)"/>
  <method class="jd.parser.Regex" name="java.lang.String[] getLines(java.lang.String)"/>
  <method class="jd.parser.Regex" name="boolean matches(java.lang.Object, java.lang.String)"/>
  <method class="jd.parser.Regex" name="int count()"/>
  <method class="jd.parser.Regex" name="java.lang.String getMatch(int, int)"/>
  <method class="jd.parser.Regex" name="java.lang.String[] getColumn(int)"/>
  <method class="jd.parser.Regex" name="java.util.regex.Matcher getMatcher()"/>
  <class name="jd.parser.Document"/>
  <field class="jd.parser.Document" name="content"/>
  <method class="jd.parser.Document" name="java.lang.String getContent()"/>
  <method class="jd.parser.Document" name="void write(java.lang.String)"/>
  <class name="jd.parser.JavaScript"/>
  <field class="jd.parser.JavaScript" name="cx"/>
  <field class="jd.parser.JavaScript" name="debug"/>
  <field class="jd.parser.JavaScript" name="wis"/>
  <field class="jd.parser.JavaScript" name="executed"/>
  <field class="jd.parser.JavaScript" name="br"/>
  <field class="jd.parser.JavaScript" name="scope"/>
  <field class="jd.parser.JavaScript" name="javaScript"/>
  <field class="jd.parser.JavaScript" name="d"/>
  <method class="jd.parser.JavaScript" name="void runString(java.lang.String)"/>
  <method class="jd.parser.JavaScript" name="void runPage()"/>
  <method class="jd.parser.JavaScript" name="java.lang.String runJavaScript()"/>
  <method class="jd.parser.JavaScript" name="java.lang.String parseJS(java.lang.String)"/>
  <method class="jd.parser.JavaScript" name="jd.parser.Document getDocment()"/>
  <method class="jd.parser.JavaScript" name="java.lang.String toString()"/>
  <method class="jd.parser.JavaScript" name="java.lang.String getVar(java.lang.String)"/>
  <method class="jd.parser.JavaScript" name="java.lang.String callFunction(java.lang.String)"/>
  <method class="jd.parser.JavaScript" name="java.lang.String callFunction(java.lang.String, java.lang.String[])"/>
  <class name="jd.event.MessageEvent"/>
  <field class="jd.event.MessageEvent" name="message"/>
  <method class="jd.event.MessageEvent" name="void setMessage(java.lang.String)"/>
  <method class="jd.event.MessageEvent" name="java.lang.String getMessage()"/>
  <class name="jd.event.JDEvent"/>
  <field class="jd.event.JDEvent" name="ID"/>
  <field class="jd.event.JDEvent" name="source"/>
  <field class="jd.event.JDEvent" name="parameter"/>
  <method class="jd.event.JDEvent" name="java.lang.Object getParameter()"/>
  <method class="jd.event.JDEvent" name="java.lang.Object getSource()"/>
  <method class="jd.event.JDEvent" name="int getID()"/>
  <method class="jd.event.JDEvent" name="java.lang.String toString()"/>
  <class name="jd.event.JDBroadcaster"/>
  <field class="jd.event.JDBroadcaster" name="callList"/>
  <field class="jd.event.JDBroadcaster" name="removeList"/>
  <method class="jd.event.JDBroadcaster" name="void addAllListener(java.util.Vector)"/>
  <method class="jd.event.JDBroadcaster" name="boolean fireEvent(jd.event.JDEvent)"/>
  <method class="jd.event.JDBroadcaster" name="void addListener(java.util.EventListener)"/>
  <method class="jd.event.JDBroadcaster" name="boolean hasListener()"/>
  <method class="jd.event.JDBroadcaster" name="java.util.Vector getListener()"/>
  <method class="jd.event.JDBroadcaster" name="void removeListener(java.util.EventListener)"/>
  <method class="jd.event.JDBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.event.MessageListener"/>
  <method class="jd.event.MessageListener" name="void onMessage(jd.event.MessageEvent)"/>
  <class name="jd.event.ControlIDListener"/>
  <field class="jd.event.ControlIDListener" name="ids"/>
  <method class="jd.event.ControlIDListener" name="void controlIDEvent(jd.event.ControlEvent)"/>
  <method class="jd.event.ControlIDListener" name="void controlEvent(jd.event.ControlEvent)"/>
  <class name="jd.event.ControlEvent"/>
  <field class="jd.event.ControlEvent" name="CONTROL_PLUGIN_INACTIVE"/>
  <field class="jd.event.ControlEvent" name="CONTROL_SYSTEM_EXIT"/>
  <field class="jd.event.ControlEvent" name="parameter"/>
  <field class="jd.event.ControlEvent" name="controlID"/>
  <field class="jd.event.ControlEvent" name="CONTROL_SYSTEM_SHUTDOWN_PREPARED"/>
  <field class="jd.event.ControlEvent" name="CONTROL_LINKLIST_CONTEXT_MENU"/>
  <field class="jd.event.ControlEvent" name="CONTROL_LOG_OCCURED"/>
  <field class="jd.event.ControlEvent" name="serialVersionUID"/>
  <field class="jd.event.ControlEvent" name="CONTROL_PLUGIN_ACTIVE"/>
  <field class="jd.event.ControlEvent" name="CONTROL_ON_PROGRESS"/>
  <field class="jd.event.ControlEvent" name="CONTROL_JDPROPERTY_CHANGED"/>
  <field class="jd.event.ControlEvent" name="CONTROL_INTERACTION_CALL"/>
  <field class="jd.event.ControlEvent" name="CONTROL_INIT_COMPLETE"/>
  <field class="jd.event.ControlEvent" name="CONTROL_ON_FILEOUTPUT"/>
  <field class="jd.event.ControlEvent" name="CONTROL_ALL_DOWNLOADS_FINISHED"/>
  <field class="jd.event.ControlEvent" name="CONTROL_COLLECT_DATA"/>
  <field class="jd.event.ControlEvent" name="CONTROL_DOWNLOAD_STOP"/>
  <field class="jd.event.ControlEvent" name="CONTROL_DOWNLOAD_START"/>
  <method class="jd.event.ControlEvent" name="java.lang.Object getParameter()"/>
  <method class="jd.event.ControlEvent" name="int getID()"/>
  <method class="jd.event.ControlEvent" name="java.lang.String toString()"/>
  <class name="jd.event.ControlListener"/>
  <method class="jd.event.ControlListener" name="void controlEvent(jd.event.ControlEvent)"/>
  <class name="jd.config.container.JDLabelContainer"/>
  <method class="jd.config.container.JDLabelContainer" name="java.lang.String getLabel()"/>
  <method class="jd.config.container.JDLabelContainer" name="javax.swing.ImageIcon getIcon()"/>
  <class name="jd.config.ConfigContainer"/>
  <field class="jd.config.ConfigContainer" name="TYPE_SPINNER"/>
  <field class="jd.config.ConfigContainer" name="TYPE_BUTTON"/>
  <field class="jd.config.ConfigContainer" name="TYPE_LABEL"/>
  <field class="jd.config.ConfigContainer" name="TYPE_LISTCONTROLLED"/>
  <field class="jd.config.ConfigContainer" name="TYPE_COMBOBOX_INDEX"/>
  <field class="jd.config.ConfigContainer" name="serialVersionUID"/>
  <field class="jd.config.ConfigContainer" name="group"/>
  <field class="jd.config.ConfigContainer" name="TYPE_CHECKBOX"/>
  <field class="jd.config.ConfigContainer" name="TYPE_TEXTAREA"/>
  <field class="jd.config.ConfigContainer" name="TYPE_COMBOBOX"/>
  <field class="jd.config.ConfigContainer" name="TYPE_PASSWORDFIELD"/>
  <field class="jd.config.ConfigContainer" name="ACTION_REQUEST_SAVE"/>
  <field class="jd.config.ConfigContainer" name="containers"/>
  <field class="jd.config.ConfigContainer" name="TYPE_SEPARATOR"/>
  <field class="jd.config.ConfigContainer" name="content"/>
  <field class="jd.config.ConfigContainer" name="TYPE_LINK"/>
  <field class="jd.config.ConfigContainer" name="propertyInstance"/>
  <field class="jd.config.ConfigContainer" name="TYPE_BROWSEFILE"/>
  <field class="jd.config.ConfigContainer" name="TYPE_TEXTFIELD"/>
  <field class="jd.config.ConfigContainer" name="icon"/>
  <field class="jd.config.ConfigContainer" name="TYPE_BROWSEFOLDER"/>
  <field class="jd.config.ConfigContainer" name="TYPE_RADIOFIELD"/>
  <field class="jd.config.ConfigContainer" name="title"/>
  <field class="jd.config.ConfigContainer" name="TYPE_CONTAINER"/>
  <method class="jd.config.ConfigContainer" name="javax.swing.ImageIcon getIcon()"/>
  <method class="jd.config.ConfigContainer" name="int getContainerNum()"/>
  <method class="jd.config.ConfigContainer" name="void setGroup(jd.config.ConfigGroup)"/>
  <method class="jd.config.ConfigContainer" name="jd.config.Property getPropertyInstance()"/>
  <method class="jd.config.ConfigContainer" name="void setPropertyInstance(jd.config.Property)"/>
  <method class="jd.config.ConfigContainer" name="java.lang.String getTitle()"/>
  <method class="jd.config.ConfigContainer" name="jd.config.ConfigEntry getEntryAt(int)"/>
  <method class="jd.config.ConfigContainer" name="java.util.ArrayList getEntries()"/>
  <method class="jd.config.ConfigContainer" name="void setIcon(javax.swing.ImageIcon)"/>
  <method class="jd.config.ConfigContainer" name="void addEntry(jd.config.ConfigEntry)"/>
  <method class="jd.config.ConfigContainer" name="void setTitle(java.lang.String)"/>
  <method class="jd.config.ConfigContainer" name="jd.config.ConfigGroup getGroup()"/>
  <class name="jd.config.CFGConfig"/>
  <field class="jd.config.CFGConfig" name="CONFIGS"/>
  <field class="jd.config.CFGConfig" name="serialVersionUID"/>
  <method class="jd.config.CFGConfig" name="jd.config.CFGConfig getConfig(java.lang.String)"/>
  <method class="jd.config.CFGConfig" name="jd.config.SubConfiguration getConfig(java.lang.String)"/>
  <method class="jd.config.CFGConfig" name="void save()"/>
  <class name="jd.config.Configuration"/>
  <field class="jd.config.Configuration" name="PROXY_USER_SOCKS"/>
  <field class="jd.config.Configuration" name="PARAM_WEBUPDATE_DISABLE"/>
  <field class="jd.config.Configuration" name="AUTOTRAIN_ERROR_LEVEL"/>
  <field class="jd.config.Configuration" name="PARAM_CURRENT_BROWSE_PATH"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_USER"/>
  <field class="jd.config.Configuration" name="serialVersionUID"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_PAUSE_SPEED"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_MAX_SIMULTAN"/>
  <field class="jd.config.Configuration" name="PARAM_USE_GLOBAL_PREMIUM"/>
  <field class="jd.config.Configuration" name="SOCKS_PORT"/>
  <field class="jd.config.Configuration" name="PROXY_PASS"/>
  <field class="jd.config.Configuration" name="PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD"/>
  <field class="jd.config.Configuration" name="PARAM_CLIPBOARD_ALWAYS_ACTIVE"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_MAX_SIMULTAN_PER_HOST"/>
  <field class="jd.config.Configuration" name="PARAM_GLOBAL_IP_MASK"/>
  <field class="jd.config.Configuration" name="PROXY_HOST"/>
  <field class="jd.config.Configuration" name="PARAM_USE_PACKETNAME_AS_SUBFOLDER"/>
  <field class="jd.config.Configuration" name="PARAM_FILE_BROWSER"/>
  <field class="jd.config.Configuration" name="PROXY_PASS_SOCKS"/>
  <field class="jd.config.Configuration" name="PARAM_RELOADCONTAINER"/>
  <field class="jd.config.Configuration" name="PARAM_INTERACTIONS"/>
  <field class="jd.config.Configuration" name="PARAM_SHOW_CONTAINER_ONLOAD_OVERVIEW"/>
  <field class="jd.config.Configuration" name="SOCKS_TYPE"/>
  <field class="jd.config.Configuration" name="USE_SOCKS"/>
  <field class="jd.config.Configuration" name="PARAM_RECONNECT_FAILED_COUNTER"/>
  <field class="jd.config.Configuration" name="PARAM_ALLOW_RECONNECT"/>
  <field class="jd.config.Configuration" name="PARAM_GLOBAL_IP_DISABLE"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_READ_TIMEOUT"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_DIRECTORY"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_PASS"/>
  <field class="jd.config.Configuration" name="PARAM_RECONNECT_OKAY"/>
  <field class="jd.config.Configuration" name="PARAM_GLOBAL_IP_PATTERN"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_REQUESTS"/>
  <field class="jd.config.Configuration" name="PARAM_FINISHED_DOWNLOADS_ACTION"/>
  <field class="jd.config.Configuration" name="PARAM_FILE_EXISTS"/>
  <field class="jd.config.Configuration" name="SOCKS_HOST"/>
  <field class="jd.config.Configuration" name="NAME"/>
  <field class="jd.config.Configuration" name="PARAM_UPDATE_VERSION"/>
  <field class="jd.config.Configuration" name="PARAM_GLOBAL_IP_CHECK_SITE"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_MAX_CHUNKS"/>
  <field class="jd.config.Configuration" name="PARAM_DO_CRC"/>
  <field class="jd.config.Configuration" name="JAC_SHOW_TIMEOUT"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_CONNECT_TIMEOUT"/>
  <field class="jd.config.Configuration" name="PROXY_USER"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_REQUESTS_CLR"/>
  <field class="jd.config.Configuration" name="PARAM_DOWNLOAD_MAX_SPEED"/>
  <field class="jd.config.Configuration" name="PARAM_WEBUPDATE_AUTO_SHOW_CHANGELOG"/>
  <field class="jd.config.Configuration" name="USE_PROXY"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_IP"/>
  <field class="jd.config.Configuration" name="PARAM_CAPTCHA_JAC_DISABLE"/>
  <field class="jd.config.Configuration" name="PARAM_GLOBAL_IP_BALANCE"/>
  <field class="jd.config.Configuration" name="PARAM_WEBUPDATE_AUTO_RESTART"/>
  <field class="jd.config.Configuration" name="PARAM_LOGGER_LEVEL"/>
  <field class="jd.config.Configuration" name="PROXY_PORT"/>
  <field class="jd.config.Configuration" name="PARAM_HTTPSEND_ROUTERNAME"/>
  <method class="jd.config.Configuration" name="void save()"/>
  <method class="jd.config.Configuration" name="java.lang.String toString()"/>
  <class name="jd.config.SubConfiguration"/>
  <field class="jd.config.SubConfiguration" name="SUBCONFIG_LOCK"/>
  <field class="jd.config.SubConfiguration" name="name"/>
  <field class="jd.config.SubConfiguration" name="SUB_CONFIGS"/>
  <field class="jd.config.SubConfiguration" name="listener"/>
  <field class="jd.config.SubConfiguration" name="serialVersionUID"/>
  <method class="jd.config.SubConfiguration" name="void removeConfigurationListener(jd.config.ConfigurationListener)"/>
  <method class="jd.config.SubConfiguration" name="jd.config.SubConfiguration getConfig(java.lang.Object)"/>
  <method class="jd.config.SubConfiguration" name="jd.config.SubConfiguration getConfig(java.lang.String)"/>
  <method class="jd.config.SubConfiguration" name="void addConfigurationListener(jd.config.ConfigurationListener)"/>
  <method class="jd.config.SubConfiguration" name="void save()"/>
  <method class="jd.config.SubConfiguration" name="java.lang.String toString()"/>
  <method class="jd.config.SubConfiguration" name="void fireEventPostSave()"/>
  <method class="jd.config.SubConfiguration" name="void fireEventPreSave()"/>
  <class name="jd.config.ConfigEntry$PropertyType"/>
  <field class="jd.config.ConfigEntry$PropertyType" name="ENUM$VALUES"/>
  <field class="jd.config.ConfigEntry$PropertyType" name="NORMAL"/>
  <field class="jd.config.ConfigEntry$PropertyType" name="NEEDS_RESTART"/>
  <field class="jd.config.ConfigEntry$PropertyType" name="NONE"/>
  <method class="jd.config.ConfigEntry$PropertyType" name="jd.config.ConfigEntry$PropertyType[] values()"/>
  <method class="jd.config.ConfigEntry$PropertyType" name="jd.config.ConfigEntry$PropertyType getMax(jd.config.ConfigEntry$PropertyType)"/>
  <method class="jd.config.ConfigEntry$PropertyType" name="java.lang.String toString()"/>
  <method class="jd.config.ConfigEntry$PropertyType" name="jd.config.ConfigEntry$PropertyType getMax(jd.config.ConfigEntry$PropertyType[])"/>
  <method class="jd.config.ConfigEntry$PropertyType" name="jd.config.ConfigEntry$PropertyType valueOf(java.lang.String)"/>
  <field class="jd.config.ConfigEntry$1" name="this$0"/>
  <method class="jd.config.ConfigEntry$1" name="java.lang.String getList()"/>
  <method class="jd.config.ConfigEntry$1" name="void setList(java.lang.String)"/>
  <class name="jd.config.ConfigEntry"/>
  <field class="jd.config.ConfigEntry" name="compareValue"/>
  <field class="jd.config.ConfigEntry" name="type"/>
  <field class="jd.config.ConfigEntry" name="end"/>
  <field class="jd.config.ConfigEntry" name="listener"/>
  <field class="jd.config.ConfigEntry" name="start"/>
  <field class="jd.config.ConfigEntry" name="step"/>
  <field class="jd.config.ConfigEntry" name="helptags"/>
  <field class="jd.config.ConfigEntry" name="serialVersionUID"/>
  <field class="jd.config.ConfigEntry" name="group"/>
  <field class="jd.config.ConfigEntry" name="label"/>
  <field class="jd.config.ConfigEntry" name="enabled"/>
  <field class="jd.config.ConfigEntry" name="conditionEntry"/>
  <field class="jd.config.ConfigEntry" name="container"/>
  <field class="jd.config.ConfigEntry" name="propertyName"/>
  <field class="jd.config.ConfigEntry" name="controller"/>
  <field class="jd.config.ConfigEntry" name="imageIcon"/>
  <field class="jd.config.ConfigEntry" name="defaultValue"/>
  <field class="jd.config.ConfigEntry" name="propertyType"/>
  <field class="jd.config.ConfigEntry" name="description"/>
  <field class="jd.config.ConfigEntry" name="propertyInstance"/>
  <field class="jd.config.ConfigEntry" name="list"/>
  <field class="jd.config.ConfigEntry" name="actionListener"/>
  <field class="jd.config.ConfigEntry" name="guiListener"/>
  <field class="jd.config.ConfigEntry" name="changes"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigContainer getContainer()"/>
  <method class="jd.config.ConfigEntry" name="void setDescription(java.lang.String)"/>
  <method class="jd.config.ConfigEntry" name="java.lang.String getDescription()"/>
  <method class="jd.config.ConfigEntry" name="java.lang.String getLabel()"/>
  <method class="jd.config.ConfigEntry" name="void setGuiListener(java.beans.PropertyChangeListener)"/>
  <method class="jd.config.ConfigEntry" name="int getStep()"/>
  <method class="jd.config.ConfigEntry" name="java.util.Vector getListener()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry$PropertyType getPropertyType()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setStep(int)"/>
  <method class="jd.config.ConfigEntry" name="jd.controlling.ListController getListController()"/>
  <method class="jd.config.ConfigEntry" name="int getType()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setActionListener(java.awt.event.ActionListener)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigGroup getGroup()"/>
  <method class="jd.config.ConfigEntry" name="java.beans.PropertyChangeListener getGuiListener()"/>
  <method class="jd.config.ConfigEntry" name="boolean hasChanges()"/>
  <method class="jd.config.ConfigEntry" name="java.lang.String getPropertyName()"/>
  <method class="jd.config.ConfigEntry" name="boolean isConditionalEnabled(java.beans.PropertyChangeEvent)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setPropertyType(jd.config.ConfigEntry$PropertyType)"/>
  <method class="jd.config.ConfigEntry" name="java.awt.event.ActionListener getActionListener()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setEnabled(boolean)"/>
  <method class="jd.config.ConfigEntry" name="void setContainer(jd.config.ConfigContainer)"/>
  <method class="jd.config.ConfigEntry" name="java.lang.Object getDefaultValue()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setEnd(int)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setGroup(jd.config.ConfigGroup)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setPropertyInstance(jd.config.Property)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setList(java.lang.Object[])"/>
  <method class="jd.config.ConfigEntry" name="javax.swing.ImageIcon getImageIcon()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setType(int)"/>
  <method class="jd.config.ConfigEntry" name="void setChanges(boolean)"/>
  <method class="jd.config.ConfigEntry" name="void setImageIcon(javax.swing.ImageIcon)"/>
  <method class="jd.config.ConfigEntry" name="void addListener(jd.config.ConfigEntry)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setStart(int)"/>
  <method class="jd.config.ConfigEntry" name="java.lang.Object[] getList()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setEnabledCondidtion(jd.config.ConfigEntry, boolean)"/>
  <method class="jd.config.ConfigEntry" name="void setHelptags(java.lang.String)"/>
  <method class="jd.config.ConfigEntry" name="void valueChanged(java.lang.Object)"/>
  <method class="jd.config.ConfigEntry" name="int getStart()"/>
  <method class="jd.config.ConfigEntry" name="int getEnd()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setPropertyName(java.lang.String)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.Property getPropertyInstance()"/>
  <method class="jd.config.ConfigEntry" name="java.lang.String getHelptags()"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setDefaultValue(java.lang.Object)"/>
  <method class="jd.config.ConfigEntry" name="jd.config.ConfigEntry setLabel(java.lang.String)"/>
  <method class="jd.config.ConfigEntry" name="boolean isEnabled()"/>
  <class name="jd.config.ConfigGroup"/>
  <field class="jd.config.ConfigGroup" name="name"/>
  <field class="jd.config.ConfigGroup" name="icon"/>
  <method class="jd.config.ConfigGroup" name="void setName(java.lang.String)"/>
  <method class="jd.config.ConfigGroup" name="java.lang.String getName()"/>
  <method class="jd.config.ConfigGroup" name="void setIcon(javax.swing.ImageIcon)"/>
  <method class="jd.config.ConfigGroup" name="javax.swing.ImageIcon getIcon()"/>
  <class name="jd.config.DatabaseConnector"/>
  <field class="jd.config.DatabaseConnector" name="con"/>
  <field class="jd.config.DatabaseConnector" name="dbdata"/>
  <field class="jd.config.DatabaseConnector" name="logger"/>
  <field class="jd.config.DatabaseConnector" name="configpath"/>
  <field class="jd.config.DatabaseConnector" name="LOCK"/>
  <field class="jd.config.DatabaseConnector" name="dbshutdown"/>
  <field class="jd.config.DatabaseConnector" name="serialVersionUID"/>
  <method class="jd.config.DatabaseConnector" name="void shutdownDatabase()"/>
  <method class="jd.config.DatabaseConnector" name="boolean isDatabaseShutdown()"/>
  <method class="jd.config.DatabaseConnector" name="java.lang.Object getData(java.lang.String)"/>
  <method class="jd.config.DatabaseConnector" name="java.util.ArrayList getSubConfigurationKeys()"/>
  <method class="jd.config.DatabaseConnector" name="java.sql.Connection getDatabaseConnection()"/>
  <method class="jd.config.DatabaseConnector" name="boolean checkDatabaseHeader()"/>
  <method class="jd.config.DatabaseConnector" name="java.lang.Object getLinks()"/>
  <method class="jd.config.DatabaseConnector" name="void saveLinks(java.lang.Object)"/>
  <method class="jd.config.DatabaseConnector" name="void saveConfiguration(java.lang.String, java.lang.Object)"/>
  <class name="jd.config.Property"/>
  <field class="jd.config.Property" name="propertiesHashes"/>
  <field class="jd.config.Property" name="logger"/>
  <field class="jd.config.Property" name="properties"/>
  <field class="jd.config.Property" name="changes"/>
  <field class="jd.config.Property" name="NULL"/>
  <field class="jd.config.Property" name="serialVersionUID"/>
  <method class="jd.config.Property" name="java.lang.String getStringProperty(java.lang.String, java.lang.String)"/>
  <method class="jd.config.Property" name="java.lang.Boolean getBooleanProperty(java.lang.String)"/>
  <method class="jd.config.Property" name="java.lang.Double getDoubleProperty(java.lang.String)"/>
  <method class="jd.config.Property" name="java.util.HashMap getProperties()"/>
  <method class="jd.config.Property" name="java.lang.Boolean getBooleanProperty(java.lang.String, boolean)"/>
  <method class="jd.config.Property" name="java.lang.Object getGenericProperty(java.lang.String, java.lang.Object)"/>
  <method class="jd.config.Property" name="void setProperties(java.util.HashMap)"/>
  <method class="jd.config.Property" name="java.lang.Object getProperty(java.lang.String)"/>
  <method class="jd.config.Property" name="void setProperty(java.lang.String, java.lang.Object)"/>
  <method class="jd.config.Property" name="int getIntegerProperty(java.lang.String, int)"/>
  <method class="jd.config.Property" name="java.lang.Double getDoubleProperty(java.lang.String, java.lang.Double)"/>
  <method class="jd.config.Property" name="int getIntegerProperty(java.lang.String)"/>
  <method class="jd.config.Property" name="java.lang.Object getProperty(java.lang.String, java.lang.Object)"/>
  <method class="jd.config.Property" name="java.lang.String toString()"/>
  <method class="jd.config.Property" name="boolean hasProperty(java.lang.String)"/>
  <method class="jd.config.Property" name="boolean hasChanges()"/>
  <method class="jd.config.Property" name="java.lang.String getStringProperty(java.lang.String)"/>
  <class name="jd.config.ConfigPropertyListener"/>
  <field class="jd.config.ConfigPropertyListener" name="strict"/>
  <field class="jd.config.ConfigPropertyListener" name="list"/>
  <method class="jd.config.ConfigPropertyListener" name="boolean isStrict()"/>
  <method class="jd.config.ConfigPropertyListener" name="void onPropertyChanged(jd.config.Property, java.lang.String)"/>
  <method class="jd.config.ConfigPropertyListener" name="void setStrict(boolean)"/>
  <method class="jd.config.ConfigPropertyListener" name="void controlEvent(jd.event.ControlEvent)"/>
  <class name="jd.config.ConfigurationListener"/>
  <method class="jd.config.ConfigurationListener" name="void onPreSave(jd.config.SubConfiguration)"/>
  <method class="jd.config.ConfigurationListener" name="void onPostSave(jd.config.SubConfiguration)"/>
  <class name="jd.plugins.download.DownloadInterface$Chunk"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="desiredBps"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="startByte"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="inputStream"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="MIN_CHUNKSIZE"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="addedtoStartedChunks"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="MAX_BUFFERSIZE"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="connection"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="chunkBytesLoaded"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="MIN_BUFFERSIZE"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="id"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="source"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="blockStart"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="buffer"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="dl"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="speed"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="endByte"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="bufferTimeFaktor"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="chunkinprogress"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="connectionclosed"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="TIME_BASE"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="clonedconnection"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="totalPartBytes"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="this$0"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="maxSpeed"/>
  <field class="jd.plugins.download.DownloadInterface$Chunk" name="bytesPerSecond"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void setMaximalSpeed(int)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="jd.http.URLConnectionAdapter copyConnection(jd.http.URLConnectionAdapter)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="int getTimeInterval()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="boolean inProgress()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="boolean isClonedConnection()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void checkTimeout(long)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getDesiredBps()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void setLoaded(long)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="jd.controlling.SpeedMeter getSpeedMeter()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void closeConnections()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getChunkSize()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getStartByte()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="int getMaximalSpeed()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getBufferSize(long)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void startChunk()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getEndByte()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="int getPercent()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getBytesPerSecond()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getBytesLoaded()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void addChunkBytesLoaded(long)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void setInProgress(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void run0()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void run()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getWritePosition()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void addPartBytes(long)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void setChunkStartet()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="int getID()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void finalize()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getCurrentBytesPosition()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long access$0(jd.plugins.download.DownloadInterface$Chunk)"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="long getTotalPartBytesLoaded()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="boolean isExternalyAborted()"/>
  <method class="jd.plugins.download.DownloadInterface$Chunk" name="void download()"/>
  <class name="jd.plugins.download.DownloadInterface"/>
  <field class="jd.plugins.download.DownloadInterface" name="doFileSizeCheck"/>
  <field class="jd.plugins.download.DownloadInterface" name="totaleLinkBytesLoaded"/>
  <field class="jd.plugins.download.DownloadInterface" name="allowFilenameFromURL"/>
  <field class="jd.plugins.download.DownloadInterface" name="resume"/>
  <field class="jd.plugins.download.DownloadInterface" name="request"/>
  <field class="jd.plugins.download.DownloadInterface" name="plugin"/>
  <field class="jd.plugins.download.DownloadInterface" name="fileSizeVerified"/>
  <field class="jd.plugins.download.DownloadInterface" name="fakeContentRangeHeader_flag"/>
  <field class="jd.plugins.download.DownloadInterface" name="linkStatus"/>
  <field class="jd.plugins.download.DownloadInterface" name="errors"/>
  <field class="jd.plugins.download.DownloadInterface" name="ERROR_REDIRECTED"/>
  <field class="jd.plugins.download.DownloadInterface" name="downloadLink"/>
  <field class="jd.plugins.download.DownloadInterface" name="connection"/>
  <field class="jd.plugins.download.DownloadInterface" name="chunks"/>
  <field class="jd.plugins.download.DownloadInterface" name="chunksInProgress"/>
  <field class="jd.plugins.download.DownloadInterface" name="fileSize"/>
  <field class="jd.plugins.download.DownloadInterface" name="waitFlag"/>
  <field class="jd.plugins.download.DownloadInterface" name="chunkNum"/>
  <field class="jd.plugins.download.DownloadInterface" name="firstChunkRangeless"/>
  <field class="jd.plugins.download.DownloadInterface" name="fixWrongContentDispositionHeader"/>
  <field class="jd.plugins.download.DownloadInterface" name="userInterrupt"/>
  <field class="jd.plugins.download.DownloadInterface" name="readTimeout"/>
  <field class="jd.plugins.download.DownloadInterface" name="fatalErrorOccured"/>
  <field class="jd.plugins.download.DownloadInterface" name="chunksDownloading"/>
  <field class="jd.plugins.download.DownloadInterface" name="exceptions"/>
  <field class="jd.plugins.download.DownloadInterface" name="chunksStarted"/>
  <field class="jd.plugins.download.DownloadInterface" name="speedDebug"/>
  <field class="jd.plugins.download.DownloadInterface" name="browser"/>
  <field class="jd.plugins.download.DownloadInterface" name="connected"/>
  <field class="jd.plugins.download.DownloadInterface" name="requestTimeout"/>
  <field class="jd.plugins.download.DownloadInterface" name="logger"/>
  <method class="jd.plugins.download.DownloadInterface" name="jd.http.URLConnectionAdapter connect(jd.http.Browser)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean isFileSizeVerified()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void terminate()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setFirstChunkRangeless(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void onChunksReady()"/>
  <method class="jd.plugins.download.DownloadInterface" name="long head()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setAllowFilenameFromURL(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="java.util.Vector getExceptions()"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getChunkNum()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void waitForChunks()"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean preDownloadCheckFailed(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setBrowser(jd.http.Browser)"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getRequestTimeout()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setupChunks()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void fakeContentRangeHeader(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void access$1(jd.plugins.download.DownloadInterface)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setFileSizeVerified(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void onChunkFinished()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setResume(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="jd.http.Browser getBrowser()"/>
  <method class="jd.plugins.download.DownloadInterface" name="long getFileSize()"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean handleErrors()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addChunk(jd.plugins.download.DownloadInterface$Chunk)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean writeBytes(jd.plugins.download.DownloadInterface$Chunk)"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getChunksStarted()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void assignChunkSpeeds()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setFilesize(long)"/>
  <method class="jd.plugins.download.DownloadInterface" name="jd.http.URLConnectionAdapter connect()"/>
  <method class="jd.plugins.download.DownloadInterface" name="jd.http.Request getRequest()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addChunksDownloading(long)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addChunksStarted(int)"/>
  <method class="jd.plugins.download.DownloadInterface" name="jd.http.URLConnectionAdapter getConnection()"/>
  <method class="jd.plugins.download.DownloadInterface" name="java.util.Vector getErrors()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setReadTimeout(int)"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getChunksDownloading()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void connectFirstRange()"/>
  <method class="jd.plugins.download.DownloadInterface" name="java.util.Vector getChunks()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void error(int, java.lang.String)"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getRunningChunks()"/>
  <method class="jd.plugins.download.DownloadInterface" name="java.io.File getFile()"/>
  <method class="jd.plugins.download.DownloadInterface" name="java.util.Vector access$0(jd.plugins.download.DownloadInterface)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setFilenameFix(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean startDownload()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setChunkNum(int)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void connectResumable()"/>
  <method class="jd.plugins.download.DownloadInterface" name="int getReadTimeout()"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean writeChunkBytes(jd.plugins.download.DownloadInterface$Chunk)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean checkResumabled()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addException(java.lang.Exception)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setRequestTimeout(int)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean isFirstChunkRangeless()"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean isResume()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addToTotalLinkBytesLoaded(long)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean fakeContentRangeHeader()"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean fixFilename()"/>
  <method class="jd.plugins.download.DownloadInterface" name="void addToChunksInProgress(long)"/>
  <method class="jd.plugins.download.DownloadInterface" name="long headFake(java.lang.String)"/>
  <method class="jd.plugins.download.DownloadInterface" name="void setFilesizeCheck(boolean)"/>
  <method class="jd.plugins.download.DownloadInterface" name="boolean FilenameFromURLAllowed()"/>
  <class name="jd.plugins.download.RAFDownload$ChunkBuffer"/>
  <field class="jd.plugins.download.RAFDownload$ChunkBuffer" name="this$0"/>
  <field class="jd.plugins.download.RAFDownload$ChunkBuffer" name="position"/>
  <field class="jd.plugins.download.RAFDownload$ChunkBuffer" name="chunkID"/>
  <field class="jd.plugins.download.RAFDownload$ChunkBuffer" name="buffer"/>
  <field class="jd.plugins.download.RAFDownload$ChunkBuffer" name="chunkPosition"/>
  <class name="jd.plugins.download.RAFDownload"/>
  <field class="jd.plugins.download.RAFDownload" name="writeCount"/>
  <field class="jd.plugins.download.RAFDownload" name="channels"/>
  <field class="jd.plugins.download.RAFDownload" name="outputChannel"/>
  <field class="jd.plugins.download.RAFDownload" name="writeTimer"/>
  <field class="jd.plugins.download.RAFDownload" name="hdWritesPerSecond"/>
  <field class="jd.plugins.download.RAFDownload" name="outputFile"/>
  <field class="jd.plugins.download.RAFDownload" name="partFiles"/>
  <method class="jd.plugins.download.RAFDownload" name="jd.plugins.download.DownloadInterface download(jd.plugins.DownloadLink, jd.http.Request, boolean, int)"/>
  <method class="jd.plugins.download.RAFDownload" name="jd.plugins.download.DownloadInterface download(jd.plugins.DownloadLink, jd.http.Request)"/>
  <method class="jd.plugins.download.RAFDownload" name="void createOutputChannel()"/>
  <method class="jd.plugins.download.RAFDownload" name="boolean writeChunkBytes(jd.plugins.download.DownloadInterface$Chunk)"/>
  <method class="jd.plugins.download.RAFDownload" name="void setupChunks()"/>
  <method class="jd.plugins.download.RAFDownload" name="void setupResume()"/>
  <method class="jd.plugins.download.RAFDownload" name="void setupVirginStart()"/>
  <method class="jd.plugins.download.RAFDownload" name="void onChunksReady()"/>
  <class name="jd.plugins.a.MetaLink"/>
  <method class="jd.plugins.a.MetaLink" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.a.MetaLink" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.a.MetaLink" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <class name="jd.plugins.a.J"/>
  <method class="jd.plugins.a.J" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.a.J" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.a.J" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <class name="jd.plugins.a.ContainerUtilites"/>
  <method class="jd.plugins.a.ContainerUtilites" name="boolean checkJarEntry(java.lang.String, java.lang.String)"/>
  <method class="jd.plugins.a.ContainerUtilites" name="boolean jarValid(java.lang.String)"/>
  <method class="jd.plugins.a.ContainerUtilites" name="boolean checkDigest(java.io.InputStream, java.lang.String)"/>
  <class name="jd.plugins.a.R"/>
  <method class="jd.plugins.a.R" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.a.R" name="java.lang.String[] loadFileContent(java.lang.String)"/>
  <method class="jd.plugins.a.R" name="java.lang.String[] decrypt(java.lang.String)"/>
  <method class="jd.plugins.a.R" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <method class="jd.plugins.a.R" name="java.lang.String getLocalFile(java.io.File)"/>
  <method class="jd.plugins.a.R" name="java.lang.String asHex(byte[])"/>
  <method class="jd.plugins.a.R" name="java.lang.String getCoder()"/>
  <method class="jd.plugins.a.R" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.a.R" name="java.lang.String filterRSDF(java.lang.String)"/>
  <method class="jd.plugins.a.R" name="void getEKey(byte[])"/>
  <field class="jd.plugins.a.D$1" name="this$0"/>
  <method class="jd.plugins.a.D$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <class name="jd.plugins.a.D"/>
  <field class="jd.plugins.a.D" name="b3"/>
  <field class="jd.plugins.a.D" name="kk"/>
  <field class="jd.plugins.a.D" name="d"/>
  <field class="jd.plugins.a.D" name="header"/>
  <method class="jd.plugins.a.D" name="java.util.ArrayList getPackageFiles(jd.plugins.FilePackage, java.util.ArrayList)"/>
  <method class="jd.plugins.a.D" name="java.lang.String dsk(java.lang.String)"/>
  <method class="jd.plugins.a.D" name="byte[] gjdk()"/>
  <method class="jd.plugins.a.D" name="java.lang.String xmltoStr(org.w3c.dom.Document)"/>
  <method class="jd.plugins.a.D" name="void pcx3(org.w3c.dom.Node, java.io.File)"/>
  <method class="jd.plugins.a.D" name="java.lang.String getCoder()"/>
  <method class="jd.plugins.a.D" name="java.util.ArrayList parsePassword(java.lang.String)"/>
  <method class="jd.plugins.a.D" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.a.D" name="java.lang.String d5(java.lang.String, java.lang.String)"/>
  <method class="jd.plugins.a.D" name="java.lang.String createContainerString(java.util.ArrayList)"/>
  <method class="jd.plugins.a.D" name="java.lang.String cs(java.net.URL, java.lang.String)"/>
  <method class="jd.plugins.a.D" name="void pdx1(org.w3c.dom.Node, java.io.File)"/>
  <method class="jd.plugins.a.D" name="void pxs(java.lang.String, java.io.File)"/>
  <method class="jd.plugins.a.D" name="void pdx2(org.w3c.dom.Node, java.io.File)"/>
  <method class="jd.plugins.a.D" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.a.D" name="byte[] rjs(byte[])"/>
  <method class="jd.plugins.a.D" name="java.lang.String fds(java.lang.String)"/>
  <method class="jd.plugins.a.D" name="byte[] gk()"/>
  <method class="jd.plugins.a.D" name="java.lang.String b(java.io.File)"/>
  <method class="jd.plugins.a.D" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <field class="jd.plugins.a.C$1" name="this$0"/>
  <method class="jd.plugins.a.C$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <class name="jd.plugins.a.C"/>
  <method class="jd.plugins.a.C" name="java.util.ArrayList getContainedDownloadlinks()"/>
  <method class="jd.plugins.a.C" name="java.lang.String getCoder()"/>
  <method class="jd.plugins.a.C" name="java.lang.String extractDownloadURL(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.a.C" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.a.C" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.a.C" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <method class="jd.plugins.a.C" name="byte[] getBytesFromFile(java.io.File)"/>
  <method class="jd.plugins.a.C" name="void initContainer(java.lang.String)"/>
  <class name="jd.plugins.pluginUtils.Recaptcha"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="challenge"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="br"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="rcBr"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="form"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="captchaAddress"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="server"/>
  <field class="jd.plugins.pluginUtils.Recaptcha" name="id"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="java.lang.String getServer()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void setForm(jd.parser.html.Form)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="jd.parser.html.Form getForm()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="java.lang.String getCaptchaAddress()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void setServer(java.lang.String)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void setId(java.lang.String)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void setChallenge(java.lang.String)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="java.io.File downloadCaptcha(java.io.File)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="java.lang.String getChallenge()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="jd.http.Browser setCode(java.lang.String)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void setCaptchaAddress(java.lang.String)"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="java.lang.String getId()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void parse()"/>
  <method class="jd.plugins.pluginUtils.Recaptcha" name="void load()"/>
  <class name="jd.plugins.LinkGrabberFilePackageEvent"/>
  <field class="jd.plugins.LinkGrabberFilePackageEvent" name="UPDATE_EVENT"/>
  <field class="jd.plugins.LinkGrabberFilePackageEvent" name="REMOVE_LINK"/>
  <field class="jd.plugins.LinkGrabberFilePackageEvent" name="EMPTY_EVENT"/>
  <field class="jd.plugins.LinkGrabberFilePackageEvent" name="ADD_LINK"/>
  <class name="jd.plugins.LinkGrabberFilePackage"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="downloadDirectory"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="lastenabled"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="broadcaster"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="lastSizeCalc"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="name"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="lastEnabledCount"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="serialVersionUID"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="ignorePackage"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="lastFailCount"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="downloadLinks"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="comment"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="extractAfterDownload"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="hosts"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="useSubDir"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="lastfail"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="password"/>
  <field class="jd.plugins.LinkGrabberFilePackage" name="size"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean isIgnored()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void updateHosts()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void removeOffline()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void removeListener(jd.plugins.LinkGrabberFilePackageListener)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setDownloadLinks(java.util.ArrayList)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.util.ArrayList getLinksListbyStatus(int)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="int countFailedLinks(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void add(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setUseSubDir(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean useSubDir()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="int add(int, jd.plugins.DownloadLink, int)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.lang.String getComment()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setDownloadDirectory(java.lang.String)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean isEmpty()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.util.ArrayList getPasswordAuto()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setName(java.lang.String)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void handle_LinkGrabberFilePackageEvent(jd.plugins.LinkGrabberFilePackageEvent)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.lang.String getPassword()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void addAll(java.util.ArrayList)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setExtractAfterDownload(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="int indexOf(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean contains(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setPassword(java.lang.String)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void clear()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.lang.String getDownloadDirectory()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setIgnore(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void addListener(jd.plugins.LinkGrabberFilePackageListener)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="jd.plugins.DownloadLink remove(int)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="long getDownloadSize(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void setComment(java.lang.String)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void addAllAt(java.util.ArrayList, int)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean isExtractAfterDownload()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.lang.String getName()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="int size()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.lang.String getHoster()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="java.util.ArrayList getDownloadLinks()"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="int countEnabledLinks(boolean)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void keepHostersOnly(java.util.Set)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="boolean remove(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="void remove(java.util.ArrayList)"/>
  <method class="jd.plugins.LinkGrabberFilePackage" name="jd.plugins.DownloadLink get(int)"/>
  <class name="jd.plugins.HosterInfo"/>
  <field class="jd.plugins.HosterInfo" name="freeParalellDownloads"/>
  <field class="jd.plugins.HosterInfo" name="freeResumable"/>
  <field class="jd.plugins.HosterInfo" name="host"/>
  <field class="jd.plugins.HosterInfo" name="freeMaxSpeed"/>
  <field class="jd.plugins.HosterInfo" name="freeChunks"/>
  <field class="jd.plugins.HosterInfo" name="freeMaxWaittime"/>
  <field class="jd.plugins.HosterInfo" name="freeIPBlockWaittime"/>
  <field class="jd.plugins.HosterInfo" name="serialVersionUID"/>
  <method class="jd.plugins.HosterInfo" name="int getFreeChunks()"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeMaxSpeed(int)"/>
  <method class="jd.plugins.HosterInfo" name="long getFreeMaxWaittime()"/>
  <method class="jd.plugins.HosterInfo" name="int getFreeParalellDownloads()"/>
  <method class="jd.plugins.HosterInfo" name="boolean isFreeResumable()"/>
  <method class="jd.plugins.HosterInfo" name="int getFreeMaxSpeed()"/>
  <method class="jd.plugins.HosterInfo" name="int getFreeIPBlockWaittime()"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeChunks(int)"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeIPBlockWaittime(int)"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeResumable(boolean)"/>
  <method class="jd.plugins.HosterInfo" name="java.lang.String getHost()"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeParalellDownloads(int)"/>
  <method class="jd.plugins.HosterInfo" name="void setHost(java.lang.String)"/>
  <method class="jd.plugins.HosterInfo" name="void setFreeMaxWaittime(long)"/>
  <class name="jd.plugins.DownloadLinkEvent"/>
  <field class="jd.plugins.DownloadLinkEvent" name="DISABLED"/>
  <field class="jd.plugins.DownloadLinkEvent" name="UPDATE_LOADING_PROGRESS"/>
  <field class="jd.plugins.DownloadLinkEvent" name="ENABLED"/>
  <field class="jd.plugins.DownloadLinkEvent" name="UPDATE"/>
  <class name="jd.plugins.PluginsC"/>
  <field class="jd.plugins.PluginsC" name="progress"/>
  <field class="jd.plugins.PluginsC" name="STATUS_NOTEXTRACTED"/>
  <field class="jd.plugins.PluginsC" name="k"/>
  <field class="jd.plugins.PluginsC" name="status"/>
  <field class="jd.plugins.PluginsC" name="containerStatus"/>
  <field class="jd.plugins.PluginsC" name="dlU"/>
  <field class="jd.plugins.PluginsC" name="md5"/>
  <field class="jd.plugins.PluginsC" name="CONTAINER"/>
  <field class="jd.plugins.PluginsC" name="CONTAINERLINKS"/>
  <field class="jd.plugins.PluginsC" name="STATUS_ERROR_EXTRACTING"/>
  <field class="jd.plugins.PluginsC" name="cls"/>
  <field class="jd.plugins.PluginsC" name="PLUGINS"/>
  <method class="jd.plugins.PluginsC" name="void initContainer(java.lang.String, byte[])"/>
  <method class="jd.plugins.PluginsC" name="void decryptLinkProtectorLinks()"/>
  <method class="jd.plugins.PluginsC" name="boolean canHandle(java.lang.String)"/>
  <method class="jd.plugins.PluginsC" name="jd.plugins.PluginForHost findHostPlugin(java.lang.String)"/>
  <method class="jd.plugins.PluginsC" name="java.lang.String createContainerString(java.util.ArrayList)"/>
  <method class="jd.plugins.PluginsC" name="jd.plugins.ContainerStatus callDecryption(java.io.File)"/>
  <method class="jd.plugins.PluginsC" name="void doDecryption(java.lang.String)"/>
  <method class="jd.plugins.PluginsC" name="java.util.ArrayList getContainedDownloadlinks()"/>
  <method class="jd.plugins.PluginsC" name="java.lang.String extractDownloadURL(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginsC" name="void initContainer(java.lang.String)"/>
  <method class="jd.plugins.PluginsC" name="java.lang.String[] encrypt(java.lang.String)"/>
  <method class="jd.plugins.PluginsC" name="void checkWorkaround(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginsC" name="java.util.ArrayList createMenuitems()"/>
  <method class="jd.plugins.PluginsC" name="jd.plugins.PluginsC getPlugin(java.lang.String)"/>
  <class name="jd.plugins.Plugin"/>
  <field class="jd.plugins.Plugin" name="config"/>
  <field class="jd.plugins.Plugin" name="logger"/>
  <field class="jd.plugins.Plugin" name="br"/>
  <field class="jd.plugins.Plugin" name="ACCEPT_LANGUAGE"/>
  <field class="jd.plugins.Plugin" name="acceptOnlyURIs"/>
  <field class="jd.plugins.Plugin" name="wrapper"/>
  <method class="jd.plugins.Plugin" name="java.io.File getLocalCaptchaFile(java.lang.String)"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getCoder()"/>
  <method class="jd.plugins.Plugin" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.plugins.Plugin" name="boolean isAcceptOnlyURIs()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getHost()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getPluginID()"/>
  <method class="jd.plugins.Plugin" name="void clean()"/>
  <method class="jd.plugins.Plugin" name="java.util.ArrayList createMenuitems()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getFileNameFromURL(java.net.URL)"/>
  <method class="jd.plugins.Plugin" name="jd.PluginWrapper getWrapper()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String cutMatches(java.lang.String)"/>
  <method class="jd.plugins.Plugin" name="void setAcceptOnlyURIs(boolean)"/>
  <method class="jd.plugins.Plugin" name="void init()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String extractFileNameFromURL(java.lang.String)"/>
  <method class="jd.plugins.Plugin" name="java.io.File getLocalCaptchaFile()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getUserInput(java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getVersion(java.lang.String)"/>
  <method class="jd.plugins.Plugin" name="jd.config.SubConfiguration getPluginConfig()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getUserInput(java.lang.String, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getFileNameFromHeader(jd.http.URLConnectionAdapter)"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getUserInput(java.lang.String, java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.Plugin" name="boolean canHandle(java.lang.String)"/>
  <method class="jd.plugins.Plugin" name="void fireControlEvent(int, java.lang.Object)"/>
  <method class="jd.plugins.Plugin" name="jd.config.ConfigContainer getConfig()"/>
  <method class="jd.plugins.Plugin" name="jd.gui.swing.components.ConvertDialog$ConversionMode showDisplayDialog(java.util.ArrayList, java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.Plugin" name="java.util.regex.Pattern getSupportedLinks()"/>
  <method class="jd.plugins.Plugin" name="java.lang.String getFileNameFromDispositionHeader(java.lang.String)"/>
  <class name="jd.plugins.DownloadLink$AvailableStatus"/>
  <field class="jd.plugins.DownloadLink$AvailableStatus" name="ENUM$VALUES"/>
  <field class="jd.plugins.DownloadLink$AvailableStatus" name="UNCHECKED"/>
  <field class="jd.plugins.DownloadLink$AvailableStatus" name="UNCHECKABLE"/>
  <field class="jd.plugins.DownloadLink$AvailableStatus" name="TRUE"/>
  <field class="jd.plugins.DownloadLink$AvailableStatus" name="FALSE"/>
  <method class="jd.plugins.DownloadLink$AvailableStatus" name="jd.plugins.DownloadLink$AvailableStatus[] values()"/>
  <method class="jd.plugins.DownloadLink$AvailableStatus" name="jd.plugins.DownloadLink$AvailableStatus valueOf(java.lang.String)"/>
  <class name="jd.plugins.DownloadLink"/>
  <field class="jd.plugins.DownloadLink" name="globalSpeedLimit"/>
  <field class="jd.plugins.DownloadLink" name="linkType"/>
  <field class="jd.plugins.DownloadLink" name="LINKTYPE_NORMAL"/>
  <field class="jd.plugins.DownloadLink" name="decrypterPassword"/>
  <field class="jd.plugins.DownloadLink" name="host"/>
  <field class="jd.plugins.DownloadLink" name="pluginProgress"/>
  <field class="jd.plugins.DownloadLink" name="linkStatus"/>
  <field class="jd.plugins.DownloadLink" name="serialVersionUID"/>
  <field class="jd.plugins.DownloadLink" name="finishedDate"/>
  <field class="jd.plugins.DownloadLink" name="sourcePluginPasswordList"/>
  <field class="jd.plugins.DownloadLink" name="pluginForContainer"/>
  <field class="jd.plugins.DownloadLink" name="icon"/>
  <field class="jd.plugins.DownloadLink" name="finalFileName"/>
  <field class="jd.plugins.DownloadLink" name="downloadMax"/>
  <field class="jd.plugins.DownloadLink" name="downloadLinkController"/>
  <field class="jd.plugins.DownloadLink" name="name"/>
  <field class="jd.plugins.DownloadLink" name="LINKTYPE_CONTAINER"/>
  <field class="jd.plugins.DownloadLink" name="containerFile"/>
  <field class="jd.plugins.DownloadLink" name="priority"/>
  <field class="jd.plugins.DownloadLink" name="chunksProgress"/>
  <field class="jd.plugins.DownloadLink" name="filePackage"/>
  <field class="jd.plugins.DownloadLink" name="urlDownload"/>
  <field class="jd.plugins.DownloadLink" name="downloadCurrent"/>
  <field class="jd.plugins.DownloadLink" name="browserurl"/>
  <field class="jd.plugins.DownloadLink" name="mD5Hash"/>
  <field class="jd.plugins.DownloadLink" name="logger"/>
  <field class="jd.plugins.DownloadLink" name="downloadInstance"/>
  <field class="jd.plugins.DownloadLink" name="partnum2"/>
  <field class="jd.plugins.DownloadLink" name="requestTime"/>
  <field class="jd.plugins.DownloadLink" name="sha1Hash"/>
  <field class="jd.plugins.DownloadLink" name="sourcePluginComment"/>
  <field class="jd.plugins.DownloadLink" name="container"/>
  <field class="jd.plugins.DownloadLink" name="isMirror"/>
  <field class="jd.plugins.DownloadLink" name="UNKNOWN_FILE_NAME"/>
  <field class="jd.plugins.DownloadLink" name="broadcaster"/>
  <field class="jd.plugins.DownloadLink" name="created"/>
  <field class="jd.plugins.DownloadLink" name="availableStatus"/>
  <field class="jd.plugins.DownloadLink" name="isEnabled"/>
  <field class="jd.plugins.DownloadLink" name="subdirectory"/>
  <field class="jd.plugins.DownloadLink" name="containerIndex"/>
  <field class="jd.plugins.DownloadLink" name="latestCaptchaFile"/>
  <field class="jd.plugins.DownloadLink" name="plugin"/>
  <field class="jd.plugins.DownloadLink" name="STATIC_OUTPUTFILE"/>
  <field class="jd.plugins.DownloadLink" name="transferstatus"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getFinalFileName()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.PluginForHost getPlugin()"/>
  <method class="jd.plugins.DownloadLink" name="boolean isAvailabilityStatusChecked()"/>
  <method class="jd.plugins.DownloadLink" name="void setPluginProgress(jd.plugins.PluginProgress)"/>
  <method class="jd.plugins.DownloadLink" name="void setDecrypterPassword(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="int getDownloadSpeed()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.PluginProgress getPluginProgress()"/>
  <method class="jd.plugins.DownloadLink" name="void setPart(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="void addSubdirectory(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getFileOutput()"/>
  <method class="jd.plugins.DownloadLink" name="void setDownloadInstance(jd.plugins.download.DownloadInterface)"/>
  <method class="jd.plugins.DownloadLink" name="void addSourcePluginPasswords(java.lang.String[])"/>
  <method class="jd.plugins.DownloadLink" name="void setSubdirectory(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.DownloadLink" name="void setSha1Hash(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="int compareTo(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.DownloadLink" name="void setAborted(boolean)"/>
  <method class="jd.plugins.DownloadLink" name="void addSourcePluginPasswordList(java.util.ArrayList)"/>
  <method class="jd.plugins.DownloadLink" name="void setAvailable(boolean)"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.PluginsC getPluginForContainer()"/>
  <method class="jd.plugins.DownloadLink" name="void setMirror(boolean)"/>
  <method class="jd.plugins.DownloadLink" name="void setChunksProgress(long[])"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.LinkStatus getLinkStatus()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getDownloadURL()"/>
  <method class="jd.plugins.DownloadLink" name="int getPriority()"/>
  <method class="jd.plugins.DownloadLink" name="boolean gotBrowserUrl()"/>
  <method class="jd.plugins.DownloadLink" name="long[] getChunksProgress()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getSubdirectory()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getName()"/>
  <method class="jd.plugins.DownloadLink" name="boolean isLimited()"/>
  <method class="jd.plugins.DownloadLink" name="void setSpeedLimit(int)"/>
  <method class="jd.plugins.DownloadLink" name="void setRequestTime(long)"/>
  <method class="jd.plugins.DownloadLink" name="javax.swing.ImageIcon getUnscaledIcon()"/>
  <method class="jd.plugins.DownloadLink" name="void setContainerIndex(int)"/>
  <method class="jd.plugins.DownloadLink" name="void setCreated(long)"/>
  <method class="jd.plugins.DownloadLink" name="long getFinishedDate()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getFileInfomationString()"/>
  <method class="jd.plugins.DownloadLink" name="void setName(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="int getLinkType()"/>
  <method class="jd.plugins.DownloadLink" name="boolean isEnabled()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getSourcePluginComment()"/>
  <method class="jd.plugins.DownloadLink" name="void setFinishedDate(long)"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.DownloadLink$AvailableStatus getAvailableStatus()"/>
  <method class="jd.plugins.DownloadLink" name="long getRequestTime()"/>
  <method class="jd.plugins.DownloadLink" name="void setLinkType(int)"/>
  <method class="jd.plugins.DownloadLink" name="java.util.Set getHosterList(java.util.ArrayList)"/>
  <method class="jd.plugins.DownloadLink" name="void setFilePackage(jd.plugins.FilePackage)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getBrowserUrl()"/>
  <method class="jd.plugins.DownloadLink" name="void setUrlDownload(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="void setEnabled(boolean)"/>
  <method class="jd.plugins.DownloadLink" name="void setDownloadLinkController(jd.controlling.SingleDownloadController)"/>
  <method class="jd.plugins.DownloadLink" name="jd.controlling.SingleDownloadController getDownloadLinkController()"/>
  <method class="jd.plugins.DownloadLink" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getDecrypterPassword()"/>
  <method class="jd.plugins.DownloadLink" name="int getPercent()"/>
  <method class="jd.plugins.DownloadLink" name="boolean isMirror()"/>
  <method class="jd.plugins.DownloadLink" name="java.util.ArrayList getSourcePluginPasswordList()"/>
  <method class="jd.plugins.DownloadLink" name="boolean isAborted()"/>
  <method class="jd.plugins.DownloadLink" name="void setAvailableStatus(jd.plugins.DownloadLink$AvailableStatus)"/>
  <method class="jd.plugins.DownloadLink" name="void requestGuiUpdate()"/>
  <method class="jd.plugins.DownloadLink" name="long getDownloadCurrent()"/>
  <method class="jd.plugins.DownloadLink" name="long getCreated()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getContainerFile()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.TransferStatus getTransferStatus()"/>
  <method class="jd.plugins.DownloadLink" name="int compareTo(java.lang.Object)"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.DownloadLink addSourcePluginPassword(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getPart()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.DownloadLink setSourcePluginPasswordList(java.util.ArrayList)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getMD5Hash()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.DownloadLink setSourcePluginComment(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="long getDownloadSize()"/>
  <method class="jd.plugins.DownloadLink" name="void setIcon(javax.swing.ImageIcon)"/>
  <method class="jd.plugins.DownloadLink" name="int getContainerIndex()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getHost()"/>
  <method class="jd.plugins.DownloadLink" name="void setBrowserUrl(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="void reset()"/>
  <method class="jd.plugins.DownloadLink" name="void setDownloadCurrent(long)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getSha1Hash()"/>
  <method class="jd.plugins.DownloadLink" name="void setContainerFile(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="int getSpeedLimit()"/>
  <method class="jd.plugins.DownloadLink" name="void setMD5Hash(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="java.io.File getLatestCaptchaFile()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.FilePackage getFilePackage()"/>
  <method class="jd.plugins.DownloadLink" name="void setDownloadSize(long)"/>
  <method class="jd.plugins.DownloadLink" name="void setLatestCaptchaFile(java.io.File)"/>
  <method class="jd.plugins.DownloadLink" name="void setLoadedPluginForContainer(jd.plugins.PluginsC)"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String toString()"/>
  <method class="jd.plugins.DownloadLink" name="void deleteFile()"/>
  <method class="jd.plugins.DownloadLink" name="void setFinalFileName(java.lang.String)"/>
  <method class="jd.plugins.DownloadLink" name="boolean isAvailable()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getContainer()"/>
  <method class="jd.plugins.DownloadLink" name="java.lang.String getFileOutput0()"/>
  <method class="jd.plugins.DownloadLink" name="jd.plugins.download.DownloadInterface getDownloadInstance()"/>
  <method class="jd.plugins.DownloadLink" name="javax.swing.ImageIcon getIcon()"/>
  <method class="jd.plugins.DownloadLink" name="void setLoadedPlugin(jd.plugins.PluginForHost)"/>
  <method class="jd.plugins.DownloadLink" name="void setPriority(int)"/>
  <class name="jd.plugins.CryptedLink"/>
  <field class="jd.plugins.CryptedLink" name="decrypterPassword"/>
  <field class="jd.plugins.CryptedLink" name="progress"/>
  <field class="jd.plugins.CryptedLink" name="cryptedUrl"/>
  <field class="jd.plugins.CryptedLink" name="serialVersionUID"/>
  <method class="jd.plugins.CryptedLink" name="java.lang.String getDecrypterPassword()"/>
  <method class="jd.plugins.CryptedLink" name="void setProgressController(jd.controlling.ProgressController)"/>
  <method class="jd.plugins.CryptedLink" name="void setCryptedUrl(java.lang.String)"/>
  <method class="jd.plugins.CryptedLink" name="java.lang.String toString()"/>
  <method class="jd.plugins.CryptedLink" name="java.lang.String getCryptedUrl()"/>
  <method class="jd.plugins.CryptedLink" name="void setDecrypterPassword(java.lang.String)"/>
  <method class="jd.plugins.CryptedLink" name="jd.controlling.ProgressController getProgressController()"/>
  <class name="jd.plugins.FilePackageEvent"/>
  <field class="jd.plugins.FilePackageEvent" name="DOWNLOADLINK_REMOVED"/>
  <field class="jd.plugins.FilePackageEvent" name="DOWNLOADLINK_ADDED"/>
  <field class="jd.plugins.FilePackageEvent" name="FILEPACKAGE_EMPTY"/>
  <field class="jd.plugins.FilePackageEvent" name="FILEPACKAGE_UPDATE"/>
  <class name="jd.plugins.DownloadLinkBroadcaster"/>
  <method class="jd.plugins.DownloadLinkBroadcaster" name="void fireEvent(jd.plugins.DownloadLinkListener, jd.plugins.DownloadLinkEvent)"/>
  <method class="jd.plugins.DownloadLinkBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.plugins.PluginUtils"/>
  <method class="jd.plugins.PluginUtils" name="void informPasswordWrong(jd.plugins.Plugin, java.lang.String)"/>
  <method class="jd.plugins.PluginUtils" name="void evalJSPacker(jd.http.Browser)"/>
  <method class="jd.plugins.PluginUtils" name="java.lang.String askPassword(jd.plugins.Plugin)"/>
  <class name="jd.plugins.ContainerStatus"/>
  <field class="jd.plugins.ContainerStatus" name="latestStatus"/>
  <field class="jd.plugins.ContainerStatus" name="status"/>
  <field class="jd.plugins.ContainerStatus" name="container"/>
  <field class="jd.plugins.ContainerStatus" name="STATUS_FINISHED"/>
  <field class="jd.plugins.ContainerStatus" name="STATUS_FAILED"/>
  <field class="jd.plugins.ContainerStatus" name="TODO"/>
  <field class="jd.plugins.ContainerStatus" name="statusText"/>
  <method class="jd.plugins.ContainerStatus" name="void setStatus(int)"/>
  <method class="jd.plugins.ContainerStatus" name="java.lang.String getStatusText()"/>
  <method class="jd.plugins.ContainerStatus" name="java.io.File getContainer()"/>
  <method class="jd.plugins.ContainerStatus" name="void addStatus(int)"/>
  <method class="jd.plugins.ContainerStatus" name="void setStatusText(java.lang.String)"/>
  <method class="jd.plugins.ContainerStatus" name="void removeStatus(int)"/>
  <method class="jd.plugins.ContainerStatus" name="boolean hasStatus(int)"/>
  <method class="jd.plugins.ContainerStatus" name="java.lang.String toString()"/>
  <method class="jd.plugins.ContainerStatus" name="boolean isStatus(int)"/>
  <class name="jd.plugins.FilePackageListener"/>
  <method class="jd.plugins.FilePackageListener" name="void onFilePackageEvent(jd.plugins.FilePackageEvent)"/>
  <class name="jd.plugins.HostPlugin"/>
  <field class="jd.plugins.HostPlugin" name="INTERFACE_VERSION"/>
  <method class="jd.plugins.HostPlugin" name="int interfaceVersion()"/>
  <method class="jd.plugins.HostPlugin" name="java.lang.String[] urls()"/>
  <method class="jd.plugins.HostPlugin" name="java.lang.String revision()"/>
  <method class="jd.plugins.HostPlugin" name="int[] flags()"/>
  <method class="jd.plugins.HostPlugin" name="java.lang.String[] names()"/>
  <class name="jd.plugins.PluginForHost"/>
  <field class="jd.plugins.PluginForHost" name="LAST_CONNECTION_TIME"/>
  <field class="jd.plugins.PluginForHost" name="premiumurl"/>
  <field class="jd.plugins.PluginForHost" name="PARAM_MAX_RETRIES"/>
  <field class="jd.plugins.PluginForHost" name="hosterIcon"/>
  <field class="jd.plugins.PluginForHost" name="enablePremium"/>
  <field class="jd.plugins.PluginForHost" name="maxConnections"/>
  <field class="jd.plugins.PluginForHost" name="WAIT_BETWEEN_STARTS"/>
  <field class="jd.plugins.PluginForHost" name="currentConnections"/>
  <field class="jd.plugins.PluginForHost" name="dl"/>
  <field class="jd.plugins.PluginForHost" name="LAST_STARTED_TIME"/>
  <field class="jd.plugins.PluginForHost" name="premiumAction"/>
  <field class="jd.plugins.PluginForHost" name="accountWithoutUsername"/>
  <field class="jd.plugins.PluginForHost" name="CONFIGNAME"/>
  <field class="jd.plugins.PluginForHost" name="AGB_CHECKED"/>
  <method class="jd.plugins.PluginForHost" name="int getMaxConnections()"/>
  <method class="jd.plugins.PluginForHost" name="int getCurrentConnections()"/>
  <method class="jd.plugins.PluginForHost" name="long getLastConnectionTime()"/>
  <method class="jd.plugins.PluginForHost" name="void resetPluginGlobals()"/>
  <method class="jd.plugins.PluginForHost" name="void resetDownloadlink(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getCaptchaCode(java.io.File, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="void putLastTimeStarted(long)"/>
  <method class="jd.plugins.PluginForHost" name="int getTimegapBetweenConnections()"/>
  <method class="jd.plugins.PluginForHost" name="void setStartIntervall(long)"/>
  <method class="jd.plugins.PluginForHost" name="javax.swing.ImageIcon initHosterIcon()"/>
  <method class="jd.plugins.PluginForHost" name="jd.plugins.AccountInfo fetchAccountInfo(jd.plugins.Account)"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getCaptchaCode(java.lang.String, java.io.File, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="boolean isAborted(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="jd.plugins.DownloadLink$AvailableStatus requestFileInformation(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="boolean isPremiumEnabled()"/>
  <method class="jd.plugins.PluginForHost" name="java.awt.Image createDefaultIcon()"/>
  <method class="jd.plugins.PluginForHost" name="boolean checkLinks(jd.plugins.DownloadLink[])"/>
  <method class="jd.plugins.PluginForHost" name="void handleFree(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="long getLastTimeStarted()"/>
  <method class="jd.plugins.PluginForHost" name="void enablePremium(java.lang.String)"/>
  <method class="jd.plugins.PluginForHost" name="jd.http.Browser getBrowser()"/>
  <method class="jd.plugins.PluginForHost" name="void setMaxConnections(int)"/>
  <method class="jd.plugins.PluginForHost" name="int getMaxRetries()"/>
  <method class="jd.plugins.PluginForHost" name="void setAccountwithoutUsername(boolean)"/>
  <method class="jd.plugins.PluginForHost" name="void enablePremium()"/>
  <method class="jd.plugins.PluginForHost" name="int waitForFreeConnection(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="java.util.ArrayList getPremiumAccounts()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getFileInformationString(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="javax.swing.ImageIcon getHosterIcon()"/>
  <method class="jd.plugins.PluginForHost" name="void handle(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getSessionInfo()"/>
  <method class="jd.plugins.PluginForHost" name="void setDownloadInterface(jd.plugins.download.DownloadInterface)"/>
  <method class="jd.plugins.PluginForHost" name="void reset()"/>
  <method class="jd.plugins.PluginForHost" name="java.util.ArrayList createMenuitems()"/>
  <method class="jd.plugins.PluginForHost" name="void sleep(long, jd.plugins.DownloadLink, java.lang.String)"/>
  <method class="jd.plugins.PluginForHost" name="int getMaxSimultanPremiumDownloadNum()"/>
  <method class="jd.plugins.PluginForHost" name="void handlePremium(jd.plugins.DownloadLink, jd.plugins.Account)"/>
  <method class="jd.plugins.PluginForHost" name="boolean waitForNextConnectionAllowed()"/>
  <method class="jd.plugins.PluginForHost" name="boolean waitForNextStartAllowed(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="jd.plugins.HosterInfo getHosterInfo()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getBuyPremiumUrl()"/>
  <method class="jd.plugins.PluginForHost" name="void correctDownloadLink(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getCaptchaCode(java.lang.String, java.io.File, int, jd.plugins.DownloadLink, java.lang.String, java.lang.String)"/>
  <method class="jd.plugins.PluginForHost" name="boolean hasHosterIcon()"/>
  <method class="jd.plugins.PluginForHost" name="void sleep(long, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="void setAGBChecked(boolean)"/>
  <method class="jd.plugins.PluginForHost" name="int getMaxSimultanDownloadNum()"/>
  <method class="jd.plugins.PluginForHost" name="boolean isAGBChecked()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getCaptchaCode(java.lang.String, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="boolean isPremiumDownload()"/>
  <method class="jd.plugins.PluginForHost" name="int getFreeConnections()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getCaptchaCode(java.lang.String, java.lang.String, jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.PluginForHost" name="void clean()"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String getAGBLink()"/>
  <method class="jd.plugins.PluginForHost" name="void putLastConnectionTime(long)"/>
  <method class="jd.plugins.PluginForHost" name="void setBrowserExclusive()"/>
  <method class="jd.plugins.PluginForHost" name="void setCurrentConnections(int)"/>
  <method class="jd.plugins.PluginForHost" name="java.util.ArrayList getDownloadLinks(java.lang.String, jd.plugins.FilePackage)"/>
  <method class="jd.plugins.PluginForHost" name="java.lang.String cleanString(java.lang.String)"/>
  <method class="jd.plugins.PluginForHost" name="boolean getAccountwithoutUsername()"/>
  <method class="jd.plugins.PluginForHost" name="int getMaxSimultanFreeDownloadNum()"/>
  <class name="jd.plugins.DownloadLinkListener"/>
  <method class="jd.plugins.DownloadLinkListener" name="void onDownloadLinkEvent(jd.plugins.DownloadLinkEvent)"/>
  <class name="jd.plugins.TransferStatus"/>
  <field class="jd.plugins.TransferStatus" name="usespremium"/>
  <field class="jd.plugins.TransferStatus" name="supportspremium"/>
  <field class="jd.plugins.TransferStatus" name="supportsresume"/>
  <field class="jd.plugins.TransferStatus" name="serialVersionUID"/>
  <method class="jd.plugins.TransferStatus" name="boolean supportsPremium()"/>
  <method class="jd.plugins.TransferStatus" name="boolean supportsResume()"/>
  <method class="jd.plugins.TransferStatus" name="void setPremiumSupport(boolean)"/>
  <method class="jd.plugins.TransferStatus" name="void setResumeSupport(boolean)"/>
  <method class="jd.plugins.TransferStatus" name="void usePremium(boolean)"/>
  <method class="jd.plugins.TransferStatus" name="boolean usesPremium()"/>
  <class name="jd.plugins.AccountInfo"/>
  <field class="jd.plugins.AccountInfo" name="account_accountBalance"/>
  <field class="jd.plugins.AccountInfo" name="account_premiumPoints"/>
  <field class="jd.plugins.AccountInfo" name="account_status"/>
  <field class="jd.plugins.AccountInfo" name="serialVersionUID"/>
  <field class="jd.plugins.AccountInfo" name="account_validUntil"/>
  <field class="jd.plugins.AccountInfo" name="account_expired"/>
  <field class="jd.plugins.AccountInfo" name="account_trafficLeft"/>
  <field class="jd.plugins.AccountInfo" name="specialTraffic"/>
  <field class="jd.plugins.AccountInfo" name="account_filesNum"/>
  <field class="jd.plugins.AccountInfo" name="account_trafficShareLeft"/>
  <field class="jd.plugins.AccountInfo" name="account_createTime"/>
  <field class="jd.plugins.AccountInfo" name="account_trafficMax"/>
  <field class="jd.plugins.AccountInfo" name="account_usedSpace"/>
  <field class="jd.plugins.AccountInfo" name="unlimitedTraffic"/>
  <method class="jd.plugins.AccountInfo" name="void setValidUntil(long)"/>
  <method class="jd.plugins.AccountInfo" name="void setCreateTime(long)"/>
  <method class="jd.plugins.AccountInfo" name="boolean isExpired()"/>
  <method class="jd.plugins.AccountInfo" name="long getFilesNum()"/>
  <method class="jd.plugins.AccountInfo" name="java.lang.String getStatus()"/>
  <method class="jd.plugins.AccountInfo" name="long getUsedSpace()"/>
  <method class="jd.plugins.AccountInfo" name="void setExpired(boolean)"/>
  <method class="jd.plugins.AccountInfo" name="long getCreateTime()"/>
  <method class="jd.plugins.AccountInfo" name="boolean isUnlimitedTraffic()"/>
  <method class="jd.plugins.AccountInfo" name="void setTrafficLeft(long)"/>
  <method class="jd.plugins.AccountInfo" name="long getTrafficLeft()"/>
  <method class="jd.plugins.AccountInfo" name="void setPremiumPoints(java.lang.String)"/>
  <method class="jd.plugins.AccountInfo" name="void setPremiumPoints(long)"/>
  <method class="jd.plugins.AccountInfo" name="long getValidUntil()"/>
  <method class="jd.plugins.AccountInfo" name="void setTrafficLeft(java.lang.String)"/>
  <method class="jd.plugins.AccountInfo" name="void setAccountBalance(long)"/>
  <method class="jd.plugins.AccountInfo" name="void setTrafficMax(long)"/>
  <method class="jd.plugins.AccountInfo" name="void setSpecialTraffic(boolean)"/>
  <method class="jd.plugins.AccountInfo" name="boolean isSpecialTraffic()"/>
  <method class="jd.plugins.AccountInfo" name="void setUsedSpace(long)"/>
  <method class="jd.plugins.AccountInfo" name="void setAccountBalance(java.lang.String)"/>
  <method class="jd.plugins.AccountInfo" name="void setUsedSpace(java.lang.String)"/>
  <method class="jd.plugins.AccountInfo" name="void validUntilCheck()"/>
  <method class="jd.plugins.AccountInfo" name="long getTrafficMax()"/>
  <method class="jd.plugins.AccountInfo" name="void setFilesNum(long)"/>
  <method class="jd.plugins.AccountInfo" name="long getTrafficShareLeft()"/>
  <method class="jd.plugins.AccountInfo" name="void setUnlimitedTraffic()"/>
  <method class="jd.plugins.AccountInfo" name="void setTrafficShareLeft(long)"/>
  <method class="jd.plugins.AccountInfo" name="void setStatus(java.lang.String)"/>
  <method class="jd.plugins.AccountInfo" name="long getPremiumPoints()"/>
  <method class="jd.plugins.AccountInfo" name="long getAccountBalance()"/>
  <class name="jd.plugins.PluginException"/>
  <field class="jd.plugins.PluginException" name="linkStatus"/>
  <field class="jd.plugins.PluginException" name="errorMessage"/>
  <field class="jd.plugins.PluginException" name="VALUE_ID_PREMIUM_TEMP_DISABLE"/>
  <field class="jd.plugins.PluginException" name="VALUE_ID_PREMIUM_DISABLE"/>
  <field class="jd.plugins.PluginException" name="value"/>
  <field class="jd.plugins.PluginException" name="serialVersionUID"/>
  <method class="jd.plugins.PluginException" name="long getValue()"/>
  <method class="jd.plugins.PluginException" name="void setErrorMessage(java.lang.String)"/>
  <method class="jd.plugins.PluginException" name="void setValue(long)"/>
  <method class="jd.plugins.PluginException" name="java.lang.String getErrorMessage()"/>
  <method class="jd.plugins.PluginException" name="void fillLinkStatus(jd.plugins.LinkStatus)"/>
  <class name="jd.plugins.OptionalPlugin"/>
  <method class="jd.plugins.OptionalPlugin" name="int interfaceversion()"/>
  <method class="jd.plugins.OptionalPlugin" name="boolean linux()"/>
  <method class="jd.plugins.OptionalPlugin" name="double minJVM()"/>
  <method class="jd.plugins.OptionalPlugin" name="boolean hasGui()"/>
  <method class="jd.plugins.OptionalPlugin" name="boolean mac()"/>
  <method class="jd.plugins.OptionalPlugin" name="java.lang.String rev()"/>
  <method class="jd.plugins.OptionalPlugin" name="java.lang.String id()"/>
  <method class="jd.plugins.OptionalPlugin" name="boolean windows()"/>
  <method class="jd.plugins.OptionalPlugin" name="boolean defaultEnabled()"/>
  <class name="jd.plugins.DecrypterPlugin"/>
  <field class="jd.plugins.DecrypterPlugin" name="INTERFACE_VERSION"/>
  <method class="jd.plugins.DecrypterPlugin" name="int interfaceVersion()"/>
  <method class="jd.plugins.DecrypterPlugin" name="java.lang.String[] urls()"/>
  <method class="jd.plugins.DecrypterPlugin" name="java.lang.String revision()"/>
  <method class="jd.plugins.DecrypterPlugin" name="int[] flags()"/>
  <method class="jd.plugins.DecrypterPlugin" name="java.lang.String[] names()"/>
  <class name="jd.plugins.Account"/>
  <field class="jd.plugins.Account" name="valid"/>
  <field class="jd.plugins.Account" name="tmpDisabledIntervalv3"/>
  <field class="jd.plugins.Account" name="updatetime"/>
  <field class="jd.plugins.Account" name="serialVersionUID"/>
  <field class="jd.plugins.Account" name="hoster"/>
  <field class="jd.plugins.Account" name="user"/>
  <field class="jd.plugins.Account" name="tmpDisabledTime"/>
  <field class="jd.plugins.Account" name="tempDisabled"/>
  <field class="jd.plugins.Account" name="accinfo"/>
  <field class="jd.plugins.Account" name="enabled"/>
  <field class="jd.plugins.Account" name="pass"/>
  <method class="jd.plugins.Account" name="void setUser(java.lang.String)"/>
  <method class="jd.plugins.Account" name="boolean isValid()"/>
  <method class="jd.plugins.Account" name="void setAccountInfo(jd.plugins.AccountInfo)"/>
  <method class="jd.plugins.Account" name="java.lang.String getUser()"/>
  <method class="jd.plugins.Account" name="java.lang.String toString()"/>
  <method class="jd.plugins.Account" name="boolean isEnabled()"/>
  <method class="jd.plugins.Account" name="java.lang.String getHoster()"/>
  <method class="jd.plugins.Account" name="void readObject(java.io.ObjectInputStream)"/>
  <method class="jd.plugins.Account" name="java.lang.String getPass()"/>
  <method class="jd.plugins.Account" name="boolean isTempDisabled()"/>
  <method class="jd.plugins.Account" name="void setUpdateTime(long)"/>
  <method class="jd.plugins.Account" name="jd.plugins.AccountInfo getAccountInfo()"/>
  <method class="jd.plugins.Account" name="boolean equals(jd.plugins.Account)"/>
  <method class="jd.plugins.Account" name="void setEnabled(boolean)"/>
  <method class="jd.plugins.Account" name="void setTmpDisabledIntervalv3(long)"/>
  <method class="jd.plugins.Account" name="void setHoster(java.lang.String)"/>
  <method class="jd.plugins.Account" name="void setPass(java.lang.String)"/>
  <method class="jd.plugins.Account" name="long getTmpDisabledIntervalv3()"/>
  <method class="jd.plugins.Account" name="void setValid(boolean)"/>
  <method class="jd.plugins.Account" name="void setTempDisabled(boolean)"/>
  <method class="jd.plugins.Account" name="long lastUpdateTime()"/>
  <class name="jd.plugins.LinkStatus"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_NO_CONNECTION"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_DOWNLOAD_FAILED"/>
  <field class="jd.plugins.LinkStatus" name="retryCount"/>
  <field class="jd.plugins.LinkStatus" name="totalWaitTime"/>
  <field class="jd.plugins.LinkStatus" name="serialVersionUID"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_ALREADYEXISTS"/>
  <field class="jd.plugins.LinkStatus" name="VALUE_FAILED_CHUNK"/>
  <field class="jd.plugins.LinkStatus" name="PLUGIN_IN_PROGRESS"/>
  <field class="jd.plugins.LinkStatus" name="statusIcon"/>
  <field class="jd.plugins.LinkStatus" name="errorMessage"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_TEMPORARILY_UNAVAILABLE"/>
  <field class="jd.plugins.LinkStatus" name="VALUE_ID_PREMIUM_TEMP_DISABLE"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_LINK_IN_PROGRESS"/>
  <field class="jd.plugins.LinkStatus" name="TODO"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_FATAL"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_IP_BLOCKED"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_AGB_NOT_SIGNED"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_PREMIUM"/>
  <field class="jd.plugins.LinkStatus" name="downloadLink"/>
  <field class="jd.plugins.LinkStatus" name="DOWNLOADINTERFACE_IN_PROGRESS"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_HOSTER_TEMPORARILY_UNAVAILABLE"/>
  <field class="jd.plugins.LinkStatus" name="FINISHED"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_LOCAL_IO"/>
  <field class="jd.plugins.LinkStatus" name="waitUntil"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_CAPTCHA"/>
  <field class="jd.plugins.LinkStatus" name="statusText"/>
  <field class="jd.plugins.LinkStatus" name="WAITING_USERIO"/>
  <field class="jd.plugins.LinkStatus" name="status"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_PLUGIN_DEFEKT"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_PLUGIN_NEEDED"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_FILE_NOT_FOUND"/>
  <field class="jd.plugins.LinkStatus" name="lastestStatus"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_DOWNLOAD_INCOMPLETE"/>
  <field class="jd.plugins.LinkStatus" name="value"/>
  <field class="jd.plugins.LinkStatus" name="PLUGIN_ACTIVE"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_TIMEOUT_REACHED"/>
  <field class="jd.plugins.LinkStatus" name="VALUE_FAILED_HASH"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_POST_PROCESS"/>
  <field class="jd.plugins.LinkStatus" name="VALUE_ID_PREMIUM_DISABLE"/>
  <field class="jd.plugins.LinkStatus" name="ERROR_RETRY"/>
  <method class="jd.plugins.LinkStatus" name="void setStatusText(java.lang.String)"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String toString(int)"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String getErrorMessage()"/>
  <method class="jd.plugins.LinkStatus" name="long getRemainingWaittime()"/>
  <method class="jd.plugins.LinkStatus" name="javax.swing.ImageIcon getStatusIcon()"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String getStatusString()"/>
  <method class="jd.plugins.LinkStatus" name="void exceptionToErrorMessage(java.lang.Exception)"/>
  <method class="jd.plugins.LinkStatus" name="boolean isPluginActive()"/>
  <method class="jd.plugins.LinkStatus" name="void setErrorMessage(java.lang.String)"/>
  <method class="jd.plugins.LinkStatus" name="boolean hasOnlyStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String getDefaultErrorMessage()"/>
  <method class="jd.plugins.LinkStatus" name="boolean isFinished()"/>
  <method class="jd.plugins.LinkStatus" name="int getLatestStatus()"/>
  <method class="jd.plugins.LinkStatus" name="void removeStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="boolean hasStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String getLongErrorMessage()"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String toString()"/>
  <method class="jd.plugins.LinkStatus" name="void setLatestStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="void resetStatus(int[])"/>
  <method class="jd.plugins.LinkStatus" name="void resetWaitTime()"/>
  <method class="jd.plugins.LinkStatus" name="void reset()"/>
  <method class="jd.plugins.LinkStatus" name="void setInProgress(boolean)"/>
  <method class="jd.plugins.LinkStatus" name="boolean isFailed()"/>
  <method class="jd.plugins.LinkStatus" name="int getStatus()"/>
  <method class="jd.plugins.LinkStatus" name="void addStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="void setActive(boolean)"/>
  <method class="jd.plugins.LinkStatus" name="long getTotalWaitTime()"/>
  <method class="jd.plugins.LinkStatus" name="boolean isPluginInProgress()"/>
  <method class="jd.plugins.LinkStatus" name="long getValue()"/>
  <method class="jd.plugins.LinkStatus" name="int getRetryCount()"/>
  <method class="jd.plugins.LinkStatus" name="void setWaitTime(long)"/>
  <method class="jd.plugins.LinkStatus" name="void setStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="void setStatusIcon(javax.swing.ImageIcon)"/>
  <method class="jd.plugins.LinkStatus" name="java.lang.String getStatusText()"/>
  <method class="jd.plugins.LinkStatus" name="boolean isStatus(int)"/>
  <method class="jd.plugins.LinkStatus" name="void setRetryCount(int)"/>
  <method class="jd.plugins.LinkStatus" name="void setValue(long)"/>
  <class name="jd.plugins.LinkGrabberFilePackageBroadcaster"/>
  <method class="jd.plugins.LinkGrabberFilePackageBroadcaster" name="void fireEvent(jd.plugins.LinkGrabberFilePackageListener, jd.plugins.LinkGrabberFilePackageEvent)"/>
  <method class="jd.plugins.LinkGrabberFilePackageBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.plugins.PluginProgress"/>
  <field class="jd.plugins.PluginProgress" name="color"/>
  <field class="jd.plugins.PluginProgress" name="total"/>
  <field class="jd.plugins.PluginProgress" name="current"/>
  <method class="jd.plugins.PluginProgress" name="void setTotal(long)"/>
  <method class="jd.plugins.PluginProgress" name="void setColor(java.awt.Color)"/>
  <method class="jd.plugins.PluginProgress" name="double getPercent()"/>
  <method class="jd.plugins.PluginProgress" name="long getTotal()"/>
  <method class="jd.plugins.PluginProgress" name="void setCurrent(long)"/>
  <method class="jd.plugins.PluginProgress" name="long getCurrent()"/>
  <method class="jd.plugins.PluginProgress" name="java.awt.Color getColor()"/>
  <field class="jd.plugins.PluginForDecrypt$1DThread" name="this$0"/>
  <field class="jd.plugins.PluginForDecrypt$1DThread" name="plg"/>
  <field class="jd.plugins.PluginForDecrypt$1DThread" name="decryptableLink"/>
  <field class="jd.plugins.PluginForDecrypt$1DThread" name="val$decryptedLinks"/>
  <method class="jd.plugins.PluginForDecrypt$1DThread" name="void run()"/>
  <method class="jd.plugins.PluginForDecrypt$1DThread" name="void go()"/>
  <class name="jd.plugins.PluginForDecrypt"/>
  <field class="jd.plugins.PluginForDecrypt" name="WAIT_BETWEEN_STARTS"/>
  <field class="jd.plugins.PluginForDecrypt" name="LAST_STARTED_TIME"/>
  <field class="jd.plugins.PluginForDecrypt" name="curcryptedLink"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.util.ArrayList createMenuitems()"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(java.io.File, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="void setStartIntervall(long)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(java.lang.String, java.io.File, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(java.lang.String, java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="jd.plugins.CryptedLink[] getDecryptableLinks(java.lang.String)"/>
  <method class="jd.plugins.PluginForDecrypt" name="void sleep(long, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="void putLastTimeStarted(long)"/>
  <method class="jd.plugins.PluginForDecrypt" name="boolean waitForNextStartAllowed(jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(java.lang.String, java.io.File, int, jd.plugins.CryptedLink, java.lang.String, java.lang.String)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(jd.captcha.easy.load.LoadImage, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.util.ArrayList decryptLinks(jd.plugins.CryptedLink[])"/>
  <method class="jd.plugins.PluginForDecrypt" name="jd.plugins.DownloadLink createDownloadlink(java.lang.String)"/>
  <method class="jd.plugins.PluginForDecrypt" name="void setBrowserExclusive()"/>
  <method class="jd.plugins.PluginForDecrypt" name="long getLastTimeStarted()"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getCaptchaCode(java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.lang.String getLinkName()"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.util.ArrayList decryptLink(jd.plugins.CryptedLink)"/>
  <method class="jd.plugins.PluginForDecrypt" name="java.util.ArrayList decryptIt(jd.plugins.CryptedLink, jd.controlling.ProgressController)"/>
  <class name="jd.plugins.BrowserAdapter"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, jd.parser.html.Form, boolean, int)"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, java.lang.String)"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, java.lang.String, boolean, int)"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, java.lang.String, java.lang.String, boolean, int)"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, java.lang.String, java.lang.String)"/>
  <method class="jd.plugins.BrowserAdapter" name="jd.plugins.download.DownloadInterface openDownload(jd.http.Browser, jd.plugins.DownloadLink, jd.parser.html.Form)"/>
  <class name="jd.plugins.PluginOptional"/>
  <field class="jd.plugins.PluginOptional" name="ADDON_INTERFACE_VERSION"/>
  <method class="jd.plugins.PluginOptional" name="java.lang.String getVersion()"/>
  <method class="jd.plugins.PluginOptional" name="java.lang.String getID()"/>
  <method class="jd.plugins.PluginOptional" name="java.util.regex.Pattern getSupportedLinks()"/>
  <method class="jd.plugins.PluginOptional" name="java.lang.String getIconKey()"/>
  <method class="jd.plugins.PluginOptional" name="void setGuiEnable(boolean)"/>
  <method class="jd.plugins.PluginOptional" name="void controlEvent(jd.event.ControlEvent)"/>
  <method class="jd.plugins.PluginOptional" name="java.lang.String getHost()"/>
  <method class="jd.plugins.PluginOptional" name="java.lang.Object interact(java.lang.String, java.lang.Object)"/>
  <method class="jd.plugins.PluginOptional" name="boolean initAddon()"/>
  <method class="jd.plugins.PluginOptional" name="void onExit()"/>
  <field class="jd.plugins.FilePackage$1" name="this$0"/>
  <field class="jd.plugins.FilePackage$1" name="val$col"/>
  <method class="jd.plugins.FilePackage$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.plugins.FilePackage$1" name="int compare(jd.plugins.DownloadLink, jd.plugins.DownloadLink)"/>
  <class name="jd.plugins.FilePackage"/>
  <field class="jd.plugins.FilePackage" name="comment"/>
  <field class="jd.plugins.FilePackage" name="totalBytesLoaded_v2"/>
  <field class="jd.plugins.FilePackage" name="finishedDate"/>
  <field class="jd.plugins.FilePackage" name="broadcaster"/>
  <field class="jd.plugins.FilePackage" name="isFinished"/>
  <field class="jd.plugins.FilePackage" name="totalEstimatedPackageSize_v2"/>
  <field class="jd.plugins.FilePackage" name="FP"/>
  <field class="jd.plugins.FilePackage" name="downloadLinkList"/>
  <field class="jd.plugins.FilePackage" name="downloadLinks"/>
  <field class="jd.plugins.FilePackage" name="linksFinished"/>
  <field class="jd.plugins.FilePackage" name="created"/>
  <field class="jd.plugins.FilePackage" name="UPDATE_INTERVAL"/>
  <field class="jd.plugins.FilePackage" name="extractAfterDownload"/>
  <field class="jd.plugins.FilePackage" name="serialVersionUID"/>
  <field class="jd.plugins.FilePackage" name="counter"/>
  <field class="jd.plugins.FilePackage" name="ListHoster"/>
  <field class="jd.plugins.FilePackage" name="totalDownloadSpeed_v2"/>
  <field class="jd.plugins.FilePackage" name="sortasc"/>
  <field class="jd.plugins.FilePackage" name="linksInProgress"/>
  <field class="jd.plugins.FilePackage" name="password2"/>
  <field class="jd.plugins.FilePackage" name="linksFailed"/>
  <field class="jd.plugins.FilePackage" name="updateTime"/>
  <field class="jd.plugins.FilePackage" name="id"/>
  <field class="jd.plugins.FilePackage" name="downloadDirectory"/>
  <field class="jd.plugins.FilePackage" name="updateTime1"/>
  <field class="jd.plugins.FilePackage" name="links_Disabled"/>
  <field class="jd.plugins.FilePackage" name="name"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getId()"/>
  <method class="jd.plugins.FilePackage" name="void sort(int)"/>
  <method class="jd.plugins.FilePackage" name="long getFinishedDate()"/>
  <method class="jd.plugins.FilePackage" name="java.util.ArrayList getLinksListbyStatus(int)"/>
  <method class="jd.plugins.FilePackage" name="void add(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.FilePackage" name="int getLinksFailed()"/>
  <method class="jd.plugins.FilePackage" name="void onDownloadLinkEvent(jd.plugins.DownloadLinkEvent)"/>
  <method class="jd.plugins.FilePackage" name="void updateCollectives()"/>
  <method class="jd.plugins.FilePackage" name="int add(int, jd.plugins.DownloadLink, int)"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getComment()"/>
  <method class="jd.plugins.FilePackage" name="void update_linksDisabled()"/>
  <method class="jd.plugins.FilePackage" name="void setDownloadDirectory(java.lang.String)"/>
  <method class="jd.plugins.FilePackage" name="int getLinksInProgress()"/>
  <method class="jd.plugins.FilePackage" name="java.util.ArrayList getPasswordAuto()"/>
  <method class="jd.plugins.FilePackage" name="int getLinksDisabled()"/>
  <method class="jd.plugins.FilePackage" name="boolean hasDownloadDirectory()"/>
  <method class="jd.plugins.FilePackage" name="void setName(java.lang.String)"/>
  <method class="jd.plugins.FilePackage" name="void readObject(java.io.ObjectInputStream)"/>
  <method class="jd.plugins.FilePackage" name="void addLinksAt(java.util.ArrayList, int)"/>
  <method class="jd.plugins.FilePackage" name="int getRemainingLinks()"/>
  <method class="jd.plugins.FilePackage" name="void setCreated(long)"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getPassword()"/>
  <method class="jd.plugins.FilePackage" name="void convert()"/>
  <method class="jd.plugins.FilePackage" name="long getCreated()"/>
  <method class="jd.plugins.FilePackage" name="void setExtractAfterDownload(boolean)"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getDownloadDirectoryName()"/>
  <method class="jd.plugins.FilePackage" name="boolean isFinished()"/>
  <method class="jd.plugins.FilePackage" name="int indexOf(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.FilePackage" name="void setPassword(java.lang.String)"/>
  <method class="jd.plugins.FilePackage" name="boolean contains(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.FilePackage" name="void removeListener(jd.plugins.FilePackageListener)"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getDownloadDirectory()"/>
  <method class="jd.plugins.FilePackage" name="jd.plugins.FilePackage getDefaultFilePackage()"/>
  <method class="jd.plugins.FilePackage" name="long getTotalKBLoaded()"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String toString()"/>
  <method class="jd.plugins.FilePackage" name="java.util.Vector getDownloadLinks()"/>
  <method class="jd.plugins.FilePackage" name="long getETA()"/>
  <method class="jd.plugins.FilePackage" name="jd.plugins.FilePackage getInstance()"/>
  <method class="jd.plugins.FilePackage" name="int getLinksFinished()"/>
  <method class="jd.plugins.FilePackage" name="void onFilePackageEvent(jd.plugins.FilePackageEvent)"/>
  <method class="jd.plugins.FilePackage" name="void setComment(java.lang.String)"/>
  <method class="jd.plugins.FilePackage" name="boolean isExtractAfterDownload()"/>
  <method class="jd.plugins.FilePackage" name="boolean access$0(jd.plugins.FilePackage)"/>
  <method class="jd.plugins.FilePackage" name="long getTotalDownloadSpeed()"/>
  <method class="jd.plugins.FilePackage" name="void setFinishedDate(long)"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getName()"/>
  <method class="jd.plugins.FilePackage" name="void abortDownload()"/>
  <method class="jd.plugins.FilePackage" name="int size()"/>
  <method class="jd.plugins.FilePackage" name="java.lang.String getHoster()"/>
  <method class="jd.plugins.FilePackage" name="long getTotalEstimatedPackageSize()"/>
  <method class="jd.plugins.FilePackage" name="void addListener(jd.plugins.FilePackageListener)"/>
  <method class="jd.plugins.FilePackage" name="void addLinks(java.util.ArrayList)"/>
  <method class="jd.plugins.FilePackage" name="jd.plugins.DownloadLink getSFV()"/>
  <method class="jd.plugins.FilePackage" name="void remove(jd.plugins.DownloadLink)"/>
  <method class="jd.plugins.FilePackage" name="void remove(java.util.ArrayList)"/>
  <method class="jd.plugins.FilePackage" name="java.util.ArrayList getDownloadLinkList()"/>
  <method class="jd.plugins.FilePackage" name="jd.plugins.DownloadLink get(int)"/>
  <method class="jd.plugins.FilePackage" name="boolean isEnabled()"/>
  <method class="jd.plugins.FilePackage" name="double getPercent()"/>
  <class name="jd.plugins.DecrypterException"/>
  <field class="jd.plugins.DecrypterException" name="ACCOUNT"/>
  <field class="jd.plugins.DecrypterException" name="errorMessage"/>
  <field class="jd.plugins.DecrypterException" name="CAPTCHA"/>
  <field class="jd.plugins.DecrypterException" name="PASSWORD"/>
  <field class="jd.plugins.DecrypterException" name="serialVersionUID"/>
  <method class="jd.plugins.DecrypterException" name="java.lang.String getErrorMessage()"/>
  <class name="jd.plugins.LinkGrabberFilePackageListener"/>
  <method class="jd.plugins.LinkGrabberFilePackageListener" name="void handle_LinkGrabberFilePackageEvent(jd.plugins.LinkGrabberFilePackageEvent)"/>
  <field class="jd.plugins.AccountMenuItemSyncer$1" name="this$0"/>
  <field class="jd.plugins.AccountMenuItemSyncer$1" name="val$event"/>
  <method class="jd.plugins.AccountMenuItemSyncer$1" name="java.lang.Object runSave()"/>
  <class name="jd.plugins.AccountMenuItemSyncer"/>
  <field class="jd.plugins.AccountMenuItemSyncer" name="INSTANCE"/>
  <field class="jd.plugins.AccountMenuItemSyncer" name="map"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="boolean vetoAccountGetEvent(java.lang.String, jd.plugins.Account)"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="void map(jd.plugins.Account, jd.gui.swing.jdgui.menu.MenuAction)"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="void onAccountControllerEvent(jd.controlling.AccountControllerEvent)"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="java.util.HashMap access$0(jd.plugins.AccountMenuItemSyncer)"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="jd.plugins.AccountMenuItemSyncer getInstance()"/>
  <method class="jd.plugins.AccountMenuItemSyncer" name="jd.gui.swing.jdgui.menu.MenuAction get(jd.plugins.Account)"/>
  <class name="jd.plugins.FilePackageBroadcaster"/>
  <method class="jd.plugins.FilePackageBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <method class="jd.plugins.FilePackageBroadcaster" name="void fireEvent(jd.plugins.FilePackageListener, jd.plugins.FilePackageEvent)"/>
  <class name="jd.update.Restarter"/>
  <field class="jd.update.Restarter" name="NOLOG"/>
  <field class="jd.update.Restarter" name="logger"/>
  <field class="jd.update.Restarter" name="WAIT_FOR_JDOWNLOADER_TERM"/>
  <field class="jd.update.Restarter" name="RESTART"/>
  <method class="jd.update.Restarter" name="boolean removeFiles()"/>
  <method class="jd.update.Restarter" name="void extract(java.io.File)"/>
  <method class="jd.update.Restarter" name="void main(java.lang.String[])"/>
  <method class="jd.update.Restarter" name="java.lang.String getStackTrace(java.lang.Throwable)"/>
  <method class="jd.update.Restarter" name="void move(java.io.File)"/>
  <field class="jd.update.WebUpdater$1" name="this$0"/>
  <method class="jd.update.WebUpdater$1" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <method class="jd.update.WebUpdater$1" name="void fireEvent(jd.event.MessageListener, jd.event.MessageEvent)"/>
  <class name="jd.update.WebUpdater"/>
  <field class="jd.update.WebUpdater" name="sum"/>
  <field class="jd.update.WebUpdater" name="broadcaster"/>
  <field class="jd.update.WebUpdater" name="DO_UPDATE_FILE"/>
  <field class="jd.update.WebUpdater" name="DO_UPDATE_SUCCESS"/>
  <field class="jd.update.WebUpdater" name="fileMap"/>
  <field class="jd.update.WebUpdater" name="ignorePlugins"/>
  <field class="jd.update.WebUpdater" name="workingdir"/>
  <field class="jd.update.WebUpdater" name="serialVersionUID"/>
  <field class="jd.update.WebUpdater" name="progressload"/>
  <field class="jd.update.WebUpdater" name="errors"/>
  <field class="jd.update.WebUpdater" name="branches"/>
  <field class="jd.update.WebUpdater" name="PLUGIN_LIST"/>
  <field class="jd.update.WebUpdater" name="DO_UPDATE_FAILED"/>
  <field class="jd.update.WebUpdater" name="UPDATE_FILE"/>
  <field class="jd.update.WebUpdater" name="BRANCHINUSE"/>
  <field class="jd.update.WebUpdater" name="UPDATE_MIRROR"/>
  <field class="jd.update.WebUpdater" name="betaBranch"/>
  <field class="jd.update.WebUpdater" name="NEW_FILE"/>
  <field class="jd.update.WebUpdater" name="br"/>
  <field class="jd.update.WebUpdater" name="UPDATE_ZIP_LOCAL_PATH"/>
  <field class="jd.update.WebUpdater" name="OSFilter"/>
  <field class="jd.update.WebUpdater" name="logger"/>
  <field class="jd.update.WebUpdater" name="PARAM_BRANCH"/>
  <method class="jd.update.WebUpdater" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <method class="jd.update.WebUpdater" name="void filterAvailableUpdates(java.util.ArrayList)"/>
  <method class="jd.update.WebUpdater" name="java.io.File getWorkingdir()"/>
  <method class="jd.update.WebUpdater" name="void resetErrors()"/>
  <method class="jd.update.WebUpdater" name="void updateFile(java.util.Vector)"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getBetaBranch()"/>
  <method class="jd.update.WebUpdater" name="void updateFiles(java.util.ArrayList, jd.controlling.ProgressController)"/>
  <method class="jd.update.WebUpdater" name="void randomizeMirrors()"/>
  <method class="jd.update.WebUpdater" name="void cleanUp()"/>
  <method class="jd.update.WebUpdater" name="java.util.ArrayList getAvailableServers()"/>
  <method class="jd.update.WebUpdater" name="java.lang.StringBuilder getLogger()"/>
  <method class="jd.update.WebUpdater" name="void errorWait()"/>
  <method class="jd.update.WebUpdater" name="java.util.ArrayList updateAvailableServers()"/>
  <method class="jd.update.WebUpdater" name="boolean updateUpdatefile(jd.update.FileUpdate)"/>
  <method class="jd.update.WebUpdater" name="void setWorkingdir(java.io.File)"/>
  <method class="jd.update.WebUpdater" name="jd.config.SubConfiguration getConfig(java.lang.String)"/>
  <method class="jd.update.WebUpdater" name="java.lang.String[] getBranches()"/>
  <method class="jd.update.WebUpdater" name="java.lang.String formatPathReadable(java.lang.String)"/>
  <method class="jd.update.WebUpdater" name="void setDownloadProgress(javax.swing.JProgressBar)"/>
  <method class="jd.update.WebUpdater" name="java.util.ArrayList getAvailableFiles()"/>
  <method class="jd.update.WebUpdater" name="java.lang.String toString()"/>
  <method class="jd.update.WebUpdater" name="boolean getOSFilter()"/>
  <method class="jd.update.WebUpdater" name="java.util.HashMap getPluginList()"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getListPath(int)"/>
  <method class="jd.update.WebUpdater" name="java.util.HashMap getFileMap()"/>
  <method class="jd.update.WebUpdater" name="void initBroadcaster()"/>
  <method class="jd.update.WebUpdater" name="boolean isIgnorePlugins()"/>
  <method class="jd.update.WebUpdater" name="void loadUpdateList()"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getZipUrl(int)"/>
  <method class="jd.update.WebUpdater" name="void setOSFilter(boolean)"/>
  <method class="jd.update.WebUpdater" name="int getErrors()"/>
  <method class="jd.update.WebUpdater" name="void ignorePlugins(boolean)"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getBranch()"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getZipMD5(int)"/>
  <method class="jd.update.WebUpdater" name="java.lang.String getLatestBranch()"/>
  <method class="jd.update.WebUpdater" name="void setIgnorePlugins(boolean)"/>
  <method class="jd.update.WebUpdater" name="void setLogger(java.lang.StringBuilder)"/>
  <method class="jd.update.WebUpdater" name="void parseFileList(java.io.File, java.util.ArrayList, java.util.HashMap)"/>
  <method class="jd.update.WebUpdater" name="boolean isBetaBranch(java.lang.String)"/>
  <class name="jd.update.Server"/>
  <field class="jd.update.Server" name="requestCount"/>
  <field class="jd.update.Server" name="requestTime"/>
  <field class="jd.update.Server" name="percent"/>
  <field class="jd.update.Server" name="path"/>
  <field class="jd.update.Server" name="serialVersionUID"/>
  <method class="jd.update.Server" name="jd.update.Server selectServerByRequestTime(java.util.ArrayList)"/>
  <method class="jd.update.Server" name="void setRequestTime(long)"/>
  <method class="jd.update.Server" name="void setPercent(int)"/>
  <method class="jd.update.Server" name="jd.update.Server selectServer(java.util.ArrayList)"/>
  <method class="jd.update.Server" name="void setPath(java.lang.String)"/>
  <method class="jd.update.Server" name="long getRequestTime()"/>
  <method class="jd.update.Server" name="java.lang.String toString()"/>
  <method class="jd.update.Server" name="int getPercent()"/>
  <method class="jd.update.Server" name="java.lang.String getPath()"/>
  <class name="jd.update.JDUpdateUtils"/>
  <method class="jd.update.JDUpdateUtils" name="boolean backupDataBase()"/>
  <field class="jd.update.FileUpdate$1" name="this$0"/>
  <method class="jd.update.FileUpdate$1" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <method class="jd.update.FileUpdate$1" name="void fireEvent(jd.event.MessageListener, jd.event.MessageEvent)"/>
  <class name="jd.update.FileUpdate"/>
  <field class="jd.update.FileUpdate" name="broadcaster"/>
  <field class="jd.update.FileUpdate" name="url"/>
  <field class="jd.update.FileUpdate" name="localPath"/>
  <field class="jd.update.FileUpdate" name="SUCCESS"/>
  <field class="jd.update.FileUpdate" name="WAITTIME_ON_ERROR"/>
  <field class="jd.update.FileUpdate" name="ERROR"/>
  <field class="jd.update.FileUpdate" name="hash"/>
  <field class="jd.update.FileUpdate" name="workingDir"/>
  <field class="jd.update.FileUpdate" name="serverList"/>
  <field class="jd.update.FileUpdate" name="DOWNLOAD_SOURCE"/>
  <field class="jd.update.FileUpdate" name="relURL"/>
  <field class="jd.update.FileUpdate" name="SERVER_STATS"/>
  <field class="jd.update.FileUpdate" name="currentServer"/>
  <method class="jd.update.FileUpdate" name="void initBroadcaster()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String mergeUrl(java.lang.String, java.lang.String)"/>
  <method class="jd.update.FileUpdate" name="boolean exists()"/>
  <method class="jd.update.FileUpdate" name="void errorWait()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getURL()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getRelURL()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String toString()"/>
  <method class="jd.update.FileUpdate" name="java.io.File getLocalFile()"/>
  <method class="jd.update.FileUpdate" name="boolean hasServer()"/>
  <method class="jd.update.FileUpdate" name="boolean update(java.util.ArrayList)"/>
  <method class="jd.update.FileUpdate" name="boolean equals()"/>
  <method class="jd.update.FileUpdate" name="java.io.File getLocalTmpFile()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getLocalHash()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getRawUrl()"/>
  <method class="jd.update.FileUpdate" name="void reset(java.util.ArrayList)"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getLocalPath()"/>
  <method class="jd.update.FileUpdate" name="java.lang.String getRemoteHash()"/>
  <method class="jd.update.FileUpdate" name="boolean needsRestart()"/>
  <method class="jd.update.FileUpdate" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <method class="jd.update.Main$2" name="void run()"/>
  <field class="jd.update.Main$1" name="msg2"/>
  <field class="jd.update.Main$1" name="msg1"/>
  <field class="jd.update.Main$1" name="msg0"/>
  <field class="jd.update.Main$1" name="val$updater"/>
  <method class="jd.update.Main$1" name="void onMessage(jd.event.MessageEvent)"/>
  <class name="jd.update.Main"/>
  <field class="jd.update.Main" name="RESTORE"/>
  <field class="jd.update.Main" name="clonePrefix"/>
  <field class="jd.update.Main" name="frame"/>
  <field class="jd.update.Main" name="INSETS"/>
  <field class="jd.update.Main" name="NORTHWEST"/>
  <field class="jd.update.Main" name="BOTHRESIZE"/>
  <field class="jd.update.Main" name="logWindow"/>
  <field class="jd.update.Main" name="log"/>
  <field class="jd.update.Main" name="warnings"/>
  <field class="jd.update.Main" name="REM"/>
  <field class="jd.update.Main" name="REL"/>
  <field class="jd.update.Main" name="TICKET_TIME"/>
  <field class="jd.update.Main" name="clone"/>
  <field class="jd.update.Main" name="guiConfig"/>
  <field class="jd.update.Main" name="logger"/>
  <field class="jd.update.Main" name="progressload"/>
  <field class="jd.update.Main" name="NORESIZE"/>
  <method class="jd.update.Main" name="void log(java.lang.StringBuilder, java.lang.String)"/>
  <method class="jd.update.Main" name="javax.swing.JTextPane access$4()"/>
  <method class="jd.update.Main" name="void access$2(java.lang.StringBuilder, java.lang.String)"/>
  <method class="jd.update.Main" name="void main(java.lang.String[])"/>
  <method class="jd.update.Main" name="void initGUI()"/>
  <method class="jd.update.Main" name="javax.swing.JFrame access$0()"/>
  <method class="jd.update.Main" name="void checkUpdateMessage()"/>
  <method class="jd.update.Main" name="java.lang.StringBuilder access$1()"/>
  <method class="jd.update.Main" name="void checkBackup()"/>
  <method class="jd.update.Main" name="void trace(java.lang.Object)"/>
  <method class="jd.update.Main" name="javax.swing.JTextArea access$3()"/>
  <class name="jd.nrouter.WebIPCheck"/>
  <field class="jd.nrouter.WebIPCheck" name="url"/>
  <field class="jd.nrouter.WebIPCheck" name="br"/>
  <field class="jd.nrouter.WebIPCheck" name="errorcount"/>
  <field class="jd.nrouter.WebIPCheck" name="pattern"/>
  <field class="jd.nrouter.WebIPCheck" name="maxerror"/>
  <method class="jd.nrouter.WebIPCheck" name="java.lang.Object getIP()"/>
  <method class="jd.nrouter.WebIPCheck" name="java.lang.String getInfo()"/>
  <class name="jd.nrouter.Router"/>
  <field class="jd.nrouter.Router" name="address"/>
  <method class="jd.nrouter.Router" name="boolean refreshIP()"/>
  <method class="jd.nrouter.Router" name="java.lang.String getExternalIPAddress()"/>
  <method class="jd.nrouter.Router" name="java.net.InetAddress getAddress()"/>
  <field class="jd.nrouter.UPNPRouter$2" name="this$0"/>
  <field class="jd.nrouter.UPNPRouter$2" name="val$th"/>
  <method class="jd.nrouter.UPNPRouter$2" name="void go()"/>
  <field class="jd.nrouter.UPNPRouter$1" name="this$0"/>
  <field class="jd.nrouter.UPNPRouter$1" name="val$th"/>
  <method class="jd.nrouter.UPNPRouter$1" name="void deviceSearchResponseReceived(org.cybergarage.upnp.ssdp.SSDPPacket)"/>
  <class name="jd.nrouter.UPNPRouter"/>
  <field class="jd.nrouter.UPNPRouter" name="controlPoint"/>
  <field class="jd.nrouter.UPNPRouter" name="WANCON_DEVICE"/>
  <field class="jd.nrouter.UPNPRouter" name="wanConnectionDevice"/>
  <field class="jd.nrouter.UPNPRouter" name="ROUTER_DEVICE"/>
  <field class="jd.nrouter.UPNPRouter" name="WAN_DEVICE"/>
  <field class="jd.nrouter.UPNPRouter" name="device"/>
  <field class="jd.nrouter.UPNPRouter" name="timeout"/>
  <method class="jd.nrouter.UPNPRouter" name="boolean refreshIP()"/>
  <method class="jd.nrouter.UPNPRouter" name="java.lang.String getExternalIPAddress()"/>
  <method class="jd.nrouter.UPNPRouter" name="org.cybergarage.upnp.Device getWanConnectionDevice()"/>
  <method class="jd.nrouter.UPNPRouter" name="boolean isUPNPDevice()"/>
  <method class="jd.nrouter.UPNPRouter" name="void discover()"/>
  <method class="jd.nrouter.UPNPRouter" name="java.lang.String getRefreshIPRequest()"/>
  <method class="jd.nrouter.UPNPRouter" name="org.cybergarage.upnp.ControlPoint access$0(jd.nrouter.UPNPRouter)"/>
  <method class="jd.nrouter.UPNPRouter" name="int access$1(jd.nrouter.UPNPRouter)"/>
  <method class="jd.nrouter.UPNPRouter" name="java.lang.String toString()"/>
  <method class="jd.nrouter.RouterUtils$1" name="void onThreadStarts(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.nrouter.RouterUtils$1" name="void onThreadFinished(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.nrouter.RouterUtils$1" name="void onThreadException(jd.nutils.Threader, jd.nutils.jobber.JDRunnable, java.lang.Exception)"/>
  <class name="jd.nrouter.RouterUtils$WebServerChecker"/>
  <field class="jd.nrouter.RouterUtils$WebServerChecker" name="address"/>
  <field class="jd.nrouter.RouterUtils$WebServerChecker" name="host"/>
  <method class="jd.nrouter.RouterUtils$WebServerChecker" name="java.net.InetAddress getAddress()"/>
  <method class="jd.nrouter.RouterUtils$WebServerChecker" name="void go()"/>
  <class name="jd.nrouter.RouterUtils"/>
  <field class="jd.nrouter.RouterUtils" name="ASYNCH_RETURN"/>
  <field class="jd.nrouter.RouterUtils" name="HOST_NAMES"/>
  <field class="jd.nrouter.RouterUtils" name="ADDRESS_CACHE"/>
  <method class="jd.nrouter.RouterUtils" name="java.net.InetAddress getAddress(boolean)"/>
  <method class="jd.nrouter.RouterUtils" name="boolean validateIP(java.lang.String)"/>
  <method class="jd.nrouter.RouterUtils" name="java.net.InetAddress getIpFormHostTable()"/>
  <method class="jd.nrouter.RouterUtils" name="java.net.InetAddress getIPFormNetStat()"/>
  <method class="jd.nrouter.RouterUtils" name="java.net.InetAddress getIPFromRouteCommand()"/>
  <method class="jd.nrouter.RouterUtils" name="void access$0(java.net.InetAddress)"/>
  <method class="jd.nrouter.RouterUtils" name="void updateHostTable()"/>
  <method class="jd.nrouter.RouterUtils" name="boolean checkport(java.lang.String, int)"/>
  <method class="jd.nrouter.RouterUtils" name="java.util.ArrayList getNetworkDeviceAdresses()"/>
  <field class="jd.nrouter.IPCheck$1" name="br"/>
  <field class="jd.nrouter.IPCheck$1" name="errorcount"/>
  <field class="jd.nrouter.IPCheck$1" name="maxerror"/>
  <method class="jd.nrouter.IPCheck$1" name="java.lang.Object getIP()"/>
  <method class="jd.nrouter.IPCheck$1" name="java.lang.String getInfo()"/>
  <class name="jd.nrouter.IPCheck$CheckStatus"/>
  <field class="jd.nrouter.IPCheck$CheckStatus" name="ENUM$VALUES"/>
  <field class="jd.nrouter.IPCheck$CheckStatus" name="SEQFAILED"/>
  <field class="jd.nrouter.IPCheck$CheckStatus" name="FAILED"/>
  <method class="jd.nrouter.IPCheck$CheckStatus" name="jd.nrouter.IPCheck$CheckStatus valueOf(java.lang.String)"/>
  <method class="jd.nrouter.IPCheck$CheckStatus" name="jd.nrouter.IPCheck$CheckStatus[] values()"/>
  <class name="jd.nrouter.IPCheck"/>
  <field class="jd.nrouter.IPCheck" name="LATEST_IP"/>
  <field class="jd.nrouter.IPCheck" name="CustomWebIPCheck"/>
  <field class="jd.nrouter.IPCheck" name="CustomIPCheckProvider"/>
  <field class="jd.nrouter.IPCheck" name="IP_CHECK_INDEX"/>
  <field class="jd.nrouter.IPCheck" name="IP_CHECK_SERVICES"/>
  <field class="jd.nrouter.IPCheck" name="LOCK"/>
  <method class="jd.nrouter.IPCheck" name="java.lang.Object checkIPProvider()"/>
  <method class="jd.nrouter.IPCheck" name="java.lang.String getIPAddress()"/>
  <method class="jd.nrouter.IPCheck" name="void setCustomIPCheckProvider(jd.nrouter.IPCheckProvider)"/>
  <class name="jd.nrouter.IPCheckProvider"/>
  <method class="jd.nrouter.IPCheckProvider" name="java.lang.Object getIP()"/>
  <method class="jd.nrouter.IPCheckProvider" name="java.lang.String getInfo()"/>
  <class name="jd.utils.locale.JDLEvent"/>
  <field class="jd.utils.locale.JDLEvent" name="SET_NEW_LOCALE"/>
  <class name="jd.utils.locale.JDLListener"/>
  <method class="jd.utils.locale.JDLListener" name="void onJDLEvent(jd.utils.locale.JDLEvent)"/>
  <method class="jd.utils.locale.JDL$1" name="void fireEvent(jd.utils.locale.JDLListener, jd.utils.locale.JDLEvent)"/>
  <method class="jd.utils.locale.JDL$1" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.utils.locale.JDL"/>
  <field class="jd.utils.locale.JDL" name="LOCALE_FILE"/>
  <field class="jd.utils.locale.JDL" name="STATIC_LOCALE"/>
  <field class="jd.utils.locale.JDL" name="DATA"/>
  <field class="jd.utils.locale.JDL" name="LOCALE_PARAM_ID"/>
  <field class="jd.utils.locale.JDL" name="KEY"/>
  <field class="jd.utils.locale.JDL" name="DEFAULT_LOCALE"/>
  <field class="jd.utils.locale.JDL" name="LOCALE_ID"/>
  <field class="jd.utils.locale.JDL" name="LANGUAGES_DIR"/>
  <field class="jd.utils.locale.JDL" name="SETTINGS"/>
  <field class="jd.utils.locale.JDL" name="BROADCASTER"/>
  <field class="jd.utils.locale.JDL" name="COUNTRY_CODE"/>
  <field class="jd.utils.locale.JDL" name="DEFAULT_DATA"/>
  <field class="jd.utils.locale.JDL" name="CACHE"/>
  <field class="jd.utils.locale.JDL" name="DEBUG"/>
  <field class="jd.utils.locale.JDL" name="CONFIG"/>
  <method class="jd.utils.locale.JDL" name="void loadDefault()"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String translate(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="void parseLanguageFile(java.io.File, java.util.HashMap)"/>
  <method class="jd.utils.locale.JDL" name="java.io.File getLanguageFile()"/>
  <method class="jd.utils.locale.JDL" name="boolean isGerman()"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String L(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="void setLocale(jd.utils.locale.JDLocale)"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String hashToKey(java.lang.Integer)"/>
  <method class="jd.utils.locale.JDL" name="void setConfigLocale(jd.utils.locale.JDLocale)"/>
  <method class="jd.utils.locale.JDL" name="jd.utils.locale.JDLocale getInstance(java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="jd.utils.locale.JDLocale getLocale()"/>
  <method class="jd.utils.locale.JDL" name="void initLocalisation()"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String LF(java.lang.String, java.lang.String, java.lang.Object[])"/>
  <method class="jd.utils.locale.JDL" name="jd.utils.locale.JDLocale getConfigLocale()"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String getLocaleString(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="void setStaticLocale(java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String getCountryCodeByIP()"/>
  <method class="jd.utils.locale.JDL" name="java.util.HashMap getSettings()"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String translate(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="java.lang.String[] getKeysFor(java.lang.String)"/>
  <method class="jd.utils.locale.JDL" name="java.util.ArrayList getLocaleIDs()"/>
  <method class="jd.utils.locale.JDL" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <class name="jd.utils.locale.JDLocale"/>
  <field class="jd.utils.locale.JDLocale" name="codes"/>
  <field class="jd.utils.locale.JDLocale" name="lngGeoCode"/>
  <field class="jd.utils.locale.JDLocale" name="serialVersionUID"/>
  <method class="jd.utils.locale.JDLocale" name="java.lang.String getCountryCode()"/>
  <method class="jd.utils.locale.JDLocale" name="boolean equals(java.lang.Object)"/>
  <method class="jd.utils.locale.JDLocale" name="java.lang.String getLngGeoCode()"/>
  <method class="jd.utils.locale.JDLocale" name="java.lang.String getLanguageCode()"/>
  <method class="jd.utils.locale.JDLocale" name="java.lang.String getExtensionCode()"/>
  <method class="jd.utils.locale.JDLocale" name="java.lang.String toString()"/>
  <class name="jd.utils.CheckJava"/>
  <method class="jd.utils.CheckJava" name="boolean check()"/>
  <field class="jd.utils.Updater$2" name="this$0"/>
  <method class="jd.utils.Updater$2" name="boolean doIt(java.io.File)"/>
  <field class="jd.utils.Updater$1" name="this$0"/>
  <method class="jd.utils.Updater$1" name="boolean doIt(java.io.File)"/>
  <class name="jd.utils.Updater$Server"/>
  <field class="jd.utils.Updater$Server" name="port"/>
  <field class="jd.utils.Updater$Server" name="ftpPath"/>
  <field class="jd.utils.Updater$Server" name="priority"/>
  <field class="jd.utils.Updater$Server" name="manuelUpload"/>
  <field class="jd.utils.Updater$Server" name="httppath"/>
  <field class="jd.utils.Updater$Server" name="ip"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String getFTPPath()"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String getHttppath()"/>
  <method class="jd.utils.Updater$Server" name="boolean isManuelUpload()"/>
  <method class="jd.utils.Updater$Server" name="int getPriority()"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String getIp()"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String getUser()"/>
  <method class="jd.utils.Updater$Server" name="int getPort()"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String toString()"/>
  <method class="jd.utils.Updater$Server" name="java.lang.String getPass()"/>
  <class name="jd.utils.Updater"/>
  <field class="jd.utils.Updater" name="frame"/>
  <field class="jd.utils.Updater" name="SERVERLIST"/>
  <field class="jd.utils.Updater" name="workingDir"/>
  <field class="jd.utils.Updater" name="updateDir"/>
  <field class="jd.utils.Updater" name="pluginsDir"/>
  <field class="jd.utils.Updater" name="BRANCH"/>
  <field class="jd.utils.Updater" name="UPDATE_SUB_DIR"/>
  <field class="jd.utils.Updater" name="packedFiles"/>
  <field class="jd.utils.Updater" name="jars"/>
  <field class="jd.utils.Updater" name="UPDATE2"/>
  <field class="jd.utils.Updater" name="UPDATE1"/>
  <field class="jd.utils.Updater" name="UPDATE0"/>
  <method class="jd.utils.Updater" name="void copyDirectory(java.io.File, java.io.File)"/>
  <method class="jd.utils.Updater" name="void merge()"/>
  <method class="jd.utils.Updater" name="void removeFileOverhead()"/>
  <method class="jd.utils.Updater" name="java.lang.String getCFG(java.lang.String)"/>
  <method class="jd.utils.Updater" name="java.util.ArrayList getLocalFileList(java.io.File, boolean)"/>
  <method class="jd.utils.Updater" name="void webupdate()"/>
  <method class="jd.utils.Updater" name="void moveJars(java.lang.String)"/>
  <method class="jd.utils.Updater" name="java.util.ArrayList pack(java.io.File)"/>
  <method class="jd.utils.Updater" name="java.lang.String createServerList()"/>
  <method class="jd.utils.Updater" name="void initGUI()"/>
  <method class="jd.utils.Updater" name="void uploadHashList()"/>
  <method class="jd.utils.Updater" name="boolean upload(java.util.ArrayList, jd.utils.Updater$Server)"/>
  <method class="jd.utils.Updater" name="void movePlugins(java.lang.String)"/>
  <method class="jd.utils.Updater" name="boolean ask(java.lang.String)"/>
  <method class="jd.utils.Updater" name="void main(java.lang.String[])"/>
  <method class="jd.utils.Updater" name="void copyFile(java.io.File, java.io.File)"/>
  <method class="jd.utils.Updater" name="void pack()"/>
  <method class="jd.utils.Updater" name="java.util.LinkedHashMap createHashList(java.io.File)"/>
  <method class="jd.utils.Updater" name="void cleanUp()"/>
  <method class="jd.utils.ReplaceInFiles$1" name="java.lang.Object runSave()"/>
  <class name="jd.utils.ReplaceInFiles"/>
  <field class="jd.utils.ReplaceInFiles" name="$SWITCH_TABLE$jd$nutils$DiffMatchPatch$Operation"/>
  <method class="jd.utils.ReplaceInFiles" name="void main(java.lang.String[])"/>
  <method class="jd.utils.ReplaceInFiles" name="void access$1(java.util.ArrayList, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.ReplaceInFiles" name="void replaceInFiles(java.util.ArrayList, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.ReplaceInFiles" name="java.util.ArrayList scanDir(java.io.File, java.lang.String)"/>
  <method class="jd.utils.ReplaceInFiles" name="int[] $SWITCH_TABLE$jd$nutils$DiffMatchPatch$Operation()"/>
  <method class="jd.utils.ReplaceInFiles" name="java.util.ArrayList access$0(java.io.File, java.lang.String)"/>
  <method class="jd.utils.ReplaceInFiles" name="java.lang.String diffPrettyHtml(java.util.LinkedList)"/>
  <class name="jd.utils.JDGeoCode"/>
  <field class="jd.utils.JDGeoCode" name="LANGUAGES"/>
  <field class="jd.utils.JDGeoCode" name="EXTENSIONS"/>
  <field class="jd.utils.JDGeoCode" name="COUNTRIES"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String getCountryCode(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String getExtensionCode(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String toLongerNative(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String[] parseLanguageCode(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String toLonger(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String getNativeLanguage(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String getLanguageCode(java.lang.String)"/>
  <method class="jd.utils.JDGeoCode" name="java.lang.String longToShort(java.lang.String)"/>
  <method class="jd.utils.JDFileReg$1" name="java.lang.Object runSave()"/>
  <method class="jd.utils.JDFileReg$1" name="java.lang.Integer runSave()"/>
  <class name="jd.utils.JDFileReg"/>
  <method class="jd.utils.JDFileReg" name="java.lang.String createRegisterWinFileExt(java.lang.String)"/>
  <method class="jd.utils.JDFileReg" name="void unregisterFileExts()"/>
  <method class="jd.utils.JDFileReg" name="void registerFileExts()"/>
  <method class="jd.utils.JDFileReg" name="java.lang.String createSetKey(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDFileReg" name="int showQuestion()"/>
  <method class="jd.utils.JDFileReg" name="java.lang.String createRegisterWinProtocol(java.lang.String)"/>
  <class name="jd.utils.Sniffy"/>
  <field class="jd.utils.Sniffy" name="blackList"/>
  <field class="jd.utils.Sniffy" name="whiteList"/>
  <field class="jd.utils.Sniffy" name="blackListproxy"/>
  <method class="jd.utils.Sniffy" name="void main(java.lang.String[])"/>
  <method class="jd.utils.Sniffy" name="boolean hasSniffer()"/>
  <method class="jd.utils.Sniffy" name="boolean hasWinSnifer()"/>
  <class name="jd.utils.SnifferException"/>
  <field class="jd.utils.SnifferException" name="serialVersionUID"/>
  <field class="jd.utils.JDUtilities$3" name="val$tinybypass"/>
  <method class="jd.utils.JDUtilities$3" name="void run()"/>
  <method class="jd.utils.JDUtilities$2" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.utils.JDUtilities$2" name="int compare(java.lang.Comparable, java.lang.Comparable)"/>
  <method class="jd.utils.JDUtilities$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.utils.JDUtilities$1" name="int compare(java.lang.Comparable, java.lang.Comparable)"/>
  <class name="jd.utils.JDUtilities"/>
  <field class="jd.utils.JDUtilities" name="JD_CLASSLOADER"/>
  <field class="jd.utils.JDUtilities" name="REVISION"/>
  <field class="jd.utils.JDUtilities" name="RUNTYPE_LOCAL_JARED"/>
  <field class="jd.utils.JDUtilities" name="JD_ARGUMENTS"/>
  <field class="jd.utils.JDUtilities" name="JD_HOME"/>
  <field class="jd.utils.JDUtilities" name="USERIO_LOCK"/>
  <field class="jd.utils.JDUtilities" name="CONFIGURATION"/>
  <field class="jd.utils.JDUtilities" name="CONTAINER_PLUGINS"/>
  <field class="jd.utils.JDUtilities" name="CONTROLLER"/>
  <field class="jd.utils.JDUtilities" name="RUNTYPE_LOCAL"/>
  <field class="jd.utils.JDUtilities" name="JD_VERSION"/>
  <field class="jd.utils.JDUtilities" name="DB_CONNECT"/>
  <method class="jd.utils.JDUtilities" name="jd.config.DatabaseConnector getDatabaseConnector()"/>
  <method class="jd.utils.JDUtilities" name="jd.plugins.PluginsC getPluginForContainer(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String createContainerString(java.util.ArrayList, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="void addToGridBag(java.awt.Container, java.awt.Component, int, int, int, int, int, int, java.awt.Insets, int, int, int, int)"/>
  <method class="jd.utils.JDUtilities" name="jd.OptionalPluginWrapper getOptionalPlugin(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String[] encrypt(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getDefaultDownloadDirectory()"/>
  <method class="jd.utils.JDUtilities" name="long getCRC(java.io.File)"/>
  <method class="jd.utils.JDUtilities" name="java.io.File getResourceFile(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.util.ArrayList getPremiumPluginsForHost()"/>
  <method class="jd.utils.JDUtilities" name="java.io.File getJDHomeDirectoryFromEnvironment()"/>
  <method class="jd.utils.JDUtilities" name="void saveConfig()"/>
  <method class="jd.utils.JDUtilities" name="jd.JDClassLoader getJDClassLoader()"/>
  <method class="jd.utils.JDUtilities" name="jd.plugins.PluginForHost getPluginForHost(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.Double getJavaVersion()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getPercent(long, long)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String[] access$0()"/>
  <method class="jd.utils.JDUtilities" name="jd.plugins.PluginForHost getNewPluginForHostInstance(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.net.URL getResourceURL(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getUserInput(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String objectToXml(java.lang.Object)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getJACMethodsDirectory()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getUserInput(java.lang.String, java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String runCommand(java.lang.String, java.lang.String[], java.lang.String, int)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String convertExceptionReadable(java.lang.Exception)"/>
  <method class="jd.utils.JDUtilities" name="jd.config.Configuration getConfiguration()"/>
  <method class="jd.utils.JDUtilities" name="int getRunType()"/>
  <method class="jd.utils.JDUtilities" name="void restartJD(boolean)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getRevision()"/>
  <method class="jd.utils.JDUtilities" name="void setCurrentWorkingDirectory(java.io.File, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="jd.plugins.PluginForDecrypt getPluginForDecrypt(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="void setJDargs(java.lang.String[])"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getUserInput(java.lang.String, jd.plugins.DownloadLink)"/>
  <method class="jd.utils.JDUtilities" name="jd.controlling.DownloadController getDownloadController()"/>
  <method class="jd.utils.JDUtilities" name="java.io.File getCurrentWorkingDirectory(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="jd.controlling.JDController getController()"/>
  <method class="jd.utils.JDUtilities" name="void restartJDandWait()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String[] getJDargs()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String removeEndingPoints(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="void setConfiguration(jd.config.Configuration)"/>
  <method class="jd.utils.JDUtilities" name="org.w3c.dom.Document parseXmlString(java.lang.String, boolean)"/>
  <method class="jd.utils.JDUtilities" name="java.io.File getResourceFile(java.lang.String, boolean)"/>
  <method class="jd.utils.JDUtilities" name="java.util.TreeMap sortByKey(java.util.Map)"/>
  <method class="jd.utils.JDUtilities" name="boolean openExplorer(java.io.File)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getJDTitle()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getUserInput(java.lang.String, jd.plugins.CryptedLink)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getUserInput(java.lang.String, java.lang.String, jd.plugins.DownloadLink)"/>
  <method class="jd.utils.JDUtilities" name="void addToGridBag(java.awt.Container, java.awt.Component, int, int, int, int, int, int, java.awt.Insets, int, int)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.Object xmlStringToObjekt(java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.util.ArrayList getPluginsForHost()"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String createXmlString(org.w3c.dom.Document)"/>
  <method class="jd.utils.JDUtilities" name="java.lang.String getAttribute(org.w3c.dom.Node, java.lang.String)"/>
  <method class="jd.utils.JDUtilities" name="java.util.TreeMap revSortByKey(java.util.Map)"/>
  <method class="jd.utils.JDUtilities" name="void setController(jd.controlling.JDController)"/>
  <class name="jd.utils.CLRLoader"/>
  <field class="jd.utils.CLRLoader" name="logger"/>
  <method class="jd.utils.CLRLoader" name="java.lang.String[] createLiveHeader(java.lang.String)"/>
  <method class="jd.utils.CLRLoader" name="void inputAuth(java.lang.StringBuilder, java.lang.String)"/>
  <class name="jd.utils.BinCode"/>
  <method class="jd.utils.BinCode" name="java.lang.String prBinToCode(java.lang.String)"/>
  <method class="jd.utils.BinCode" name="java.lang.String[] codeArrayToBinArray(java.lang.String[])"/>
  <method class="jd.utils.BinCode" name="java.lang.String addZero(java.lang.String, int)"/>
  <method class="jd.utils.BinCode" name="java.lang.String codeToString(java.lang.String)"/>
  <method class="jd.utils.BinCode" name="java.lang.String binToCode(java.lang.String)"/>
  <method class="jd.utils.BinCode" name="java.lang.String[] codeToStringArray(java.lang.String)"/>
  <method class="jd.utils.BinCode" name="java.lang.String prCodeToBin(java.lang.String)"/>
  <method class="jd.utils.BinCode" name="java.lang.String[] binArrayToCodeArray(java.lang.String[])"/>
  <class name="jd.utils.GetExplorer"/>
  <field class="jd.utils.GetExplorer" name="explorer"/>
  <method class="jd.utils.GetExplorer" name="boolean openExplorer(java.io.File)"/>
  <method class="jd.utils.GetExplorer" name="java.lang.Object[] autoGetExplorerCommand()"/>
  <method class="jd.utils.GetExplorer" name="java.lang.Object[] getExplorerCommand()"/>
  <class name="jd.utils.EditDistance"/>
  <method class="jd.utils.EditDistance" name="int getLevenshteinDifference(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.EditDistance" name="int damerauLevenshteinDistance(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.EditDistance" name="int getLevenshteinDistance(java.lang.String, java.lang.String)"/>
  <class name="jd.utils.JDHexUtils"/>
  <field class="jd.utils.JDHexUtils" name="HEX_CHAR_TABLE"/>
  <field class="jd.utils.JDHexUtils" name="REGEX_HTTP_NEWLINE"/>
  <field class="jd.utils.JDHexUtils" name="REGEX_MATCH_ALL_HEX"/>
  <field class="jd.utils.JDHexUtils" name="REGEX_FIND_ALL_HEX"/>
  <method class="jd.utils.JDHexUtils" name="java.lang.String getHexString(byte[])"/>
  <method class="jd.utils.JDHexUtils" name="java.lang.String getHexString(java.lang.String)"/>
  <method class="jd.utils.JDHexUtils" name="byte[] getByteArray(java.lang.String)"/>
  <method class="jd.utils.JDHexUtils" name="java.lang.String toString(java.lang.String)"/>
  <class name="jd.utils.RSYNCServer"/>
  <class name="jd.utils.JDTheme"/>
  <field class="jd.utils.JDTheme" name="defaultData"/>
  <field class="jd.utils.JDTheme" name="logger"/>
  <field class="jd.utils.JDTheme" name="currentTheme"/>
  <field class="jd.utils.JDTheme" name="data"/>
  <field class="jd.utils.JDTheme" name="THEME_DIR"/>
  <method class="jd.utils.JDTheme" name="java.util.ArrayList getThemeIDs()"/>
  <method class="jd.utils.JDTheme" name="java.awt.Color C(java.lang.String, java.lang.String, int)"/>
  <method class="jd.utils.JDTheme" name="javax.swing.ImageIcon II(java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="java.lang.String getTheme()"/>
  <method class="jd.utils.JDTheme" name="java.lang.String V(java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="java.awt.Image I(java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="void setTheme(java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="java.awt.Image getImage(java.lang.String, int, int)"/>
  <method class="jd.utils.JDTheme" name="java.awt.Image I(java.lang.String, int, int)"/>
  <method class="jd.utils.JDTheme" name="java.awt.Color C(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="javax.swing.ImageIcon II(java.lang.String, int, int)"/>
  <method class="jd.utils.JDTheme" name="java.lang.String V(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.JDTheme" name="java.lang.String getThemeValue(java.lang.String, java.lang.String)"/>
  <field class="jd.utils.WebUpdate$4$1" name="val$pc"/>
  <field class="jd.utils.WebUpdate$4$1" name="this$1"/>
  <method class="jd.utils.WebUpdate$4$1" name="void onMessage(jd.event.MessageEvent)"/>
  <field class="jd.utils.WebUpdate$4" name="this$0"/>
  <field class="jd.utils.WebUpdate$4" name="val$files"/>
  <field class="jd.utils.WebUpdate$4" name="val$updater"/>
  <method class="jd.utils.WebUpdate$4" name="void run()"/>
  <field class="jd.utils.WebUpdate$3" name="val$pc"/>
  <method class="jd.utils.WebUpdate$3" name="void onMessage(jd.event.MessageEvent)"/>
  <field class="jd.utils.WebUpdate$2$2" name="val$progress"/>
  <field class="jd.utils.WebUpdate$2$2" name="this$1"/>
  <method class="jd.utils.WebUpdate$2$2" name="void onMessage(jd.event.MessageEvent)"/>
  <field class="jd.utils.WebUpdate$2$1" name="val$guiPrgs"/>
  <field class="jd.utils.WebUpdate$2$1" name="this$1"/>
  <method class="jd.utils.WebUpdate$2$1" name="java.lang.Object runSave()"/>
  <field class="jd.utils.WebUpdate$2" name="val$forceguiCall"/>
  <field class="jd.utils.WebUpdate$2" name="this$0"/>
  <field class="jd.utils.WebUpdate$2" name="val$guiPrgs"/>
  <field class="jd.utils.WebUpdate$2" name="val$files"/>
  <field class="jd.utils.WebUpdate$2" name="val$id"/>
  <field class="jd.utils.WebUpdate$2" name="val$updater"/>
  <method class="jd.utils.WebUpdate$2" name="void run()"/>
  <field class="jd.utils.WebUpdate$1" name="val$progress"/>
  <method class="jd.utils.WebUpdate$1" name="void run()"/>
  <class name="jd.utils.WebUpdate"/>
  <field class="jd.utils.WebUpdate" name="logger"/>
  <field class="jd.utils.WebUpdate" name="UPDATE_IN_PROGRESS"/>
  <field class="jd.utils.WebUpdate" name="DYNAMIC_PLUGINS_FINISHED"/>
  <field class="jd.utils.WebUpdate" name="unfilteredList"/>
  <method class="jd.utils.WebUpdate" name="void errorWait()"/>
  <method class="jd.utils.WebUpdate" name="void DynamicPluginsFinished()"/>
  <method class="jd.utils.WebUpdate" name="void doUpdateCheck(boolean)"/>
  <method class="jd.utils.WebUpdate" name="void doPluginUpdate(jd.update.WebUpdater, java.util.ArrayList)"/>
  <method class="jd.utils.WebUpdate" name="java.util.logging.Logger access$1()"/>
  <method class="jd.utils.WebUpdate" name="boolean access$4()"/>
  <method class="jd.utils.WebUpdate" name="java.lang.String getUpdaterMD5(int)"/>
  <method class="jd.utils.WebUpdate" name="void access$3(jd.utils.WebUpdate, jd.update.WebUpdater, java.util.ArrayList)"/>
  <method class="jd.utils.WebUpdate" name="void access$0(jd.update.WebUpdater, java.util.ArrayList)"/>
  <method class="jd.utils.WebUpdate" name="java.lang.String getUpdater(int)"/>
  <method class="jd.utils.WebUpdate" name="void access$2(boolean)"/>
  <method class="jd.utils.WebUpdate" name="void doUpdate(jd.update.WebUpdater, java.util.ArrayList)"/>
  <method class="jd.utils.WebUpdate" name="boolean updateUpdater()"/>
  <class name="jd.utils.Upload"/>
  <method class="jd.utils.Upload" name="java.lang.String toRapidshareComPremium(java.io.File, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.Upload" name="java.lang.String toPastebinCom(java.lang.String, java.lang.String)"/>
  <method class="jd.utils.Upload" name="java.lang.String toJDownloader(java.lang.String, java.lang.String)"/>
  <class name="jd.utils.Changelog$Change"/>
  <field class="jd.utils.Changelog$Change" name="this$0"/>
  <field class="jd.utils.Changelog$Change" name="authors"/>
  <field class="jd.utils.Changelog$Change" name="name"/>
  <field class="jd.utils.Changelog$Change" name="type"/>
  <field class="jd.utils.Changelog$Change" name="category"/>
  <field class="jd.utils.Changelog$Change" name="revisions"/>
  <method class="jd.utils.Changelog$Change" name="java.lang.String getType()"/>
  <method class="jd.utils.Changelog$Change" name="java.util.ArrayList getAuthors()"/>
  <method class="jd.utils.Changelog$Change" name="void addRevision(long)"/>
  <method class="jd.utils.Changelog$Change" name="void addAuthor(java.lang.String)"/>
  <method class="jd.utils.Changelog$Change" name="java.lang.String getCategory()"/>
  <method class="jd.utils.Changelog$Change" name="java.lang.String getName()"/>
  <method class="jd.utils.Changelog$Change" name="java.lang.String getCategory(java.lang.String)"/>
  <method class="jd.utils.Changelog$Change" name="void setType(char)"/>
  <method class="jd.utils.Changelog$Change" name="java.util.ArrayList getRevisions()"/>
  <class name="jd.utils.Changelog"/>
  <field class="jd.utils.Changelog" name="SVN_SRC"/>
  <method class="jd.utils.Changelog" name="void main(java.lang.String[])"/>
  <method class="jd.utils.Changelog" name="void load()"/>
  <class name="jd.utils.JDMediaConvert"/>
  <field class="jd.utils.JDMediaConvert" name="logger"/>
  <field class="jd.utils.JDMediaConvert" name="$SWITCH_TABLE$jd$gui$swing$components$ConvertDialog$ConversionMode"/>
  <field class="jd.utils.JDMediaConvert" name="TempExt"/>
  <method class="jd.utils.JDMediaConvert" name="boolean ConvertFile(jd.plugins.DownloadLink, jd.gui.swing.components.ConvertDialog$ConversionMode, jd.gui.swing.components.ConvertDialog$ConversionMode)"/>
  <method class="jd.utils.JDMediaConvert" name="int[] $SWITCH_TABLE$jd$gui$swing$components$ConvertDialog$ConversionMode()"/>
  <class name="jd.utils.Email$MailAuthenticator"/>
  <field class="jd.utils.Email$MailAuthenticator" name="user"/>
  <field class="jd.utils.Email$MailAuthenticator" name="password"/>
  <method class="jd.utils.Email$MailAuthenticator" name="javax.mail.PasswordAuthentication getPasswordAuthentication()"/>
  <class name="jd.utils.Email"/>
  <field class="jd.utils.Email" name="user"/>
  <field class="jd.utils.Email" name="senderName"/>
  <field class="jd.utils.Email" name="pass"/>
  <field class="jd.utils.Email" name="host"/>
  <field class="jd.utils.Email" name="senderEmail"/>
  <method class="jd.utils.Email" name="java.lang.String getSenderName()"/>
  <method class="jd.utils.Email" name="void sendEmail(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.Email" name="void setSender(java.lang.String, java.lang.String)"/>
  <class name="jd.utils.Replacer"/>
  <field class="jd.utils.Replacer" name="KEYS"/>
  <method class="jd.utils.Replacer" name="java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.utils.Replacer" name="java.lang.String[] getKeyList()"/>
  <method class="jd.utils.Replacer" name="void initKeys()"/>
  <method class="jd.utils.Replacer" name="java.lang.String insertVariables(java.lang.String)"/>
  <method class="jd.utils.Replacer" name="java.lang.String getReplacement(java.lang.String)"/>
  <method class="jd.utils.Replacer" name="java.lang.String getKey(int)"/>
  <class name="jd.router.reconnectrecorder.ProxyThread"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="renewbuffer"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="ishttps"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="incoming"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="buffer"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="outgoing"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="israw"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="steps"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="dowhat"/>
  <field class="jd.router.reconnectrecorder.ProxyThread" name="instance"/>
  <method class="jd.router.reconnectrecorder.ProxyThread" name="boolean dothis(int)"/>
  <method class="jd.router.reconnectrecorder.ProxyThread" name="void run()"/>
  <field class="jd.router.reconnectrecorder.Utils$1" name="val$buf"/>
  <method class="jd.router.reconnectrecorder.Utils$1" name="int read()"/>
  <method class="jd.router.reconnectrecorder.Utils$1" name="int read(byte[], int, int)"/>
  <class name="jd.router.reconnectrecorder.Utils"/>
  <method class="jd.router.reconnectrecorder.Utils" name="void rewriteHostHeader(jd.router.reconnectrecorder.ProxyThread)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="void rewriteConnectionHeader(jd.router.reconnectrecorder.ProxyThread)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="void rewriteRefererHeader(jd.router.reconnectrecorder.ProxyThread)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="java.lang.String readline(java.io.BufferedInputStream)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="java.nio.ByteBuffer readheader(java.io.InputStream)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="void rewriteLocationHeader(jd.router.reconnectrecorder.ProxyThread)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="void createStep(java.util.LinkedHashMap, java.lang.String, java.util.Vector, boolean, boolean)"/>
  <method class="jd.router.reconnectrecorder.Utils" name="java.io.InputStream newInputStream(java.nio.ByteBuffer)"/>
  <class name="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="imageProgress"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="strBad"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="strProgress"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="strGood"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="imageGood"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="imageBad"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="this$1"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="serialVersionUID"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus" name="void setStatus(int)"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$2" name="this$1"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$2" name="void run()"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$1" name="this$1"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$1" name="void run()"/>
  <class name="jd.router.reconnectrecorder.Gui$JDRRInfoPopup"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="this$0"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="reconnect_timer"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="statusicon"/>
  <field class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="serialVersionUID"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="long access$2(jd.router.reconnectrecorder.Gui$JDRRInfoPopup)"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="javax.swing.JComponent contentInit()"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="void packed()"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="javax.swing.JButton access$3(jd.router.reconnectrecorder.Gui$JDRRInfoPopup)"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$RRStatus access$0(jd.router.reconnectrecorder.Gui$JDRRInfoPopup)"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="jd.router.reconnectrecorder.Gui access$4(jd.router.reconnectrecorder.Gui$JDRRInfoPopup)"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="void startCheck()"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="void closePopup()"/>
  <method class="jd.router.reconnectrecorder.Gui$JDRRInfoPopup" name="void access$1(jd.router.reconnectrecorder.Gui$JDRRInfoPopup, long)"/>
  <class name="jd.router.reconnectrecorder.Gui"/>
  <field class="jd.router.reconnectrecorder.Gui" name="ip_after"/>
  <field class="jd.router.reconnectrecorder.Gui" name="serialVersionUID"/>
  <field class="jd.router.reconnectrecorder.Gui" name="reconnect_duration"/>
  <field class="jd.router.reconnectrecorder.Gui" name="user"/>
  <field class="jd.router.reconnectrecorder.Gui" name="check_intervall"/>
  <field class="jd.router.reconnectrecorder.Gui" name="ip"/>
  <field class="jd.router.reconnectrecorder.Gui" name="ip_before"/>
  <field class="jd.router.reconnectrecorder.Gui" name="routerip"/>
  <field class="jd.router.reconnectrecorder.Gui" name="rawmode"/>
  <field class="jd.router.reconnectrecorder.Gui" name="pass"/>
  <field class="jd.router.reconnectrecorder.Gui" name="saved"/>
  <field class="jd.router.reconnectrecorder.Gui" name="methode"/>
  <method class="jd.router.reconnectrecorder.Gui" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.router.reconnectrecorder.Gui" name="void access$6(jd.router.reconnectrecorder.Gui)"/>
  <method class="jd.router.reconnectrecorder.Gui" name="void save()"/>
  <method class="jd.router.reconnectrecorder.Gui" name="java.lang.String access$2(jd.router.reconnectrecorder.Gui)"/>
  <method class="jd.router.reconnectrecorder.Gui" name="javax.swing.JComponent contentInit()"/>
  <method class="jd.router.reconnectrecorder.Gui" name="void access$4(long)"/>
  <method class="jd.router.reconnectrecorder.Gui" name="long access$0()"/>
  <method class="jd.router.reconnectrecorder.Gui" name="java.lang.String access$3(jd.router.reconnectrecorder.Gui)"/>
  <method class="jd.router.reconnectrecorder.Gui" name="long access$5()"/>
  <method class="jd.router.reconnectrecorder.Gui" name="void access$1(jd.router.reconnectrecorder.Gui, java.lang.String)"/>
  <class name="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="serverip"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="Server_Socket"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="israw"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="port"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="ishttps"/>
  <method class="jd.router.reconnectrecorder.ReconnectRecorder$JDRRServer" name="void run()"/>
  <class name="jd.router.reconnectrecorder.ReconnectRecorder"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="running"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="steps"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="PROPERTY_PORT"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="auth"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="Server_Socket_HTTPS"/>
  <field class="jd.router.reconnectrecorder.ReconnectRecorder" name="Server_Socket_HTTP"/>
  <method class="jd.router.reconnectrecorder.ReconnectRecorder" name="void startServer(java.lang.String, boolean)"/>
  <method class="jd.router.reconnectrecorder.ReconnectRecorder" name="void stopServer()"/>
  <class name="jd.router.reconnectrecorder.Proxy"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="Current_Socket"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="ishttps"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="FORWARD"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="port"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="RECORD_HEADER"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="CHANGE_HEADER"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="israw"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="steps"/>
  <field class="jd.router.reconnectrecorder.Proxy" name="serverip"/>
  <method class="jd.router.reconnectrecorder.Proxy" name="void run()"/>
  <class name="jd.router.SQLRouterData"/>
  <field class="jd.router.SQLRouterData" name="br"/>
  <method class="jd.router.SQLRouterData" name="void main(java.lang.String[])"/>
  <method class="jd.router.SQLRouterData" name="jd.router.RInfo readString(java.lang.String)"/>
  <method class="jd.router.SQLRouterData" name="boolean writeLocalFile(java.io.File, java.lang.String)"/>
  <method class="jd.router.SQLRouterData" name="boolean haveUpnpReconnect(java.util.HashMap)"/>
  <method class="jd.router.SQLRouterData" name="void readFile(java.io.File)"/>
  <method class="jd.router.SQLRouterData" name="java.lang.String[] getNameFormUPnPSCPDs(java.util.HashMap)"/>
  <method class="jd.router.SQLRouterData" name="java.lang.String setPlaceHolder(java.lang.String)"/>
  <method class="jd.router.SQLRouterData" name="java.lang.String replaceTimeStamps(java.lang.String)"/>
  <class name="jd.router.RInfo"/>
  <field class="jd.router.RInfo" name="routerErrorPage"/>
  <field class="jd.router.RInfo" name="id"/>
  <field class="jd.router.RInfo" name="routerHost"/>
  <field class="jd.router.RInfo" name="serialVersionUID"/>
  <field class="jd.router.RInfo" name="routerMAC"/>
  <field class="jd.router.RInfo" name="routerIP"/>
  <field class="jd.router.RInfo" name="routerName"/>
  <field class="jd.router.RInfo" name="integrety"/>
  <field class="jd.router.RInfo" name="routerPageLoggedIn"/>
  <field class="jd.router.RInfo" name="haveUpnpReconnect"/>
  <field class="jd.router.RInfo" name="haveUpnp"/>
  <field class="jd.router.RInfo" name="setPlaceholder"/>
  <field class="jd.router.RInfo" name="reconnectMethodeClr"/>
  <field class="jd.router.RInfo" name="routerPage"/>
  <field class="jd.router.RInfo" name="pageHeader"/>
  <field class="jd.router.RInfo" name="reconnectMethode"/>
  <method class="jd.router.RInfo" name="int compare(jd.router.RInfo)"/>
  <method class="jd.router.RInfo" name="void setUPnPSCPDs(java.lang.String)"/>
  <method class="jd.router.RInfo" name="java.lang.String getReconnectMethodeClr()"/>
  <method class="jd.router.RInfo" name="int compareTo(java.lang.Object)"/>
  <method class="jd.router.RInfo" name="int getIntegrety()"/>
  <method class="jd.router.RInfo" name="void setReconnectMethodeClr(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setRouterPage(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setRouterMAC(java.lang.String)"/>
  <method class="jd.router.RInfo" name="java.lang.String getPageHeader()"/>
  <method class="jd.router.RInfo" name="java.lang.String getReconnectMethode()"/>
  <method class="jd.router.RInfo" name="void setId(int)"/>
  <method class="jd.router.RInfo" name="void setRouterName(java.lang.String)"/>
  <method class="jd.router.RInfo" name="boolean isHaveUpnp()"/>
  <method class="jd.router.RInfo" name="java.util.LinkedHashMap getHashMap()"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterErrorPage()"/>
  <method class="jd.router.RInfo" name="void setRouterPageLoggedIn(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setId(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setIntegrety(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void sendToServer()"/>
  <method class="jd.router.RInfo" name="void setIntegrety(int)"/>
  <method class="jd.router.RInfo" name="int compareTo(jd.router.RInfo)"/>
  <method class="jd.router.RInfo" name="int getId()"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterName()"/>
  <method class="jd.router.RInfo" name="void setRouterErrorPage(java.lang.String)"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterPage()"/>
  <method class="jd.router.RInfo" name="void setUPnPSCPDs(java.util.HashMap)"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterIP()"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterMAC()"/>
  <method class="jd.router.RInfo" name="void setRouterHost(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setHaveUpnpReconnect(boolean)"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterPageLoggedIn()"/>
  <method class="jd.router.RInfo" name="void setHaveUpnp(boolean)"/>
  <method class="jd.router.RInfo" name="java.lang.String getRouterHost()"/>
  <method class="jd.router.RInfo" name="int countHtmlTags()"/>
  <method class="jd.router.RInfo" name="void setRouterIP(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setPageHeader(java.lang.String)"/>
  <method class="jd.router.RInfo" name="void setReconnectMethode(java.lang.String)"/>
  <method class="jd.router.RInfo" name="boolean isHaveUpnpReconnect()"/>
  <field class="jd.router.RouterInfoCollector$5" name="val$ia"/>
  <field class="jd.router.RouterInfoCollector$5" name="val$br"/>
  <field class="jd.router.RouterInfoCollector$5" name="val$infoToCollect"/>
  <field class="jd.router.RouterInfoCollector$5" name="val$info"/>
  <method class="jd.router.RouterInfoCollector$5" name="void go()"/>
  <field class="jd.router.RouterInfoCollector$4" name="val$ia"/>
  <field class="jd.router.RouterInfoCollector$4" name="val$info"/>
  <method class="jd.router.RouterInfoCollector$4" name="void go()"/>
  <field class="jd.router.RouterInfoCollector$3" name="val$ia"/>
  <field class="jd.router.RouterInfoCollector$3" name="val$br"/>
  <field class="jd.router.RouterInfoCollector$3" name="val$info"/>
  <method class="jd.router.RouterInfoCollector$3" name="void go()"/>
  <field class="jd.router.RouterInfoCollector$2" name="val$ia"/>
  <field class="jd.router.RouterInfoCollector$2" name="val$info"/>
  <method class="jd.router.RouterInfoCollector$2" name="void go()"/>
  <field class="jd.router.RouterInfoCollector$1" name="val$ia"/>
  <field class="jd.router.RouterInfoCollector$1" name="val$info"/>
  <method class="jd.router.RouterInfoCollector$1" name="void go()"/>
  <class name="jd.router.RouterInfoCollector"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_ROUTERPAGE"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_MAC"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_METHODENAME"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_ROUTERSEARCH"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_ALL"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_UPNP"/>
  <field class="jd.router.RouterInfoCollector" name="RECONNECTTYPE_CLR"/>
  <field class="jd.router.RouterInfoCollector" name="RECONNECTTYPE_LIVE_HEADER"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_ROUTERERROR"/>
  <field class="jd.router.RouterInfoCollector" name="reconnectMethodeClr"/>
  <field class="jd.router.RouterInfoCollector" name="reconnectMethode"/>
  <field class="jd.router.RouterInfoCollector" name="PROPERTY_SHOW_ROUTERINFO_DIALOG"/>
  <field class="jd.router.RouterInfoCollector" name="RInfo_HOSTNAME"/>
  <method class="jd.router.RouterInfoCollector" name="void main(java.lang.String[])"/>
  <method class="jd.router.RouterInfoCollector" name="java.net.InetAddress getRouterIP()"/>
  <method class="jd.router.RouterInfoCollector" name="jd.router.RInfo getRInfo(int)"/>
  <method class="jd.router.RouterInfoCollector" name="boolean isClr()"/>
  <method class="jd.router.RouterInfoCollector" name="boolean isLiveheader()"/>
  <method class="jd.router.RouterInfoCollector" name="void showDialog()"/>
  <field class="jd.router.UPnPInfo$2" name="this$0"/>
  <field class="jd.router.UPnPInfo$2" name="val$c"/>
  <field class="jd.router.UPnPInfo$2" name="val$th"/>
  <method class="jd.router.UPnPInfo$2" name="void deviceSearchResponseReceived(org.cybergarage.upnp.ssdp.SSDPPacket)"/>
  <field class="jd.router.UPnPInfo$1" name="this$0"/>
  <field class="jd.router.UPnPInfo$1" name="val$c"/>
  <field class="jd.router.UPnPInfo$1" name="val$th"/>
  <field class="jd.router.UPnPInfo$1" name="val$waittime"/>
  <method class="jd.router.UPnPInfo$1" name="void go()"/>
  <class name="jd.router.UPnPInfo"/>
  <field class="jd.router.UPnPInfo" name="ssdpP"/>
  <field class="jd.router.UPnPInfo" name="met"/>
  <field class="jd.router.UPnPInfo" name="host"/>
  <field class="jd.router.UPnPInfo" name="SCPDs"/>
  <method class="jd.router.UPnPInfo" name="void main(java.lang.String[])"/>
  <method class="jd.router.UPnPInfo" name="void access$1(jd.router.UPnPInfo, org.cybergarage.upnp.ssdp.SSDPPacket)"/>
  <method class="jd.router.UPnPInfo" name="java.util.ArrayList createUpnpReconnect(java.util.HashMap, java.lang.String)"/>
  <method class="jd.router.UPnPInfo" name="java.net.InetAddress access$0(jd.router.UPnPInfo)"/>
  <method class="jd.router.UPnPInfo" name="java.util.ArrayList createUpnpReconnect(java.util.HashMap)"/>
  <method class="jd.router.UPnPInfo" name="void getSCPDURLs(java.lang.String)"/>
  <class name="jd.router.RouterData"/>
  <field class="jd.router.RouterData" name="logoff"/>
  <field class="jd.router.RouterData" name="connect"/>
  <field class="jd.router.RouterData" name="connectPostParams"/>
  <field class="jd.router.RouterData" name="ipAddressRegEx"/>
  <field class="jd.router.RouterData" name="serialVersionUID"/>
  <field class="jd.router.RouterData" name="loginType"/>
  <field class="jd.router.RouterData" name="routerName"/>
  <field class="jd.router.RouterData" name="ipAddressOffline"/>
  <field class="jd.router.RouterData" name="TYPE_WEB_POST"/>
  <field class="jd.router.RouterData" name="routerIP"/>
  <field class="jd.router.RouterData" name="disconnectRequestProperties"/>
  <field class="jd.router.RouterData" name="disconnectType"/>
  <field class="jd.router.RouterData" name="ipAddressSite"/>
  <field class="jd.router.RouterData" name="login"/>
  <field class="jd.router.RouterData" name="disconnectPostParams"/>
  <field class="jd.router.RouterData" name="TYPE_WEB_GET"/>
  <field class="jd.router.RouterData" name="loginProperties"/>
  <field class="jd.router.RouterData" name="connectRequestProperties"/>
  <field class="jd.router.RouterData" name="routerPort"/>
  <field class="jd.router.RouterData" name="loginPostParams"/>
  <field class="jd.router.RouterData" name="LOGIN_TYPE_AUTH"/>
  <field class="jd.router.RouterData" name="disconnect"/>
  <field class="jd.router.RouterData" name="connectType"/>
  <field class="jd.router.RouterData" name="logger"/>
  <method class="jd.router.RouterData" name="java.util.HashMap getLoginRequestProperties()"/>
  <method class="jd.router.RouterData" name="int getConnectType()"/>
  <method class="jd.router.RouterData" name="void setLoginRequestProperties(java.util.HashMap)"/>
  <method class="jd.router.RouterData" name="java.lang.String getConnectPostParams()"/>
  <method class="jd.router.RouterData" name="java.util.HashMap getConnectRequestProperties()"/>
  <method class="jd.router.RouterData" name="java.lang.String getDisconnectPostParams()"/>
  <method class="jd.router.RouterData" name="java.lang.String getLogoff()"/>
  <method class="jd.router.RouterData" name="void setRouterName(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getLoginPostParams()"/>
  <method class="jd.router.RouterData" name="void setIpAddressRegEx(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getConnect()"/>
  <method class="jd.router.RouterData" name="void setDisconnect(java.lang.String)"/>
  <method class="jd.router.RouterData" name="void setIpAddressOffline(java.lang.String)"/>
  <method class="jd.router.RouterData" name="void setLoginType(int)"/>
  <method class="jd.router.RouterData" name="void setDisconnectRequestProperties(java.util.HashMap)"/>
  <method class="jd.router.RouterData" name="void setLogin(java.lang.String)"/>
  <method class="jd.router.RouterData" name="void setConnectRequestProperties(java.util.HashMap)"/>
  <method class="jd.router.RouterData" name="java.lang.String getRouterName()"/>
  <method class="jd.router.RouterData" name="java.lang.String toString()"/>
  <method class="jd.router.RouterData" name="void setConnectType(int)"/>
  <method class="jd.router.RouterData" name="void setDisconnectPostParams(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.util.HashMap getDisconnectRequestProperties()"/>
  <method class="jd.router.RouterData" name="void setLogoff(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getIpAddressOffline()"/>
  <method class="jd.router.RouterData" name="int getDisconnectType()"/>
  <method class="jd.router.RouterData" name="java.lang.String getRouterIP()"/>
  <method class="jd.router.RouterData" name="void setIpAddressSite(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getIpAddressRegEx()"/>
  <method class="jd.router.RouterData" name="void setConnect(java.lang.String)"/>
  <method class="jd.router.RouterData" name="void setDisconnectType(int)"/>
  <method class="jd.router.RouterData" name="void setConnectPostParams(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getDisconnect()"/>
  <method class="jd.router.RouterData" name="void setRouterPort(int)"/>
  <method class="jd.router.RouterData" name="int getLoginType()"/>
  <method class="jd.router.RouterData" name="java.lang.String getIpAddressSite()"/>
  <method class="jd.router.RouterData" name="void setLoginPostParams(java.lang.String)"/>
  <method class="jd.router.RouterData" name="void setRouterIP(java.lang.String)"/>
  <method class="jd.router.RouterData" name="java.lang.String getLogin()"/>
  <method class="jd.router.RouterData" name="int getRouterPort()"/>
  <method class="jd.router.RouterData" name="java.lang.String getIPAdress(java.lang.String)"/>
  <class name="jd.router.RouterParser"/>
  <field class="jd.router.RouterParser" name="positionInFile"/>
  <field class="jd.router.RouterParser" name="logger"/>
  <field class="jd.router.RouterParser" name="readBuffer"/>
  <method class="jd.router.RouterParser" name="java.util.Vector parseFile(java.io.File)"/>
  <method class="jd.router.RouterParser" name="int getRequestType(java.lang.String)"/>
  <method class="jd.router.RouterParser" name="java.lang.String readNextString(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="java.lang.String getPlainURL(java.lang.String)"/>
  <method class="jd.router.RouterParser" name="java.lang.String getPostParams(java.lang.String)"/>
  <method class="jd.router.RouterParser" name="jd.router.RouterData parseSingleRouter(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="void routerDatToXML(java.io.File, java.io.File)"/>
  <method class="jd.router.RouterParser" name="byte readByte(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="int readInt(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="short readShort(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="long readLong(java.io.InputStream)"/>
  <method class="jd.router.RouterParser" name="java.util.Vector parseXMLFile(java.io.File)"/>
  <field class="jd.router.GetRouterInfo$9" name="val$user"/>
  <field class="jd.router.GetRouterInfo$9" name="val$routerScript"/>
  <field class="jd.router.GetRouterInfo$9" name="val$pass"/>
  <field class="jd.router.GetRouterInfo$9" name="val$routerInfo"/>
  <field class="jd.router.GetRouterInfo$9" name="val$progress"/>
  <field class="jd.router.GetRouterInfo$9" name="val$ip"/>
  <method class="jd.router.GetRouterInfo$9" name="void run()"/>
  <field class="jd.router.GetRouterInfo$8" name="this$0"/>
  <field class="jd.router.GetRouterInfo$8" name="val$val"/>
  <method class="jd.router.GetRouterInfo$8" name="java.lang.Object runSave()"/>
  <field class="jd.router.GetRouterInfo$2isalvs" name="this$0"/>
  <field class="jd.router.GetRouterInfo$2isalvs" name="meths"/>
  <field class="jd.router.GetRouterInfo$2isalvs" name="isAlv"/>
  <field class="jd.router.GetRouterInfo$2isalvs" name="SCPDs"/>
  <field class="jd.router.GetRouterInfo$7" name="this$0"/>
  <field class="jd.router.GetRouterInfo$7" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$7" name="val$infos"/>
  <method class="jd.router.GetRouterInfo$7" name="void go()"/>
  <field class="jd.router.GetRouterInfo$6" name="this$0"/>
  <field class="jd.router.GetRouterInfo$6" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$6" name="val$jupnp"/>
  <method class="jd.router.GetRouterInfo$6" name="void onThreadStarts(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.router.GetRouterInfo$6" name="void onThreadFinished(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.router.GetRouterInfo$6" name="void onThreadException(jd.nutils.Threader, jd.nutils.jobber.JDRunnable, java.lang.Exception)"/>
  <field class="jd.router.GetRouterInfo$5" name="this$0"/>
  <field class="jd.router.GetRouterInfo$5" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$5" name="val$infos"/>
  <method class="jd.router.GetRouterInfo$5" name="void go()"/>
  <field class="jd.router.GetRouterInfo$4" name="this$0"/>
  <field class="jd.router.GetRouterInfo$4" name="val$retmeths"/>
  <field class="jd.router.GetRouterInfo$4" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$4" name="val$infos"/>
  <method class="jd.router.GetRouterInfo$4" name="void go()"/>
  <field class="jd.router.GetRouterInfo$3" name="this$0"/>
  <field class="jd.router.GetRouterInfo$3" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$3" name="val$jupnp"/>
  <field class="jd.router.GetRouterInfo$3" name="val$th2"/>
  <method class="jd.router.GetRouterInfo$3" name="void onThreadStarts(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.router.GetRouterInfo$3" name="void onThreadFinished(jd.nutils.Threader, jd.nutils.jobber.JDRunnable)"/>
  <method class="jd.router.GetRouterInfo$3" name="void onThreadException(jd.nutils.Threader, jd.nutils.jobber.JDRunnable, java.lang.Exception)"/>
  <field class="jd.router.GetRouterInfo$2" name="this$0"/>
  <field class="jd.router.GetRouterInfo$2" name="val$isalv"/>
  <field class="jd.router.GetRouterInfo$2" name="val$infos"/>
  <method class="jd.router.GetRouterInfo$2" name="void go()"/>
  <field class="jd.router.GetRouterInfo$1isalvs" name="this$0"/>
  <field class="jd.router.GetRouterInfo$1isalvs" name="meths"/>
  <field class="jd.router.GetRouterInfo$1isalvs" name="isAlv"/>
  <field class="jd.router.GetRouterInfo$1isalvs" name="SCPDs"/>
  <field class="jd.router.GetRouterInfo$10" name="val$th"/>
  <field class="jd.router.GetRouterInfo$10" name="val$routerInfo"/>
  <method class="jd.router.GetRouterInfo$10" name="void run()"/>
  <method class="jd.router.GetRouterInfo$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.router.GetRouterInfo$1" name="int compare(java.util.Map$Entry, java.util.Map$Entry)"/>
  <class name="jd.router.GetRouterInfo"/>
  <field class="jd.router.GetRouterInfo" name="threader"/>
  <field class="jd.router.GetRouterInfo" name="adress"/>
  <field class="jd.router.GetRouterInfo" name="username"/>
  <field class="jd.router.GetRouterInfo" name="progressBar"/>
  <field class="jd.router.GetRouterInfo" name="testAll"/>
  <field class="jd.router.GetRouterInfo" name="password"/>
  <field class="jd.router.GetRouterInfo" name="th2"/>
  <field class="jd.router.GetRouterInfo" name="logger"/>
  <field class="jd.router.GetRouterInfo" name="cancel"/>
  <method class="jd.router.GetRouterInfo" name="boolean checkport80(java.lang.String)"/>
  <method class="jd.router.GetRouterInfo" name="void setProgress(int)"/>
  <method class="jd.router.GetRouterInfo" name="java.util.LinkedHashMap sortByIntegrety(java.util.Map)"/>
  <method class="jd.router.GetRouterInfo" name="void autoConfig(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"/>
  <method class="jd.router.GetRouterInfo" name="boolean isUpnp(java.lang.String, java.lang.String)"/>
  <method class="jd.router.GetRouterInfo" name="jd.gui.swing.dialog.ProgressDialog access$5(jd.router.GetRouterInfo)"/>
  <method class="jd.router.GetRouterInfo" name="jd.router.RInfo access$4(jd.router.GetRouterInfo, java.util.HashMap)"/>
  <method class="jd.router.GetRouterInfo" name="void cancel()"/>
  <method class="jd.router.GetRouterInfo" name="void access$1(jd.router.GetRouterInfo, int)"/>
  <method class="jd.router.GetRouterInfo" name="void setProgressText(java.lang.String)"/>
  <method class="jd.router.GetRouterInfo" name="boolean checkport(java.lang.String, int)"/>
  <method class="jd.router.GetRouterInfo" name="boolean access$3(jd.router.GetRouterInfo)"/>
  <method class="jd.router.GetRouterInfo" name="jd.router.RInfo getRouterData()"/>
  <method class="jd.router.GetRouterInfo" name="java.util.logging.Logger access$6(jd.router.GetRouterInfo)"/>
  <method class="jd.router.GetRouterInfo" name="java.util.ArrayList getInterfaces()"/>
  <method class="jd.router.GetRouterInfo" name="void access$0(jd.router.GetRouterInfo, java.lang.String)"/>
  <method class="jd.router.GetRouterInfo" name="void main(java.lang.String[])"/>
  <method class="jd.router.GetRouterInfo" name="java.util.Vector getRouterInfos()"/>
  <method class="jd.router.GetRouterInfo" name="jd.nutils.Threader access$2(jd.router.GetRouterInfo)"/>
  <method class="jd.router.GetRouterInfo" name="jd.router.RInfo checkrouters(java.util.HashMap)"/>
  <method class="jd.router.GetRouterInfo" name="boolean isFritzbox(java.lang.String)"/>
  <field class="jd.router.ConvertRouterData$1" name="this$0"/>
  <method class="jd.router.ConvertRouterData$1" name="int compare(java.lang.String[], java.lang.String[])"/>
  <method class="jd.router.ConvertRouterData$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <class name="jd.router.ConvertRouterData"/>
  <field class="jd.router.ConvertRouterData" name="cookie"/>
  <field class="jd.router.ConvertRouterData" name="ip"/>
  <field class="jd.router.ConvertRouterData" name="routerData"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String getType(int)"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String[] getUserPass(java.lang.String)"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String defaultRequest(int, java.lang.String, java.lang.String, java.util.HashMap)"/>
  <method class="jd.router.ConvertRouterData" name="jd.router.RouterData[] readRouterDat(java.io.File)"/>
  <method class="jd.router.ConvertRouterData" name="void saveTolist(java.util.Vector, java.io.File)"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String convertUserPass(java.lang.String)"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String getPoperties(java.util.HashMap)"/>
  <method class="jd.router.ConvertRouterData" name="void convertXml(java.io.File, java.io.File)"/>
  <method class="jd.router.ConvertRouterData" name="void main(java.lang.String[])"/>
  <method class="jd.router.ConvertRouterData" name="java.lang.String[] toLiveHeader(jd.router.RouterData)"/>
  <field class="jd.router.FindRouterIP$1" name="this$0"/>
  <field class="jd.router.FindRouterIP$1" name="val$ip"/>
  <method class="jd.router.FindRouterIP$1" name="void run()"/>
  <class name="jd.router.FindRouterIP"/>
  <method class="jd.router.FindRouterIP" name="java.lang.String findIP(jd.gui.swing.jdgui.settings.GUIConfigEntry)"/>
  <class name="jd.router.GetMacAdress"/>
  <method class="jd.router.GetMacAdress" name="void main(java.lang.String[])"/>
  <method class="jd.router.GetMacAdress" name="java.lang.String callArpToolDefault(java.lang.String)"/>
  <method class="jd.router.GetMacAdress" name="java.lang.String callArpTool(java.lang.String)"/>
  <method class="jd.router.GetMacAdress" name="java.lang.String callArpToolWindows(java.lang.String)"/>
  <method class="jd.router.GetMacAdress" name="java.lang.String getMacAddress()"/>
  <method class="jd.router.GetMacAdress" name="java.lang.String getMacAddress(java.net.InetAddress)"/>
  <class name="jd.controlling.interaction.InteractionTrigger"/>
  <field class="jd.controlling.interaction.InteractionTrigger" name="name"/>
  <field class="jd.controlling.interaction.InteractionTrigger" name="eventID"/>
  <field class="jd.controlling.interaction.InteractionTrigger" name="events"/>
  <field class="jd.controlling.interaction.InteractionTrigger" name="description"/>
  <field class="jd.controlling.interaction.InteractionTrigger" name="serialVersionUID"/>
  <method class="jd.controlling.interaction.InteractionTrigger" name="jd.controlling.interaction.InteractionTrigger[] getAllTrigger()"/>
  <method class="jd.controlling.interaction.InteractionTrigger" name="java.lang.String getDescription()"/>
  <method class="jd.controlling.interaction.InteractionTrigger" name="int getID()"/>
  <method class="jd.controlling.interaction.InteractionTrigger" name="java.lang.String getName()"/>
  <method class="jd.controlling.interaction.InteractionTrigger" name="java.lang.String toString()"/>
  <class name="jd.controlling.interaction.ExternExecute"/>
  <field class="jd.controlling.interaction.ExternExecute" name="serialVersionUID"/>
  <method class="jd.controlling.interaction.ExternExecute" name="void initConfig()"/>
  <method class="jd.controlling.interaction.ExternExecute" name="java.lang.String getInteractionName()"/>
  <method class="jd.controlling.interaction.ExternExecute" name="boolean doInteraction(java.lang.Object)"/>
  <method class="jd.controlling.interaction.ExternExecute" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.interaction.ExternExecute" name="java.lang.String toString()"/>
  <class name="jd.controlling.interaction.ResetLink"/>
  <field class="jd.controlling.interaction.ResetLink" name="serialVersionUID"/>
  <method class="jd.controlling.interaction.ResetLink" name="void initConfig()"/>
  <method class="jd.controlling.interaction.ResetLink" name="java.lang.String getInteractionName()"/>
  <method class="jd.controlling.interaction.ResetLink" name="boolean doInteraction(java.lang.Object)"/>
  <method class="jd.controlling.interaction.ResetLink" name="java.lang.String toString()"/>
  <class name="jd.controlling.interaction.Interaction"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_NO_EVENT"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_DOWNLOAD_FAILED"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_APPSTART"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_ALL_DOWNLOADS_FINISHED"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_BEFORE_RECONNECT"/>
  <field class="jd.controlling.interaction.Interaction" name="serialVersionUID"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_DOWNLOAD_PACKAGE_FINISHED"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_AFTER_RECONNECT"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_BEFORE_DOWNLOAD"/>
  <field class="jd.controlling.interaction.Interaction" name="trigger"/>
  <field class="jd.controlling.interaction.Interaction" name="interactionsRunning"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_AFTER_DOWNLOAD_AND_INTERACTIONS"/>
  <field class="jd.controlling.interaction.Interaction" name="CONFIG_INTERACTIONS"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_CONTAINER_DOWNLOAD"/>
  <field class="jd.controlling.interaction.Interaction" name="config"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_SINGLE_DOWNLOAD_FINISHED"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_LINKLIST_STRUCTURE_CHANGED"/>
  <field class="jd.controlling.interaction.Interaction" name="INTERACTION_EXIT"/>
  <field class="jd.controlling.interaction.Interaction" name="logger"/>
  <method class="jd.controlling.interaction.Interaction" name="jd.controlling.interaction.InteractionTrigger getTrigger()"/>
  <method class="jd.controlling.interaction.Interaction" name="java.lang.String getTriggerName()"/>
  <method class="jd.controlling.interaction.Interaction" name="jd.controlling.interaction.Interaction[] getInteractions(jd.controlling.interaction.InteractionTrigger)"/>
  <method class="jd.controlling.interaction.Interaction" name="void setTrigger(jd.controlling.interaction.InteractionTrigger)"/>
  <method class="jd.controlling.interaction.Interaction" name="void initTriggers()"/>
  <method class="jd.controlling.interaction.Interaction" name="boolean doInteraction(java.lang.Object)"/>
  <method class="jd.controlling.interaction.Interaction" name="java.lang.String getInteractionName()"/>
  <method class="jd.controlling.interaction.Interaction" name="java.util.Vector getSavedInteractions()"/>
  <method class="jd.controlling.interaction.Interaction" name="boolean areInteractionsInProgress()"/>
  <method class="jd.controlling.interaction.Interaction" name="jd.config.ConfigContainer getConfig()"/>
  <method class="jd.controlling.interaction.Interaction" name="void fireControlEvent(int, java.lang.Object)"/>
  <method class="jd.controlling.interaction.Interaction" name="void initConfig()"/>
  <method class="jd.controlling.interaction.Interaction" name="java.lang.String toString()"/>
  <method class="jd.controlling.interaction.Interaction" name="boolean interact(java.lang.Object)"/>
  <method class="jd.controlling.interaction.Interaction" name="jd.controlling.interaction.Interaction[] getInteractionList()"/>
  <method class="jd.controlling.interaction.Interaction" name="void handleInteraction(jd.controlling.interaction.InteractionTrigger, java.lang.Object)"/>
  <class name="jd.controlling.interaction.SimpleExecute"/>
  <field class="jd.controlling.interaction.SimpleExecute" name="serialVersionUID"/>
  <method class="jd.controlling.interaction.SimpleExecute" name="void initConfig()"/>
  <method class="jd.controlling.interaction.SimpleExecute" name="java.lang.String getInteractionName()"/>
  <method class="jd.controlling.interaction.SimpleExecute" name="boolean doInteraction(java.lang.Object)"/>
  <method class="jd.controlling.interaction.SimpleExecute" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.interaction.SimpleExecute" name="java.lang.String toString()"/>
  <class name="jd.controlling.interaction.JDExit"/>
  <field class="jd.controlling.interaction.JDExit" name="serialVersionUID"/>
  <method class="jd.controlling.interaction.JDExit" name="void initConfig()"/>
  <method class="jd.controlling.interaction.JDExit" name="java.lang.String getInteractionName()"/>
  <method class="jd.controlling.interaction.JDExit" name="boolean doInteraction(java.lang.Object)"/>
  <method class="jd.controlling.interaction.JDExit" name="java.lang.String toString()"/>
  <class name="jd.controlling.reconnect.BatchReconnect"/>
  <field class="jd.controlling.reconnect.BatchReconnect" name="PROPERTY_RECONNECT_EXECUTE_FOLDER"/>
  <field class="jd.controlling.reconnect.BatchReconnect" name="PROPERTY_TERMINAL"/>
  <field class="jd.controlling.reconnect.BatchReconnect" name="PROPERTY_BATCHTEXT"/>
  <field class="jd.controlling.reconnect.BatchReconnect" name="PROPERTY_IP_WAIT_FOR_RETURN"/>
  <field class="jd.controlling.reconnect.BatchReconnect" name="configuration"/>
  <method class="jd.controlling.reconnect.BatchReconnect" name="void initConfig()"/>
  <method class="jd.controlling.reconnect.BatchReconnect" name="boolean runCommands(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.reconnect.BatchReconnect" name="java.lang.String toString()"/>
  <class name="jd.controlling.reconnect.ReconnectMethod"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="BATCH"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="config"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="PARAM_IPCHECKWAITTIME"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="PARAM_WAITFORIPCHANGE"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="EXTERN"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="CLR"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="PARAM_RETRIES"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="logger"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="LIVEHEADER"/>
  <field class="jd.controlling.reconnect.ReconnectMethod" name="PARAM_RECONNECT_TYPE"/>
  <method class="jd.controlling.reconnect.ReconnectMethod" name="boolean doReconnectInteral(int)"/>
  <method class="jd.controlling.reconnect.ReconnectMethod" name="void initConfig()"/>
  <method class="jd.controlling.reconnect.ReconnectMethod" name="boolean runCommands(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.reconnect.ReconnectMethod" name="jd.config.ConfigContainer getConfig()"/>
  <method class="jd.controlling.reconnect.ReconnectMethod" name="boolean doReconnect()"/>
  <class name="jd.controlling.reconnect.ExternReconnect"/>
  <field class="jd.controlling.reconnect.ExternReconnect" name="PROPERTY_RECONNECT_PARAMETER"/>
  <field class="jd.controlling.reconnect.ExternReconnect" name="PROPERTY_RECONNECT_COMMAND"/>
  <field class="jd.controlling.reconnect.ExternReconnect" name="PROPERTY_IP_WAIT_FOR_RETURN"/>
  <field class="jd.controlling.reconnect.ExternReconnect" name="configuration"/>
  <method class="jd.controlling.reconnect.ExternReconnect" name="void initConfig()"/>
  <method class="jd.controlling.reconnect.ExternReconnect" name="boolean runCommands(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.reconnect.ExternReconnect" name="java.lang.String toString()"/>
  <field class="jd.controlling.reconnect.Reconnecter$1" name="val$startTime"/>
  <field class="jd.controlling.reconnect.Reconnecter$1" name="val$progress"/>
  <method class="jd.controlling.reconnect.Reconnecter$1" name="void run()"/>
  <class name="jd.controlling.reconnect.Reconnecter"/>
  <field class="jd.controlling.reconnect.Reconnecter" name="logger"/>
  <field class="jd.controlling.reconnect.Reconnecter" name="RECONNECT_REQUESTED"/>
  <field class="jd.controlling.reconnect.Reconnecter" name="CURRENT_IP"/>
  <field class="jd.controlling.reconnect.Reconnecter" name="LAST_UP_UPDATE_TIME"/>
  <field class="jd.controlling.reconnect.Reconnecter" name="RECONNECT_IN_PROGRESS"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean isReconnectRequested()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="void setCurrentIP(java.lang.String)"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="void toggleReconnect()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean isReconnecting()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean doReconnectIfRequestedInternal(boolean)"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean checkExternalIPChange()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean doReconnectIfRequested(boolean)"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean isReconnectPrefered()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="void setReconnectRequested(boolean)"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean waitForNewIP(long, boolean)"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean doReconnect()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="boolean doManualReconnect()"/>
  <method class="jd.controlling.reconnect.Reconnecter" name="void resetAllLinks()"/>
  <class name="jd.controlling.reconnect.HTTPLiveHeader"/>
  <field class="jd.controlling.reconnect.HTTPLiveHeader" name="headerProperties"/>
  <field class="jd.controlling.reconnect.HTTPLiveHeader" name="variables"/>
  <field class="jd.controlling.reconnect.HTTPLiveHeader" name="configuration"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="java.lang.String[] splitLines(java.lang.String)"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="java.util.ArrayList getLHScripts()"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="void initConfig()"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="void getVariables(java.lang.String, java.lang.String[], jd.http.Browser)"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="java.lang.String getModifiedVariable(java.lang.String)"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="boolean runCommands(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="jd.http.Browser doRequest(java.lang.String, jd.http.Browser, boolean, boolean)"/>
  <method class="jd.controlling.reconnect.HTTPLiveHeader" name="java.lang.String toString()"/>
  <class name="jd.controlling.JDLogger"/>
  <field class="jd.controlling.JDLogger" name="console"/>
  <field class="jd.controlling.JDLogger" name="LOGGER"/>
  <field class="jd.controlling.JDLogger" name="LOGGER_NAME"/>
  <method class="jd.controlling.JDLogger" name="void exception(java.lang.Throwable)"/>
  <method class="jd.controlling.JDLogger" name="void exception(java.util.logging.Level, java.lang.Throwable)"/>
  <method class="jd.controlling.JDLogger" name="void timestamp(java.lang.String)"/>
  <method class="jd.controlling.JDLogger" name="java.lang.String getStackTrace(java.lang.Throwable)"/>
  <method class="jd.controlling.JDLogger" name="void quickLog()"/>
  <method class="jd.controlling.JDLogger" name="java.lang.String getLog(java.util.logging.Level)"/>
  <method class="jd.controlling.JDLogger" name="void warning(java.lang.Object)"/>
  <method class="jd.controlling.JDLogger" name="java.util.logging.Logger getLogger()"/>
  <method class="jd.controlling.JDLogger" name="void removeConsoleHandler()"/>
  <method class="jd.controlling.JDLogger" name="void addHeader(java.lang.String)"/>
  <class name="jd.controlling.AccountController$ProviderMode"/>
  <field class="jd.controlling.AccountController$ProviderMode" name="ENUM$VALUES"/>
  <field class="jd.controlling.AccountController$ProviderMode" name="RR"/>
  <field class="jd.controlling.AccountController$ProviderMode" name="FIFO"/>
  <method class="jd.controlling.AccountController$ProviderMode" name="jd.controlling.AccountController$ProviderMode valueOf(java.lang.String)"/>
  <method class="jd.controlling.AccountController$ProviderMode" name="jd.controlling.AccountController$ProviderMode[] values()"/>
  <field class="jd.controlling.AccountController$2" name="this$0"/>
  <method class="jd.controlling.AccountController$2" name="void run()"/>
  <method class="jd.controlling.AccountController$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.controlling.AccountController$1" name="int compare(jd.plugins.Account, jd.plugins.Account)"/>
  <class name="jd.controlling.AccountController"/>
  <field class="jd.controlling.AccountController" name="broadcaster"/>
  <field class="jd.controlling.AccountController" name="serialVersionUID"/>
  <field class="jd.controlling.AccountController" name="asyncSaveIntervalTimer"/>
  <field class="jd.controlling.AccountController" name="lastballoon"/>
  <field class="jd.controlling.AccountController" name="hosteraccounts"/>
  <field class="jd.controlling.AccountController" name="providemode"/>
  <field class="jd.controlling.AccountController" name="$SWITCH_TABLE$jd$controlling$AccountController$ProviderMode"/>
  <field class="jd.controlling.AccountController" name="ballooninterval"/>
  <field class="jd.controlling.AccountController" name="saveinprogress"/>
  <field class="jd.controlling.AccountController" name="provider"/>
  <field class="jd.controlling.AccountController" name="compare_RR"/>
  <field class="jd.controlling.AccountController" name="waittimeAccountInfoUpdate"/>
  <field class="jd.controlling.AccountController" name="AccountLock"/>
  <field class="jd.controlling.AccountController" name="INSTANCE"/>
  <method class="jd.controlling.AccountController" name="jd.plugins.AccountInfo updateAccountInfo(jd.plugins.PluginForHost, jd.plugins.Account, boolean)"/>
  <method class="jd.controlling.AccountController" name="void removeListener(jd.controlling.AccountControllerListener)"/>
  <method class="jd.controlling.AccountController" name="int[] $SWITCH_TABLE$jd$controlling$AccountController$ProviderMode()"/>
  <method class="jd.controlling.AccountController" name="void saveAsync()"/>
  <method class="jd.controlling.AccountController" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.AccountController" name="java.util.TreeMap loadAccounts()"/>
  <method class="jd.controlling.AccountController" name="boolean hasAccounts(java.lang.String)"/>
  <method class="jd.controlling.AccountController" name="void saveSync()"/>
  <method class="jd.controlling.AccountController" name="java.lang.String getHosterName(jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="jd.controlling.AccountController$ProviderMode getProviderMode()"/>
  <method class="jd.controlling.AccountController" name="void addAccountProvider(jd.controlling.AccountProvider)"/>
  <method class="jd.controlling.AccountController" name="boolean vetoAccountGetEvent(java.lang.String, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="int validAccounts()"/>
  <method class="jd.controlling.AccountController" name="java.util.ArrayList getAllAccounts(java.lang.String)"/>
  <method class="jd.controlling.AccountController" name="jd.plugins.Account getValidAccount(jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.AccountController" name="boolean removeAccount(jd.plugins.PluginForHost, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="void importOldAccounts2()"/>
  <method class="jd.controlling.AccountController" name="void addAccount(java.lang.String, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="void setUpdateTime(long)"/>
  <method class="jd.controlling.AccountController" name="void removeAccountProvider(jd.controlling.AccountProvider)"/>
  <method class="jd.controlling.AccountController" name="void addListener(jd.controlling.AccountControllerListener)"/>
  <method class="jd.controlling.AccountController" name="void saveSyncnonThread()"/>
  <method class="jd.controlling.AccountController" name="jd.plugins.AccountInfo updateAccountInfo(java.lang.String, jd.plugins.Account, boolean)"/>
  <method class="jd.controlling.AccountController" name="void addAccount(jd.plugins.PluginForHost, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="void onAccountControllerEvent(jd.controlling.AccountControllerEvent)"/>
  <method class="jd.controlling.AccountController" name="void importOldAccounts()"/>
  <method class="jd.controlling.AccountController" name="boolean removeAccount(java.lang.String, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="java.util.ArrayList getAllAccounts(jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.AccountController" name="long getUpdateTime()"/>
  <method class="jd.controlling.AccountController" name="void setProviderMode(jd.controlling.AccountController$ProviderMode)"/>
  <method class="jd.controlling.AccountController" name="void throwUpdateEvent(jd.plugins.PluginForHost, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountController" name="jd.controlling.AccountController getInstance()"/>
  <method class="jd.controlling.AccountController" name="void importOld()"/>
  <class name="jd.controlling.LinkGrabberPackager"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat10"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat9"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat8"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat7"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat6"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat5"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat4"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat3"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat1"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat0"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat16"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat15"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat14"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat13"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat12"/>
  <field class="jd.controlling.LinkGrabberPackager" name="pat11"/>
  <method class="jd.controlling.LinkGrabberPackager" name="java.lang.String getNameMatch(java.lang.String, java.util.regex.Pattern)"/>
  <method class="jd.controlling.LinkGrabberPackager" name="int comparepackages(java.lang.String, java.lang.String)"/>
  <method class="jd.controlling.LinkGrabberPackager" name="java.lang.String cleanFileName(java.lang.String)"/>
  <method class="jd.controlling.LinkGrabberPackager" name="java.lang.String cutNameMatch(java.lang.String, java.util.regex.Pattern)"/>
  <class name="jd.controlling.CNL2"/>
  <method class="jd.controlling.CNL2" name="boolean checkText(java.lang.String)"/>
  <method class="jd.controlling.CNL2" name="boolean isExternInterfaceActive()"/>
  <class name="jd.controlling.DownloadControllerEvent"/>
  <field class="jd.controlling.DownloadControllerEvent" name="ADD_DOWNLOADLINK"/>
  <field class="jd.controlling.DownloadControllerEvent" name="REMOVE_FILPACKAGE"/>
  <field class="jd.controlling.DownloadControllerEvent" name="ADD_FILEPACKAGE"/>
  <field class="jd.controlling.DownloadControllerEvent" name="REFRESH_STRUCTURE"/>
  <field class="jd.controlling.DownloadControllerEvent" name="REMOVE_DOWNLOADLINK"/>
  <field class="jd.controlling.DownloadControllerEvent" name="REFRESH_ALL"/>
  <field class="jd.controlling.DownloadControllerEvent" name="REFRESH_SPECIFIC"/>
  <class name="jd.controlling.CaptchaController"/>
  <field class="jd.controlling.CaptchaController" name="methodname"/>
  <field class="jd.controlling.CaptchaController" name="host"/>
  <field class="jd.controlling.CaptchaController" name="explain"/>
  <field class="jd.controlling.CaptchaController" name="captchafile"/>
  <field class="jd.controlling.CaptchaController" name="suggest"/>
  <method class="jd.controlling.CaptchaController" name="boolean isMethodEnabled()"/>
  <method class="jd.controlling.CaptchaController" name="java.lang.String getCode(int)"/>
  <class name="jd.controlling.LinkCheckBroadcaster"/>
  <method class="jd.controlling.LinkCheckBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <method class="jd.controlling.LinkCheckBroadcaster" name="void fireEvent(jd.controlling.LinkCheckListener, jd.controlling.LinkCheckEvent)"/>
  <class name="jd.controlling.DataBox"/>
  <field class="jd.controlling.DataBox" name="serialVersionUID"/>
  <method class="jd.controlling.DataBox" name="java.util.Map$Entry getEntry(int)"/>
  <class name="jd.controlling.JDLogHandler"/>
  <field class="jd.controlling.JDLogHandler" name="HANDLER"/>
  <field class="jd.controlling.JDLogHandler" name="buffer"/>
  <method class="jd.controlling.JDLogHandler" name="jd.controlling.JDLogHandler getHandler()"/>
  <method class="jd.controlling.JDLogHandler" name="void publish(java.util.logging.LogRecord)"/>
  <method class="jd.controlling.JDLogHandler" name="void flush()"/>
  <method class="jd.controlling.JDLogHandler" name="void close()"/>
  <method class="jd.controlling.JDLogHandler" name="java.util.ArrayList getBuffer()"/>
  <field class="jd.controlling.DistributeData$2DThread" name="this$0"/>
  <field class="jd.controlling.DistributeData$2DThread" name="decryptableLinks"/>
  <field class="jd.controlling.DistributeData$2DThread" name="plg"/>
  <field class="jd.controlling.DistributeData$2DThread" name="val$decryptedLinks"/>
  <method class="jd.controlling.DistributeData$2DThread" name="void run()"/>
  <method class="jd.controlling.DistributeData$2DThread" name="void go()"/>
  <field class="jd.controlling.DistributeData$1DThread" name="this$0"/>
  <field class="jd.controlling.DistributeData$1DThread" name="val$newdecryptedLinks"/>
  <field class="jd.controlling.DistributeData$1DThread" name="link"/>
  <field class="jd.controlling.DistributeData$1DThread" name="val$notdecryptedLinks"/>
  <method class="jd.controlling.DistributeData$1DThread" name="void run()"/>
  <method class="jd.controlling.DistributeData$1DThread" name="void go()"/>
  <class name="jd.controlling.DistributeData"/>
  <field class="jd.controlling.DistributeData" name="orgData"/>
  <field class="jd.controlling.DistributeData" name="foundPasswords"/>
  <field class="jd.controlling.DistributeData" name="filterNormalHTTP"/>
  <field class="jd.controlling.DistributeData" name="disableDeepEmergencyScan"/>
  <field class="jd.controlling.DistributeData" name="data"/>
  <field class="jd.controlling.DistributeData" name="linkData"/>
  <field class="jd.controlling.DistributeData" name="hideGrabber"/>
  <field class="jd.controlling.DistributeData" name="logger"/>
  <field class="jd.controlling.DistributeData" name="autostart"/>
  <method class="jd.controlling.DistributeData" name="void reformDataString()"/>
  <method class="jd.controlling.DistributeData" name="java.util.ArrayList findLinksIntern()"/>
  <method class="jd.controlling.DistributeData" name="java.lang.String getLoadLinkString(java.lang.String)"/>
  <method class="jd.controlling.DistributeData" name="boolean checkdecrypted(java.util.ArrayList, java.util.ArrayList, jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.DistributeData" name="jd.controlling.DistributeData setHideGrabber(boolean)"/>
  <method class="jd.controlling.DistributeData" name="java.util.logging.Logger access$0()"/>
  <method class="jd.controlling.DistributeData" name="void setLinkData(java.util.ArrayList)"/>
  <method class="jd.controlling.DistributeData" name="java.util.ArrayList handleDecryptPlugins()"/>
  <method class="jd.controlling.DistributeData" name="jd.controlling.DistributeData setFilterNormalHTTP(boolean)"/>
  <method class="jd.controlling.DistributeData" name="java.lang.String getRestData()"/>
  <method class="jd.controlling.DistributeData" name="java.util.ArrayList getLinkData()"/>
  <method class="jd.controlling.DistributeData" name="void useHoster(java.util.ArrayList)"/>
  <method class="jd.controlling.DistributeData" name="jd.controlling.DistributeData setDisableDeepEmergencyScan(boolean)"/>
  <method class="jd.controlling.DistributeData" name="java.util.ArrayList findLinks()"/>
  <method class="jd.controlling.DistributeData" name="void run()"/>
  <method class="jd.controlling.DistributeData" name="void loadAndParse(java.lang.String)"/>
  <method class="jd.controlling.DistributeData" name="boolean hasPluginFor(java.lang.String, boolean)"/>
  <method class="jd.controlling.DistributeData" name="jd.controlling.DistributeData setAutostart(boolean)"/>
  <method class="jd.controlling.DistributeData" name="java.util.ArrayList quickHosterCheck(java.lang.String)"/>
  <method class="jd.controlling.DistributeData" name="boolean deepDecrypt(java.util.ArrayList)"/>
  <field class="jd.controlling.ByteBufferController$2" name="this$0"/>
  <method class="jd.controlling.ByteBufferController$2" name="void run()"/>
  <field class="jd.controlling.ByteBufferController$1" name="this$0"/>
  <method class="jd.controlling.ByteBufferController$1" name="int compare(jd.controlling.ByteBufferEntry, jd.controlling.ByteBufferEntry)"/>
  <method class="jd.controlling.ByteBufferController$1" name="int compare(java.lang.Object, java.lang.Object)"/>
  <class name="jd.controlling.ByteBufferController"/>
  <field class="jd.controlling.ByteBufferController" name="bufferpool"/>
  <field class="jd.controlling.ByteBufferController" name="MAXBUFFERSIZE"/>
  <field class="jd.controlling.ByteBufferController" name="INSTANCE"/>
  <field class="jd.controlling.ByteBufferController" name="bufferEntries"/>
  <field class="jd.controlling.ByteBufferController" name="bytebuffercomp"/>
  <method class="jd.controlling.ByteBufferController" name="void putByteBufferEntry(jd.controlling.ByteBufferEntry)"/>
  <method class="jd.controlling.ByteBufferController" name="jd.controlling.ByteBufferEntry getByteBufferEntry(int)"/>
  <method class="jd.controlling.ByteBufferController" name="void printDebug()"/>
  <method class="jd.controlling.ByteBufferController" name="jd.controlling.ByteBufferController getInstance()"/>
  <class name="jd.controlling.ProgressControllerListener"/>
  <method class="jd.controlling.ProgressControllerListener" name="void onProgressControllerEvent(jd.controlling.ProgressControllerEvent)"/>
  <class name="jd.controlling.DownloadInformations"/>
  <field class="jd.controlling.DownloadInformations" name="runningDownloads"/>
  <field class="jd.controlling.DownloadInformations" name="currentDownloadSize"/>
  <field class="jd.controlling.DownloadInformations" name="downloadLinks"/>
  <field class="jd.controlling.DownloadInformations" name="finishedDownloads"/>
  <field class="jd.controlling.DownloadInformations" name="disabledDownloads"/>
  <field class="jd.controlling.DownloadInformations" name="packages"/>
  <field class="jd.controlling.DownloadInformations" name="duplicateDownloads"/>
  <field class="jd.controlling.DownloadInformations" name="totalDownloadSize"/>
  <method class="jd.controlling.DownloadInformations" name="void addDownloadLinks(int)"/>
  <method class="jd.controlling.DownloadInformations" name="long getTotalDownloadSize()"/>
  <method class="jd.controlling.DownloadInformations" name="void addRunningDownloads(int)"/>
  <method class="jd.controlling.DownloadInformations" name="void reset()"/>
  <method class="jd.controlling.DownloadInformations" name="int getFinishedDownloads()"/>
  <method class="jd.controlling.DownloadInformations" name="void addDisabledDownloads(int)"/>
  <method class="jd.controlling.DownloadInformations" name="int getDownloadCount()"/>
  <method class="jd.controlling.DownloadInformations" name="void addPackages(int)"/>
  <method class="jd.controlling.DownloadInformations" name="int getDuplicateDownloads()"/>
  <method class="jd.controlling.DownloadInformations" name="long getCurrentDownloadSize()"/>
  <method class="jd.controlling.DownloadInformations" name="void addCurrentDownloadSize(long)"/>
  <method class="jd.controlling.DownloadInformations" name="int getRunningDownloads()"/>
  <method class="jd.controlling.DownloadInformations" name="void addFinishedDownloads(int)"/>
  <method class="jd.controlling.DownloadInformations" name="int getDisabledDownloads()"/>
  <method class="jd.controlling.DownloadInformations" name="void addTotalDownloadSize(long)"/>
  <method class="jd.controlling.DownloadInformations" name="void addDuplicateDownloads(int)"/>
  <method class="jd.controlling.DownloadInformations" name="int getPackagesCount()"/>
  <class name="jd.controlling.LinkGrabberPackagingEvent"/>
  <method class="jd.controlling.LinkGrabberPackagingEvent" name="void attachToPackagesSecondStage(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberPackagingEvent" name="void attachToPackagesFirstStage(jd.plugins.DownloadLink)"/>
  <field class="jd.controlling.LinkCheck$3" name="this$0"/>
  <method class="jd.controlling.LinkCheck$3" name="void run()"/>
  <field class="jd.controlling.LinkCheck$2" name="this$0"/>
  <method class="jd.controlling.LinkCheck$2" name="void run()"/>
  <field class="jd.controlling.LinkCheck$1" name="this$0"/>
  <field class="jd.controlling.LinkCheck$1" name="val$lock"/>
  <field class="jd.controlling.LinkCheck$1" name="val$check"/>
  <method class="jd.controlling.LinkCheck$1" name="void onLinkCheckEvent(jd.controlling.LinkCheckEvent)"/>
  <class name="jd.controlling.LinkCheck$CheckThread"/>
  <field class="jd.controlling.LinkCheck$CheckThread" name="this$0"/>
  <field class="jd.controlling.LinkCheck$CheckThread" name="links"/>
  <method class="jd.controlling.LinkCheck$CheckThread" name="void run()"/>
  <method class="jd.controlling.LinkCheck$CheckThread" name="void go()"/>
  <class name="jd.controlling.LinkCheck"/>
  <field class="jd.controlling.LinkCheck" name="broadcaster"/>
  <field class="jd.controlling.LinkCheck" name="checkRunning"/>
  <field class="jd.controlling.LinkCheck" name="linksToCheck"/>
  <field class="jd.controlling.LinkCheck" name="pc"/>
  <field class="jd.controlling.LinkCheck" name="checkThread"/>
  <field class="jd.controlling.LinkCheck" name="checkJobbers"/>
  <field class="jd.controlling.LinkCheck" name="INSTANCE"/>
  <field class="jd.controlling.LinkCheck" name="checkTimer"/>
  <method class="jd.controlling.LinkCheck" name="void checkLinksandWait(java.util.ArrayList)"/>
  <method class="jd.controlling.LinkCheck" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.LinkCheck" name="void checkHosterList(java.util.ArrayList)"/>
  <method class="jd.controlling.LinkCheck" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <method class="jd.controlling.LinkCheck" name="void onProgressControllerEvent(jd.controlling.ProgressControllerEvent)"/>
  <method class="jd.controlling.LinkCheck" name="boolean isRunning()"/>
  <method class="jd.controlling.LinkCheck" name="void abortLinkCheck()"/>
  <method class="jd.controlling.LinkCheck" name="void access$2(jd.controlling.LinkCheck, boolean)"/>
  <method class="jd.controlling.LinkCheck" name="void checkLinks(java.util.ArrayList, boolean)"/>
  <method class="jd.controlling.LinkCheck" name="java.util.ArrayList access$1(jd.controlling.LinkCheck)"/>
  <method class="jd.controlling.LinkCheck" name="void access$0(jd.controlling.LinkCheck, java.util.ArrayList)"/>
  <method class="jd.controlling.LinkCheck" name="jd.controlling.LinkCheck getLinkChecker()"/>
  <method class="jd.controlling.LinkCheck" name="void startLinkCheck()"/>
  <class name="jd.controlling.LogFormatter"/>
  <field class="jd.controlling.LogFormatter" name="lastThreadID"/>
  <field class="jd.controlling.LogFormatter" name="lineSeparator"/>
  <field class="jd.controlling.LogFormatter" name="longTimestamp"/>
  <field class="jd.controlling.LogFormatter" name="dat"/>
  <field class="jd.controlling.LogFormatter" name="sb"/>
  <method class="jd.controlling.LogFormatter" name="java.lang.String format(java.util.logging.LogRecord)"/>
  <field class="jd.controlling.PasswordListController$1" name="this$0"/>
  <method class="jd.controlling.PasswordListController$1" name="void run()"/>
  <class name="jd.controlling.PasswordListController"/>
  <field class="jd.controlling.PasswordListController" name="LIST2"/>
  <field class="jd.controlling.PasswordListController" name="CONFIG"/>
  <field class="jd.controlling.PasswordListController" name="asyncSaveIntervalTimer"/>
  <field class="jd.controlling.PasswordListController" name="saveinprogress"/>
  <field class="jd.controlling.PasswordListController" name="INSTANCE"/>
  <method class="jd.controlling.PasswordListController" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.PasswordListController" name="void setPasswordList(java.util.ArrayList)"/>
  <method class="jd.controlling.PasswordListController" name="void saveSync()"/>
  <method class="jd.controlling.PasswordListController" name="void save()"/>
  <method class="jd.controlling.PasswordListController" name="void setList(java.lang.String)"/>
  <method class="jd.controlling.PasswordListController" name="java.lang.String getList()"/>
  <method class="jd.controlling.PasswordListController" name="jd.controlling.PasswordListController getInstance()"/>
  <method class="jd.controlling.PasswordListController" name="void addPasswords(java.lang.String[])"/>
  <method class="jd.controlling.PasswordListController" name="void removeDups()"/>
  <method class="jd.controlling.PasswordListController" name="void saveAsync()"/>
  <method class="jd.controlling.PasswordListController" name="void onDownloadControllerEvent(jd.controlling.DownloadControllerEvent)"/>
  <method class="jd.controlling.PasswordListController" name="void addPassword(java.lang.String, boolean)"/>
  <method class="jd.controlling.PasswordListController" name="java.util.ArrayList getPasswordList()"/>
  <method class="jd.controlling.PasswordListController" name="void addPasswords(java.util.Collection)"/>
  <class name="jd.controlling.ByteBufferEntry"/>
  <field class="jd.controlling.ByteBufferEntry" name="unused"/>
  <field class="jd.controlling.ByteBufferEntry" name="buffer"/>
  <field class="jd.controlling.ByteBufferEntry" name="size"/>
  <method class="jd.controlling.ByteBufferEntry" name="jd.controlling.ByteBufferEntry getbytebufferentry(int)"/>
  <method class="jd.controlling.ByteBufferEntry" name="void clear()"/>
  <method class="jd.controlling.ByteBufferEntry" name="int size()"/>
  <method class="jd.controlling.ByteBufferEntry" name="jd.controlling.ByteBufferEntry getByteBufferEntry(int)"/>
  <method class="jd.controlling.ByteBufferEntry" name="int capacity()"/>
  <method class="jd.controlling.ByteBufferEntry" name="void limit(int)"/>
  <method class="jd.controlling.ByteBufferEntry" name="void clear(int)"/>
  <method class="jd.controlling.ByteBufferEntry" name="void setUnused()"/>
  <class name="jd.controlling.LinkCheckEvent"/>
  <field class="jd.controlling.LinkCheckEvent" name="STOP"/>
  <field class="jd.controlling.LinkCheckEvent" name="AFTER_CHECK"/>
  <field class="jd.controlling.LinkCheckEvent" name="ABORT"/>
  <field class="jd.controlling.LinkCheckEvent" name="START"/>
  <class name="jd.controlling.AccountProvider"/>
  <method class="jd.controlling.AccountProvider" name="java.util.ArrayList provideAccountsFor(java.lang.String)"/>
  <class name="jd.controlling.JDBroadcasterUnused"/>
  <field class="jd.controlling.JDBroadcasterUnused" name="listener"/>
  <field class="jd.controlling.JDBroadcasterUnused" name="methodMap"/>
  <method class="jd.controlling.JDBroadcasterUnused" name="void fire(java.lang.String, java.lang.Object[])"/>
  <method class="jd.controlling.JDBroadcasterUnused" name="void removeListener(java.util.EventListener)"/>
  <method class="jd.controlling.JDBroadcasterUnused" name="void add(java.util.EventListener)"/>
  <method class="jd.controlling.JDBroadcasterUnused" name="java.util.ArrayList getListener()"/>
  <method class="jd.controlling.JDBroadcasterUnused" name="java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[])"/>
  <class name="jd.controlling.LinkGrabberControllerBroadcaster"/>
  <method class="jd.controlling.LinkGrabberControllerBroadcaster" name="void fireEvent(jd.controlling.LinkGrabberControllerListener, jd.controlling.LinkGrabberControllerEvent)"/>
  <method class="jd.controlling.LinkGrabberControllerBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.controlling.DynamicPluginInterface"/>
  <method class="jd.controlling.DynamicPluginInterface" name="void execute()"/>
  <class name="jd.controlling.LinkGrabberControllerListener"/>
  <method class="jd.controlling.LinkGrabberControllerListener" name="void onLinkGrabberControllerEvent(jd.controlling.LinkGrabberControllerEvent)"/>
  <class name="jd.controlling.ProgressControllerEvent"/>
  <field class="jd.controlling.ProgressControllerEvent" name="CANCEL"/>
  <field class="jd.controlling.ProgressControllerEvent" name="SUCCESSFULL"/>
  <class name="jd.controlling.AccountControllerListener"/>
  <method class="jd.controlling.AccountControllerListener" name="boolean vetoAccountGetEvent(java.lang.String, jd.plugins.Account)"/>
  <method class="jd.controlling.AccountControllerListener" name="void onAccountControllerEvent(jd.controlling.AccountControllerEvent)"/>
  <class name="jd.controlling.LinkGrabberControllerEvent"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="ADD_FILEPACKAGE"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="REMOVE_FILEPACKAGE"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="REFRESH_STRUCTURE"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="ADDED"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="EMPTY"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="FILTER_CHANGED"/>
  <field class="jd.controlling.LinkGrabberControllerEvent" name="NEW_LINKS"/>
  <class name="jd.controlling.SpeedMeter"/>
  <field class="jd.controlling.SpeedMeter" name="bytes"/>
  <field class="jd.controlling.SpeedMeter" name="capacity"/>
  <field class="jd.controlling.SpeedMeter" name="lastSpeed"/>
  <field class="jd.controlling.SpeedMeter" name="lock"/>
  <field class="jd.controlling.SpeedMeter" name="times"/>
  <field class="jd.controlling.SpeedMeter" name="c"/>
  <method class="jd.controlling.SpeedMeter" name="void addSpeedValue(long, long)"/>
  <method class="jd.controlling.SpeedMeter" name="int getSpeed()"/>
  <field class="jd.controlling.SingleDownloadController$1" name="this$0"/>
  <field class="jd.controlling.SingleDownloadController$1" name="val$downloadLink2"/>
  <method class="jd.controlling.SingleDownloadController$1" name="java.lang.Object runSave()"/>
  <class name="jd.controlling.SingleDownloadController"/>
  <field class="jd.controlling.SingleDownloadController" name="downloadLink"/>
  <field class="jd.controlling.SingleDownloadController" name="linkStatus"/>
  <field class="jd.controlling.SingleDownloadController" name="logger"/>
  <field class="jd.controlling.SingleDownloadController" name="startTime"/>
  <field class="jd.controlling.SingleDownloadController" name="currentPlugin"/>
  <field class="jd.controlling.SingleDownloadController" name="WAIT_TIME_ON_CONNECTION_LOSS"/>
  <field class="jd.controlling.SingleDownloadController" name="aborted"/>
  <field class="jd.controlling.SingleDownloadController" name="DUPELOCK"/>
  <method class="jd.controlling.SingleDownloadController" name="void showAGBDialog(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorChunkloadFailed(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onDownloadFinishedSuccessFull(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorFatal(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="jd.plugins.DownloadLink getDownloadLink()"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorAGBNotSigned(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="jd.plugins.PluginForHost getCurrentPlugin()"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorIncomplete(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void fireControlEvent(jd.event.ControlEvent)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorCaptcha(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorDownloadTemporarilyUnavailable(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorFileExists(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="jd.controlling.SingleDownloadController abortDownload()"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorNoConnection(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="boolean isAborted()"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorIPWaittime(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorLocalIO(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorFileNotFound(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorPremium(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void retry(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorLinkBlock(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void run()"/>
  <method class="jd.controlling.SingleDownloadController" name="void fireControlEvent(int, java.lang.Object)"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorPluginDefect(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.SingleDownloadController" name="void handlePlugin()"/>
  <method class="jd.controlling.SingleDownloadController" name="void onErrorHostTemporarilyUnavailable(jd.plugins.DownloadLink, jd.plugins.PluginForHost)"/>
  <field class="jd.controlling.HTACCESSController$1" name="this$0"/>
  <method class="jd.controlling.HTACCESSController$1" name="void run()"/>
  <class name="jd.controlling.HTACCESSController"/>
  <field class="jd.controlling.HTACCESSController" name="CONFIG"/>
  <field class="jd.controlling.HTACCESSController" name="LIST"/>
  <field class="jd.controlling.HTACCESSController" name="asyncSaveIntervalTimer"/>
  <field class="jd.controlling.HTACCESSController" name="saveinprogress"/>
  <field class="jd.controlling.HTACCESSController" name="INSTANCE"/>
  <method class="jd.controlling.HTACCESSController" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.HTACCESSController" name="void saveSync()"/>
  <method class="jd.controlling.HTACCESSController" name="void save()"/>
  <method class="jd.controlling.HTACCESSController" name="java.lang.String get(java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="java.lang.String getList()"/>
  <method class="jd.controlling.HTACCESSController" name="java.util.HashMap getPasswordList()"/>
  <method class="jd.controlling.HTACCESSController" name="void setList(java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="void access$0(jd.controlling.HTACCESSController, boolean)"/>
  <method class="jd.controlling.HTACCESSController" name="void add(java.lang.String, java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="java.lang.String[] getUserDatafromBasicauth(java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="void saveAsync()"/>
  <method class="jd.controlling.HTACCESSController" name="void add(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="void remove(java.lang.String)"/>
  <method class="jd.controlling.HTACCESSController" name="jd.controlling.HTACCESSController getInstance()"/>
  <class name="jd.controlling.AccountProviderBroadcaster"/>
  <method class="jd.controlling.AccountProviderBroadcaster" name="java.util.ArrayList collectAccountsFor(jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.AccountProviderBroadcaster" name="void fireEvent(jd.controlling.AccountProvider, jd.controlling.AccountProviderEvent)"/>
  <method class="jd.controlling.AccountProviderBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <field class="jd.controlling.DownloadController$1" name="this$0"/>
  <method class="jd.controlling.DownloadController$1" name="void run()"/>
  <class name="jd.controlling.DownloadController"/>
  <field class="jd.controlling.DownloadController" name="broadcaster"/>
  <field class="jd.controlling.DownloadController" name="MOVE_DOWN"/>
  <field class="jd.controlling.DownloadController" name="MOVE_BEFORE"/>
  <field class="jd.controlling.DownloadController" name="asyncSaveIntervalTimer"/>
  <field class="jd.controlling.DownloadController" name="controller"/>
  <field class="jd.controlling.DownloadController" name="packages"/>
  <field class="jd.controlling.DownloadController" name="MOVE_END"/>
  <field class="jd.controlling.DownloadController" name="MOVE_BOTTOM"/>
  <field class="jd.controlling.DownloadController" name="saveinprogress"/>
  <field class="jd.controlling.DownloadController" name="ControllerLock"/>
  <field class="jd.controlling.DownloadController" name="MOVE_AFTER"/>
  <field class="jd.controlling.DownloadController" name="logger"/>
  <field class="jd.controlling.DownloadController" name="MOVE_BEGIN"/>
  <field class="jd.controlling.DownloadController" name="MOVE_TOP"/>
  <field class="jd.controlling.DownloadController" name="INSTANCE"/>
  <field class="jd.controlling.DownloadController" name="MOVE_UP"/>
  <method class="jd.controlling.DownloadController" name="void onFilePackageEvent(jd.plugins.FilePackageEvent)"/>
  <method class="jd.controlling.DownloadController" name="java.util.ArrayList splitByFilePackage(java.util.ArrayList)"/>
  <method class="jd.controlling.DownloadController" name="void saveDownloadLinksAsync()"/>
  <method class="jd.controlling.DownloadController" name="jd.controlling.DownloadController getInstance()"/>
  <method class="jd.controlling.DownloadController" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <method class="jd.controlling.DownloadController" name="void move(java.lang.Object, java.lang.Object, byte)"/>
  <method class="jd.controlling.DownloadController" name="java.util.ArrayList getAllDownloadLinks()"/>
  <method class="jd.controlling.DownloadController" name="jd.plugins.DownloadLink getFirstLinkThatBlocks(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.DownloadController" name="java.util.ArrayList loadDownloadLinks()"/>
  <method class="jd.controlling.DownloadController" name="void saveDownloadLinksSyncnonThread()"/>
  <method class="jd.controlling.DownloadController" name="int addPackageAt(jd.plugins.FilePackage, int, int)"/>
  <method class="jd.controlling.DownloadController" name="void onDownloadControllerEvent(jd.controlling.DownloadControllerEvent)"/>
  <method class="jd.controlling.DownloadController" name="void removePackage(jd.plugins.FilePackage)"/>
  <method class="jd.controlling.DownloadController" name="void addPackage(jd.plugins.FilePackage)"/>
  <method class="jd.controlling.DownloadController" name="void fireGlobalUpdate()"/>
  <method class="jd.controlling.DownloadController" name="java.util.ArrayList getPackages()"/>
  <method class="jd.controlling.DownloadController" name="void addAll(java.util.ArrayList)"/>
  <method class="jd.controlling.DownloadController" name="void fireStructureUpdate()"/>
  <method class="jd.controlling.DownloadController" name="void saveDownloadLinksSync()"/>
  <method class="jd.controlling.DownloadController" name="int indexOf(jd.plugins.FilePackage)"/>
  <method class="jd.controlling.DownloadController" name="void initDownloadLinks()"/>
  <method class="jd.controlling.DownloadController" name="void addAllAt(java.util.ArrayList, int)"/>
  <method class="jd.controlling.DownloadController" name="javax.swing.Timer access$0(jd.controlling.DownloadController)"/>
  <method class="jd.controlling.DownloadController" name="void removeListener(jd.controlling.DownloadControllerListener)"/>
  <method class="jd.controlling.DownloadController" name="void fireDownloadLinkUpdate(java.lang.Object)"/>
  <method class="jd.controlling.DownloadController" name="void getDownloadStatus(jd.controlling.DownloadInformations)"/>
  <method class="jd.controlling.DownloadController" name="int size()"/>
  <method class="jd.controlling.DownloadController" name="boolean hasDownloadLinkwithURL(java.lang.String)"/>
  <method class="jd.controlling.DownloadController" name="void addListener(jd.controlling.DownloadControllerListener)"/>
  <class name="jd.controlling.DownloadControllerListener"/>
  <method class="jd.controlling.DownloadControllerListener" name="void onDownloadControllerEvent(jd.controlling.DownloadControllerEvent)"/>
  <class name="jd.controlling.LinkCheckListener"/>
  <method class="jd.controlling.LinkCheckListener" name="void onLinkCheckEvent(jd.controlling.LinkCheckEvent)"/>
  <class name="jd.controlling.LinkGrabberDistributeEvent"/>
  <method class="jd.controlling.LinkGrabberDistributeEvent" name="void addLinks(java.util.ArrayList, boolean, boolean)"/>
  <field class="jd.controlling.JDController$3$1" name="val$pc"/>
  <field class="jd.controlling.JDController$3$1" name="this$1"/>
  <method class="jd.controlling.JDController$3$1" name="void onProgressControllerEvent(jd.controlling.ProgressControllerEvent)"/>
  <field class="jd.controlling.JDController$3" name="this$0"/>
  <method class="jd.controlling.JDController$3" name="void run()"/>
  <field class="jd.controlling.JDController$2" name="this$0"/>
  <field class="jd.controlling.JDController$2" name="val$file"/>
  <field class="jd.controlling.JDController$2" name="val$autostart"/>
  <field class="jd.controlling.JDController$2" name="val$hideGrabber"/>
  <method class="jd.controlling.JDController$2" name="void run()"/>
  <field class="jd.controlling.JDController$1" name="this$0"/>
  <method class="jd.controlling.JDController$1" name="void run()"/>
  <field class="jd.controlling.JDController$EventSender$1" name="this$1"/>
  <method class="jd.controlling.JDController$EventSender$1" name="void run()"/>
  <class name="jd.controlling.JDController$EventSender"/>
  <field class="jd.controlling.JDController$EventSender" name="this$0"/>
  <field class="jd.controlling.JDController$EventSender" name="eventStart"/>
  <field class="jd.controlling.JDController$EventSender" name="MAX_EVENT_TIME"/>
  <field class="jd.controlling.JDController$EventSender" name="watchDog"/>
  <field class="jd.controlling.JDController$EventSender" name="currentListener"/>
  <field class="jd.controlling.JDController$EventSender" name="event"/>
  <field class="jd.controlling.JDController$EventSender" name="waitFlag"/>
  <method class="jd.controlling.JDController$EventSender" name="jd.event.ControlEvent access$2(jd.controlling.JDController$EventSender)"/>
  <method class="jd.controlling.JDController$EventSender" name="void run()"/>
  <method class="jd.controlling.JDController$EventSender" name="jd.controlling.JDController access$3(jd.controlling.JDController$EventSender)"/>
  <method class="jd.controlling.JDController$EventSender" name="long access$0(jd.controlling.JDController$EventSender)"/>
  <method class="jd.controlling.JDController$EventSender" name="jd.event.ControlListener access$1(jd.controlling.JDController$EventSender)"/>
  <class name="jd.controlling.JDController"/>
  <field class="jd.controlling.JDController" name="delayMap"/>
  <field class="jd.controlling.JDController" name="INIT_STATUS_COMPLETE"/>
  <field class="jd.controlling.JDController" name="SHUTDOWNLOCK"/>
  <field class="jd.controlling.JDController" name="waitingUpdates"/>
  <field class="jd.controlling.JDController" name="controlListener"/>
  <field class="jd.controlling.JDController" name="initStatus"/>
  <field class="jd.controlling.JDController" name="removeList"/>
  <field class="jd.controlling.JDController" name="alreadyAutostart"/>
  <field class="jd.controlling.JDController" name="lastDownloadFinished"/>
  <field class="jd.controlling.JDController" name="eventSender"/>
  <field class="jd.controlling.JDController" name="logger"/>
  <field class="jd.controlling.JDController" name="INSTANCE"/>
  <field class="jd.controlling.JDController" name="eventQueue"/>
  <method class="jd.controlling.JDController" name="void prepareShutdown(boolean)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getDownloadLinksByNamePattern(java.lang.String)"/>
  <method class="jd.controlling.JDController" name="jd.controlling.JDController getInstance()"/>
  <method class="jd.controlling.JDController" name="int getForbiddenReconnectDownloadNum()"/>
  <method class="jd.controlling.JDController" name="int getSpeedMeter()"/>
  <method class="jd.controlling.JDController" name="void exit()"/>
  <method class="jd.controlling.JDController" name="void removeControlListener(jd.event.ControlListener)"/>
  <method class="jd.controlling.JDController" name="void addControlListener(jd.event.ControlListener)"/>
  <method class="jd.controlling.JDController" name="void setWaitingUpdates(java.util.ArrayList)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList access$1(jd.controlling.JDController)"/>
  <method class="jd.controlling.JDController" name="void syncDatabase()"/>
  <method class="jd.controlling.JDController" name="void saveDLC(java.io.File, java.util.ArrayList)"/>
  <method class="jd.controlling.JDController" name="jd.plugins.DownloadLink getDownloadLinkByFileOutput(java.io.File, java.lang.Integer)"/>
  <method class="jd.controlling.JDController" name="void loadContainerFile(java.io.File, boolean, boolean)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getPackages()"/>
  <method class="jd.controlling.JDController" name="boolean isContainerFile(java.io.File)"/>
  <method class="jd.controlling.JDController" name="void setInitStatus(int)"/>
  <method class="jd.controlling.JDController" name="void fireControlEvent(int, java.lang.Object)"/>
  <method class="jd.controlling.JDController" name="void autostartDownloadsonStartup()"/>
  <method class="jd.controlling.JDController" name="void fireControlEvent(jd.event.ControlEvent)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getDownloadLinks(jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.JDController" name="jd.controlling.JDController$EventSender getEventSender()"/>
  <method class="jd.controlling.JDController" name="void controlEvent(jd.event.ControlEvent)"/>
  <method class="jd.controlling.JDController" name="java.lang.String callService(java.lang.String, java.lang.String)"/>
  <method class="jd.controlling.JDController" name="void loadContainerFile(java.io.File)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getContainerLinks(java.io.File)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getWaitingUpdates()"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList access$3(jd.controlling.JDController)"/>
  <method class="jd.controlling.JDController" name="void waitDelayExit()"/>
  <method class="jd.controlling.JDController" name="java.lang.String getLastFinishedFile()"/>
  <method class="jd.controlling.JDController" name="java.util.logging.Logger access$0(jd.controlling.JDController)"/>
  <method class="jd.controlling.JDController" name="java.lang.String encryptDLC(java.lang.String)"/>
  <method class="jd.controlling.JDController" name="jd.plugins.DownloadLink getLastFinishedDownloadLink()"/>
  <method class="jd.controlling.JDController" name="int getInitStatus()"/>
  <method class="jd.controlling.JDController" name="void distributeLinks(java.lang.String)"/>
  <method class="jd.controlling.JDController" name="java.lang.String requestDelayExit(java.lang.String)"/>
  <method class="jd.controlling.JDController" name="void releaseDelayExit(java.lang.String)"/>
  <method class="jd.controlling.JDController" name="void fireControlEventDirect(jd.event.ControlEvent)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList access$2(jd.controlling.JDController)"/>
  <method class="jd.controlling.JDController" name="java.util.ArrayList getDownloadLinksByPathPattern(java.lang.String)"/>
  <class name="jd.controlling.AccountControllerBroadcaster"/>
  <method class="jd.controlling.AccountControllerBroadcaster" name="void fireEvent(jd.controlling.AccountControllerListener, jd.controlling.AccountControllerEvent)"/>
  <method class="jd.controlling.AccountControllerBroadcaster" name="boolean fireEvent(jd.event.JDEvent)"/>
  <method class="jd.controlling.AccountControllerBroadcaster" name="boolean fireEvent(jd.controlling.AccountControllerEvent)"/>
  <method class="jd.controlling.AccountControllerBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.controlling.ProgressControllerBroadcaster"/>
  <method class="jd.controlling.ProgressControllerBroadcaster" name="void fireEvent(jd.controlling.ProgressControllerListener, jd.controlling.ProgressControllerEvent)"/>
  <method class="jd.controlling.ProgressControllerBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <class name="jd.controlling.AccountControllerEvent"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_EXPIRED"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_GET"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_ADDED"/>
  <field class="jd.controlling.AccountControllerEvent" name="host"/>
  <field class="jd.controlling.AccountControllerEvent" name="account"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_INVALID"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_REMOVED"/>
  <field class="jd.controlling.AccountControllerEvent" name="ACCOUNT_UPDATE"/>
  <method class="jd.controlling.AccountControllerEvent" name="java.lang.String getHost()"/>
  <method class="jd.controlling.AccountControllerEvent" name="jd.plugins.Account getAccount()"/>
  <class name="jd.controlling.ListController"/>
  <method class="jd.controlling.ListController" name="java.lang.String getList()"/>
  <method class="jd.controlling.ListController" name="void setList(java.lang.String)"/>
  <class name="jd.controlling.ClipboardHandler"/>
  <field class="jd.controlling.ClipboardHandler" name="oldText"/>
  <field class="jd.controlling.ClipboardHandler" name="oldFiles"/>
  <field class="jd.controlling.ClipboardHandler" name="enabled"/>
  <field class="jd.controlling.ClipboardHandler" name="tempdisabled"/>
  <field class="jd.controlling.ClipboardHandler" name="waitFlag"/>
  <field class="jd.controlling.ClipboardHandler" name="clipboard"/>
  <field class="jd.controlling.ClipboardHandler" name="INSTANCE"/>
  <method class="jd.controlling.ClipboardHandler" name="boolean isEnabled()"/>
  <method class="jd.controlling.ClipboardHandler" name="void toggleActivation()"/>
  <method class="jd.controlling.ClipboardHandler" name="void setOldText(java.lang.String)"/>
  <method class="jd.controlling.ClipboardHandler" name="void run()"/>
  <method class="jd.controlling.ClipboardHandler" name="void controlEvent(jd.event.ControlEvent)"/>
  <method class="jd.controlling.ClipboardHandler" name="jd.controlling.ClipboardHandler getClipboard()"/>
  <method class="jd.controlling.ClipboardHandler" name="boolean setEnabled(boolean)"/>
  <method class="jd.controlling.ClipboardHandler" name="void setTempDisabled(boolean)"/>
  <class name="jd.controlling.Optimizer"/>
  <field class="jd.controlling.Optimizer" name="url_links"/>
  <field class="jd.controlling.Optimizer" name="INSTANCE2"/>
  <field class="jd.controlling.Optimizer" name="lock"/>
  <field class="jd.controlling.Optimizer" name="INSTANCE"/>
  <method class="jd.controlling.Optimizer" name="java.util.ArrayList getLinkswithURL(java.lang.String)"/>
  <method class="jd.controlling.Optimizer" name="void init()"/>
  <method class="jd.controlling.Optimizer" name="jd.controlling.Optimizer getINSTANCE(jd.controlling.DownloadController)"/>
  <class name="jd.controlling.DownloadControllerBroadcaster"/>
  <method class="jd.controlling.DownloadControllerBroadcaster" name="void fireEvent(java.util.EventListener, jd.event.JDEvent)"/>
  <method class="jd.controlling.DownloadControllerBroadcaster" name="void fireEvent(jd.controlling.DownloadControllerListener, jd.controlling.DownloadControllerEvent)"/>
  <field class="jd.controlling.DownloadWatchDog$1" name="this$0"/>
  <method class="jd.controlling.DownloadWatchDog$1" name="void run()"/>
  <class name="jd.controlling.DownloadWatchDog$STATE"/>
  <field class="jd.controlling.DownloadWatchDog$STATE" name="ENUM$VALUES"/>
  <field class="jd.controlling.DownloadWatchDog$STATE" name="STOPPING"/>
  <field class="jd.controlling.DownloadWatchDog$STATE" name="NOT_RUNNING"/>
  <field class="jd.controlling.DownloadWatchDog$STATE" name="RUNNING"/>
  <method class="jd.controlling.DownloadWatchDog$STATE" name="jd.controlling.DownloadWatchDog$STATE valueOf(java.lang.String)"/>
  <method class="jd.controlling.DownloadWatchDog$STATE" name="jd.controlling.DownloadWatchDog$STATE[] values()"/>
  <class name="jd.controlling.DownloadWatchDog"/>
  <field class="jd.controlling.DownloadWatchDog" name="activeDownloads"/>
  <field class="jd.controlling.DownloadWatchDog" name="totalSpeed"/>
  <field class="jd.controlling.DownloadWatchDog" name="stopMark"/>
  <field class="jd.controlling.DownloadWatchDog" name="hiddenstopMark"/>
  <field class="jd.controlling.DownloadWatchDog" name="CountLOCK"/>
  <field class="jd.controlling.DownloadWatchDog" name="INSTANCE"/>
  <field class="jd.controlling.DownloadWatchDog" name="downloadStatus"/>
  <field class="jd.controlling.DownloadWatchDog" name="StartStopSync"/>
  <field class="jd.controlling.DownloadWatchDog" name="watchDogThread"/>
  <field class="jd.controlling.DownloadWatchDog" name="HOST_TEMP_UNAVAIL"/>
  <field class="jd.controlling.DownloadWatchDog" name="aborted"/>
  <field class="jd.controlling.DownloadWatchDog" name="HOST_IPBLOCK"/>
  <field class="jd.controlling.DownloadWatchDog" name="aborting"/>
  <field class="jd.controlling.DownloadWatchDog" name="nostopMark"/>
  <field class="jd.controlling.DownloadWatchDog" name="stopMarkTracker"/>
  <field class="jd.controlling.DownloadWatchDog" name="DownloadLOCK"/>
  <field class="jd.controlling.DownloadWatchDog" name="activeHosts"/>
  <field class="jd.controlling.DownloadWatchDog" name="paused"/>
  <field class="jd.controlling.DownloadWatchDog" name="downloadssincelastStart"/>
  <field class="jd.controlling.DownloadWatchDog" name="DownloadControllers"/>
  <field class="jd.controlling.DownloadWatchDog" name="dlc"/>
  <field class="jd.controlling.DownloadWatchDog" name="logger"/>
  <method class="jd.controlling.DownloadWatchDog" name="void onDownloadControllerEvent(jd.controlling.DownloadControllerEvent)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void pauseDownloads(boolean)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void access$5(jd.controlling.DownloadWatchDog, int)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void access$1(jd.controlling.DownloadWatchDog, boolean)"/>
  <method class="jd.controlling.DownloadWatchDog" name="jd.controlling.DownloadWatchDog access$0()"/>
  <method class="jd.controlling.DownloadWatchDog" name="long getRemainingTempUnavailWaittime(java.lang.String)"/>
  <method class="jd.controlling.DownloadWatchDog" name="long getRemainingIPBlockWaittime(java.lang.String)"/>
  <method class="jd.controlling.DownloadWatchDog" name="jd.controlling.DownloadController access$4(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean access$3(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void activateDownload(jd.plugins.DownloadLink, jd.controlling.SingleDownloadController)"/>
  <method class="jd.controlling.DownloadWatchDog" name="int activeDownloadControllers()"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean isStopMarkSet()"/>
  <method class="jd.controlling.DownloadWatchDog" name="int getSimultanDownloadNumPerHost()"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean reachedStopMark()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void setIPBlockWaittime(java.lang.String, long)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean startDownloads()"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean isDownloadLinkActive(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.DownloadWatchDog" name="int getSimultanDownloadNum()"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean stopDownloads()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void resetTempUnavailWaittime(java.lang.String)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean newDLStartAllowed()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void startDownloadThread(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void startWatchDogThread()"/>
  <method class="jd.controlling.DownloadWatchDog" name="int getTotalSpeed()"/>
  <method class="jd.controlling.DownloadWatchDog" name="jd.controlling.DownloadWatchDog getInstance()"/>
  <method class="jd.controlling.DownloadWatchDog" name="jd.plugins.DownloadLink getNextDownloadLink()"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean isPaused()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void deactivateDownload(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void controlEvent(jd.event.ControlEvent)"/>
  <method class="jd.controlling.DownloadWatchDog" name="int setDownloadActive()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void access$2(jd.controlling.DownloadWatchDog, boolean)"/>
  <method class="jd.controlling.DownloadWatchDog" name="java.util.logging.Logger access$9(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean isStopMark(java.lang.Object)"/>
  <method class="jd.controlling.DownloadWatchDog" name="int access$8(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void abort()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void clearDownloadListStatus()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void forceDownload(java.util.ArrayList)"/>
  <method class="jd.controlling.DownloadWatchDog" name="int access$6(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="java.util.ArrayList getRunningDownloads()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void toggleStopMark(java.lang.Object)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void resetIPBlockWaittime(java.lang.String)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void setStopMark(java.lang.Object)"/>
  <method class="jd.controlling.DownloadWatchDog" name="java.lang.Object getStopMark()"/>
  <method class="jd.controlling.DownloadWatchDog" name="int activeDownloadsbyHosts(jd.plugins.PluginForHost)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void toggleStartStop()"/>
  <method class="jd.controlling.DownloadWatchDog" name="void setTotalSpeed(int)"/>
  <method class="jd.controlling.DownloadWatchDog" name="void setTempUnavailWaittime(java.lang.String, long)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean access$7(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="boolean access$10(jd.controlling.DownloadWatchDog)"/>
  <method class="jd.controlling.DownloadWatchDog" name="jd.controlling.DownloadWatchDog$STATE getDownloadStatus()"/>
  <method class="jd.controlling.DownloadWatchDog" name="int getDownloadssincelastStart()"/>
  <method class="jd.controlling.DownloadWatchDog" name="int getActiveDownloads()"/>
  <field class="jd.controlling.ProgressController$1" name="this$0"/>
  <field class="jd.controlling.ProgressController$1" name="val$instance"/>
  <field class="jd.controlling.ProgressController$1" name="val$waittimer"/>
  <method class="jd.controlling.ProgressController$1" name="void run()"/>
  <class name="jd.controlling.ProgressController"/>
  <field class="jd.controlling.ProgressController" name="source"/>
  <field class="jd.controlling.ProgressController" name="broadcaster"/>
  <field class="jd.controlling.ProgressController" name="indeterminate"/>
  <field class="jd.controlling.ProgressController" name="id"/>
  <field class="jd.controlling.ProgressController" name="statusText"/>
  <field class="jd.controlling.ProgressController" name="idCounter"/>
  <field class="jd.controlling.ProgressController" name="finished"/>
  <field class="jd.controlling.ProgressController" name="abort"/>
  <field class="jd.controlling.ProgressController" name="finalizing"/>
  <field class="jd.controlling.ProgressController" name="icon"/>
  <field class="jd.controlling.ProgressController" name="max"/>
  <field class="jd.controlling.ProgressController" name="currentValue"/>
  <field class="jd.controlling.ProgressController" name="progresscolor"/>
  <method class="jd.controlling.ProgressController" name="void onMessage(jd.event.MessageEvent)"/>
  <method class="jd.controlling.ProgressController" name="long access$1(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.ProgressController" name="boolean isFinished()"/>
  <method class="jd.controlling.ProgressController" name="void setSource(java.lang.Object)"/>
  <method class="jd.controlling.ProgressController" name="void setColor(java.awt.Color)"/>
  <method class="jd.controlling.ProgressController" name="java.lang.String getStatusText()"/>
  <method class="jd.controlling.ProgressController" name="void setIcon(javax.swing.Icon)"/>
  <method class="jd.controlling.ProgressController" name="void access$2(jd.controlling.ProgressController, long)"/>
  <method class="jd.controlling.ProgressController" name="boolean isAbort()"/>
  <method class="jd.controlling.ProgressController" name="java.awt.Color getColor()"/>
  <method class="jd.controlling.ProgressController" name="java.lang.String toString()"/>
  <method class="jd.controlling.ProgressController" name="void doFinalize()"/>
  <method class="jd.controlling.ProgressController" name="void setRange(long)"/>
  <method class="jd.controlling.ProgressController" name="void fireChanges()"/>
  <method class="jd.controlling.ProgressController" name="void doFinalize(long)"/>
  <method class="jd.controlling.ProgressController" name="long getMax()"/>
  <method class="jd.controlling.ProgressController" name="void setStatus(long)"/>
  <method class="jd.controlling.ProgressController" name="java.lang.Object getSource()"/>
  <method class="jd.controlling.ProgressController" name="long getValue()"/>
  <method class="jd.controlling.ProgressController" name="void fireCancelAction()"/>
  <method class="jd.controlling.ProgressController" name="void decrease(long)"/>
  <method class="jd.controlling.ProgressController" name="void increase(long)"/>
  <method class="jd.controlling.ProgressController" name="boolean isInterruptable()"/>
  <method class="jd.controlling.ProgressController" name="void addToMax(long)"/>
  <method class="jd.controlling.ProgressController" name="javax.swing.Icon getIcon()"/>
  <method class="jd.controlling.ProgressController" name="int getPercent()"/>
  <method class="jd.controlling.ProgressController" name="java.lang.Object access$3(jd.controlling.ProgressController)"/>
  <method class="jd.controlling.ProgressController" name="void access$0(jd.controlling.ProgressController, boolean)"/>
  <method class="jd.controlling.ProgressController" name="void setIndeterminate(boolean)"/>
  <method class="jd.controlling.ProgressController" name="boolean isFinalizing()"/>
  <method class="jd.controlling.ProgressController" name="boolean isIndeterminate()"/>
  <method class="jd.controlling.ProgressController" name="int getID()"/>
  <method class="jd.controlling.ProgressController" name="void setStatusText(java.lang.String)"/>
  <method class="jd.controlling.ProgressController" name="jd.event.JDBroadcaster getBroadcaster()"/>
  <class name="jd.controlling.ExceptionHandler"/>
  <field class="jd.controlling.ExceptionHandler" name="logger"/>
  <method class="jd.controlling.ExceptionHandler" name="void uncaughtException(java.lang.Thread, java.lang.Throwable)"/>
  <method class="jd.controlling.ExceptionHandler" name="void handle(java.lang.Throwable)"/>
  <method class="jd.controlling.ExceptionHandler" name="void register(java.util.logging.Logger)"/>
  <field class="jd.controlling.LinkGrabberController$2" name="this$0"/>
  <method class="jd.controlling.LinkGrabberController$2" name="int compare(java.lang.Object, java.lang.Object)"/>
  <method class="jd.controlling.LinkGrabberController$2" name="int compare(jd.plugins.DownloadLink, jd.plugins.DownloadLink)"/>
  <field class="jd.controlling.LinkGrabberController$1" name="this$0"/>
  <method class="jd.controlling.LinkGrabberController$1" name="void onPropertyChanged(jd.config.Property, java.lang.String)"/>
  <class name="jd.controlling.LinkGrabberController"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_BEGIN"/>
  <field class="jd.controlling.LinkGrabberController" name="customizedpackager"/>
  <field class="jd.controlling.LinkGrabberController" name="PARAM_CONTROLPOSITION"/>
  <field class="jd.controlling.LinkGrabberController" name="FP_FILTERED"/>
  <field class="jd.controlling.LinkGrabberController" name="broadcaster"/>
  <field class="jd.controlling.LinkGrabberController" name="IGNORE_LIST"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_TOP"/>
  <field class="jd.controlling.LinkGrabberController" name="PARAM_INFOPANEL_ONLINKGRAB"/>
  <field class="jd.controlling.LinkGrabberController" name="PARAM_ONLINECHECK"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_AFTER"/>
  <field class="jd.controlling.LinkGrabberController" name="PARAM_USE_CNL2"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_BOTTOM"/>
  <field class="jd.controlling.LinkGrabberController" name="filter"/>
  <field class="jd.controlling.LinkGrabberController" name="INSTANCE"/>
  <field class="jd.controlling.LinkGrabberController" name="cpl"/>
  <field class="jd.controlling.LinkGrabberController" name="DONTFORCEPACKAGENAME"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_BEFORE"/>
  <field class="jd.controlling.LinkGrabberController" name="packages"/>
  <field class="jd.controlling.LinkGrabberController" name="FP_UNSORTED"/>
  <field class="jd.controlling.LinkGrabberController" name="ControllerLock"/>
  <field class="jd.controlling.LinkGrabberController" name="MOVE_END"/>
  <field class="jd.controlling.LinkGrabberController" name="FP_OFFLINE"/>
  <field class="jd.controlling.LinkGrabberController" name="FP_UNCHECKED"/>
  <field class="jd.controlling.LinkGrabberController" name="CONFIG"/>
  <field class="jd.controlling.LinkGrabberController" name="extensionFilter"/>
  <field class="jd.controlling.LinkGrabberController" name="logger"/>
  <field class="jd.controlling.LinkGrabberController" name="distributer"/>
  <method class="jd.controlling.LinkGrabberController" name="void attachToPackagesSecondStage(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="java.lang.String[] getLinkFilterPattern()"/>
  <method class="jd.controlling.LinkGrabberController" name="void onLinkGrabberControllerEvent(jd.controlling.LinkGrabberControllerEvent)"/>
  <method class="jd.controlling.LinkGrabberController" name="java.util.HashSet getExtensionFilter()"/>
  <method class="jd.controlling.LinkGrabberController" name="java.lang.String getSimString(java.lang.String, java.lang.String)"/>
  <method class="jd.controlling.LinkGrabberController" name="jd.controlling.LinkGrabberController getInstance()"/>
  <method class="jd.controlling.LinkGrabberController" name="void attachToPackagesFirstStageInternal(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="jd.plugins.LinkGrabberFilePackage getFilterPackage()"/>
  <method class="jd.controlling.LinkGrabberController" name="void setCustomizedPackager(jd.controlling.LinkGrabberPackagingEvent)"/>
  <method class="jd.controlling.LinkGrabberController" name="void setDistributer(jd.controlling.LinkGrabberDistributeEvent)"/>
  <method class="jd.controlling.LinkGrabberController" name="void move(java.lang.Object, java.lang.Object, byte)"/>
  <method class="jd.controlling.LinkGrabberController" name="void throwRefresh()"/>
  <method class="jd.controlling.LinkGrabberController" name="boolean isLinkCheckEnabled()"/>
  <method class="jd.controlling.LinkGrabberController" name="void handle_LinkGrabberFilePackageEvent(jd.plugins.LinkGrabberFilePackageEvent)"/>
  <method class="jd.controlling.LinkGrabberController" name="java.util.ArrayList getPackages()"/>
  <method class="jd.controlling.LinkGrabberController" name="boolean isFiltered(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="void attachToPackagesFirstStage(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="void finalize()"/>
  <method class="jd.controlling.LinkGrabberController" name="boolean isDupe(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="boolean isFiltered(jd.plugins.CryptedLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="void access$0(java.lang.String[])"/>
  <method class="jd.controlling.LinkGrabberController" name="void addListener(jd.controlling.LinkGrabberControllerListener)"/>
  <method class="jd.controlling.LinkGrabberController" name="void removePackage(jd.plugins.LinkGrabberFilePackage)"/>
  <method class="jd.controlling.LinkGrabberController" name="void clearExtensionFilter()"/>
  <method class="jd.controlling.LinkGrabberController" name="void throwLinksAdded()"/>
  <method class="jd.controlling.LinkGrabberController" name="void addLinks(java.util.ArrayList, boolean, boolean)"/>
  <method class="jd.controlling.LinkGrabberController" name="void addAllAt(java.util.ArrayList, int)"/>
  <method class="jd.controlling.LinkGrabberController" name="void postprocessing()"/>
  <method class="jd.controlling.LinkGrabberController" name="void addPackage(jd.plugins.LinkGrabberFilePackage)"/>
  <method class="jd.controlling.LinkGrabberController" name="void addLinksInternal(java.util.ArrayList, boolean, boolean)"/>
  <method class="jd.controlling.LinkGrabberController" name="jd.plugins.LinkGrabberFilePackage getFPwithLink(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="boolean isExtensionFiltered(jd.plugins.DownloadLink)"/>
  <method class="jd.controlling.LinkGrabberController" name="void filterExtension(java.lang.String, boolean)"/>
  <method class="jd.controlling.LinkGrabberController" name="int addPackageAt(jd.plugins.LinkGrabberFilePackage, int, int)"/>
  <method class="jd.controlling.LinkGrabberController" name="int size()"/>
  <method class="jd.controlling.LinkGrabberController" name="void filterPackages()"/>
  <method class="jd.controlling.LinkGrabberController" name="void removeListener(jd.controlling.LinkGrabberControllerListener)"/>
  <method class="jd.controlling.LinkGrabberController" name="jd.plugins.LinkGrabberFilePackage getFPwithName(java.lang.String)"/>
  <method class="jd.controlling.LinkGrabberController" name="int indexOf(jd.plugins.LinkGrabberFilePackage)"/>
  <method class="jd.controlling.LinkGrabberController" name="void attachToPackagesSecondStageInternal(jd.plugins.DownloadLink)"/>
  <class name="jd.controlling.AccountProviderEvent"/>
  <class name="jd.crypt.AESencrypt"/>
  <field class="jd.crypt.AESencrypt" name="w"/>
  <field class="jd.crypt.AESencrypt" name="Nb"/>
  <field class="jd.crypt.AESencrypt" name="Nk"/>
  <field class="jd.crypt.AESencrypt" name="wCount"/>
  <field class="jd.crypt.AESencrypt" name="tab"/>
  <field class="jd.crypt.AESencrypt" name="Nr"/>
  <method class="jd.crypt.AESencrypt" name="void KeyExpansion(byte[], byte[])"/>
  <method class="jd.crypt.AESencrypt" name="void SubBytes(byte[][])"/>
  <method class="jd.crypt.AESencrypt" name="void AddRoundKey(byte[][])"/>
  <method class="jd.crypt.AESencrypt" name="void ShiftRows(byte[][])"/>
  <method class="jd.crypt.AESencrypt" name="void Cipher(byte[], byte[])"/>
  <method class="jd.crypt.AESencrypt" name="void MixColumns(byte[][])"/>
  <class name="jd.crypt.BaseDecoder$BadPaddingException"/>
  <field class="jd.crypt.BaseDecoder$BadPaddingException" name="serialVersionUID"/>
  <class name="jd.crypt.BaseDecoder$IllegalAlphabetException"/>
  <field class="jd.crypt.BaseDecoder$IllegalAlphabetException" name="serialVersionUID"/>
  <class name="jd.crypt.BaseDecoder"/>
  <field class="jd.crypt.BaseDecoder" name="bytes"/>
  <field class="jd.crypt.BaseDecoder" name="bitsPerChar"/>
  <field class="jd.crypt.BaseDecoder" name="remainedChars"/>
  <field class="jd.crypt.BaseDecoder" name="charsPerWord"/>
  <field class="jd.crypt.BaseDecoder" name="bytesPerWord"/>
  <field class="jd.crypt.BaseDecoder" name="_finalized"/>
  <method class="jd.crypt.BaseDecoder" name="void _decode(char[], int, byte[], int, boolean)"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] decodeFinal()"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] decodeFinal(char[], int, int)"/>
  <method class="jd.crypt.BaseDecoder" name="jd.crypt.BaseDecoder reset()"/>
  <method class="jd.crypt.BaseDecoder" name="boolean isValidCharacter(char)"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] _decodeFinal(char[], int, int)"/>
  <method class="jd.crypt.BaseDecoder" name="int gcd(int, int)"/>
  <method class="jd.crypt.BaseDecoder" name="byte getByte(char, boolean)"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] decodeFinal(char[])"/>
  <method class="jd.crypt.BaseDecoder" name="int lcm(int, int)"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] decode(char[])"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] _decode(char[], int, int)"/>
  <method class="jd.crypt.BaseDecoder" name="byte[] decode(char[], int, int)"/>
  <class name="jd.crypt.Enc"/>
  <field class="jd.crypt.Enc" name="w"/>
  <field class="jd.crypt.Enc" name="Nb"/>
  <field class="jd.crypt.Enc" name="Nk"/>
  <field class="jd.crypt.Enc" name="wCount"/>
  <field class="jd.crypt.Enc" name="tab"/>
  <field class="jd.crypt.Enc" name="Nr"/>
  <method class="jd.crypt.Enc" name="void KeyExpansion(byte[], byte[])"/>
  <method class="jd.crypt.Enc" name="void SubBytes(byte[][])"/>
  <method class="jd.crypt.Enc" name="void AddRoundKey(byte[][])"/>
  <method class="jd.crypt.Enc" name="void ShiftRows(byte[][])"/>
  <method class="jd.crypt.Enc" name="void Cipher(byte[], byte[])"/>
  <method class="jd.crypt.Enc" name="void MixColumns(byte[][])"/>
  <class name="jd.crypt.Copy"/>
  <field class="jd.crypt.Copy" name="Nb"/>
  <method class="jd.crypt.Copy" name="void copy(byte[][], byte[])"/>
  <method class="jd.crypt.Copy" name="void copy(byte[], byte[][])"/>
  <class name="jd.crypt.Base64$OutputStream"/>
  <field class="jd.crypt.Base64$OutputStream" name="bufferLength"/>
  <field class="jd.crypt.Base64$OutputStream" name="decodabet"/>
  <field class="jd.crypt.Base64$OutputStream" name="lineLength"/>
  <field class="jd.crypt.Base64$OutputStream" name="buffer"/>
  <field class="jd.crypt.Base64$OutputStream" name="position"/>
  <field class="jd.crypt.Base64$OutputStream" name="suspendEncoding"/>
  <field class="jd.crypt.Base64$OutputStream" name="encode"/>
  <field class="jd.crypt.Base64$OutputStream" name="breakLines"/>
  <field class="jd.crypt.Base64$OutputStream" name="b4"/>
  <field class="jd.crypt.Base64$OutputStream" name="options"/>
  <method class="jd.crypt.Base64$OutputStream" name="void suspendEncoding()"/>
  <method class="jd.crypt.Base64$OutputStream" name="void flushBase64()"/>
  <method class="jd.crypt.Base64$OutputStream" name="void write(byte[], int, int)"/>
  <method class="jd.crypt.Base64$OutputStream" name="void write(int)"/>
  <method class="jd.crypt.Base64$OutputStream" name="void resumeEncoding()"/>
  <method class="jd.crypt.Base64$OutputStream" name="void close()"/>
  <class name="jd.crypt.Base64$InputStream"/>
  <field class="jd.crypt.Base64$InputStream" name="bufferLength"/>
  <field class="jd.crypt.Base64$InputStream" name="decodabet"/>
  <field class="jd.crypt.Base64$InputStream" name="lineLength"/>
  <field class="jd.crypt.Base64$InputStream" name="buffer"/>
  <field class="jd.crypt.Base64$InputStream" name="position"/>
  <field class="jd.crypt.Base64$InputStream" name="encode"/>
  <field class="jd.crypt.Base64$InputStream" name="breakLines"/>
  <field class="jd.crypt.Base64$InputStream" name="numSigBytes"/>
  <field class="jd.crypt.Base64$InputStream" name="options"/>
  <method class="jd.crypt.Base64$InputStream" name="int read()"/>
  <method class="jd.crypt.Base64$InputStream" name="int read(byte[], int, int)"/>
  <class name="jd.crypt.Base64"/>
  <field class="jd.crypt.Base64" name="_ORDERED_ALPHABET"/>
  <field class="jd.crypt.Base64" name="NO_OPTIONS"/>
  <field class="jd.crypt.Base64" name="EQUALS_SIGN"/>
  <field class="jd.crypt.Base64" name="URL_SAFE"/>
  <field class="jd.crypt.Base64" name="ENCODE"/>
  <field class="jd.crypt.Base64" name="_URL_SAFE_DECODABET"/>
  <field class="jd.crypt.Base64" name="_URL_SAFE_ALPHABET"/>
  <field class="jd.crypt.Base64" name="MAX_LINE_LENGTH"/>
  <field class="jd.crypt.Base64" name="NEW_LINE"/>
  <field class="jd.crypt.Base64" name="ORDERED"/>
  <field class="jd.crypt.Base64" name="EQUALS_SIGN_ENC"/>
  <field class="jd.crypt.Base64" name="GZIP"/>
  <field class="jd.crypt.Base64" name="DECODE"/>
  <field class="jd.crypt.Base64" name="_STANDARD_DECODABET"/>
  <field class="jd.crypt.Base64" name="_STANDARD_ALPHABET"/>
  <field class="jd.crypt.Base64" name="PREFERRED_ENCODING"/>
  <field class="jd.crypt.Base64" name="DONT_BREAK_LINES"/>
  <field class="jd.crypt.Base64" name="_ORDERED_DECODABET"/>
  <field class="jd.crypt.Base64" name="WHITE_SPACE_ENC"/>
  <method class="jd.crypt.Base64" name="byte[] access$0(int)"/>
  <method class="jd.crypt.Base64" name="java.lang.Object decodeToObject(java.lang.String)"/>
  <method class="jd.crypt.Base64" name="byte[] decode(byte[], int, int, int)"/>
  <method class="jd.crypt.Base64" name="byte[] encode3to4(byte[], int, int, byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeBytes(byte[])"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeBytes(byte[], int)"/>
  <method class="jd.crypt.Base64" name="int decode4to3(byte[], int, byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="byte[] access$1(byte[], int, int, byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="byte[] decodeFromFile(java.lang.String)"/>
  <method class="jd.crypt.Base64" name="byte[] getAlphabet(int)"/>
  <method class="jd.crypt.Base64" name="byte[] decode(java.lang.String)"/>
  <method class="jd.crypt.Base64" name="byte[] access$3(byte[], byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeObject(java.io.Serializable, int)"/>
  <method class="jd.crypt.Base64" name="boolean encodeToFile(byte[], java.lang.String)"/>
  <method class="jd.crypt.Base64" name="byte[] decode(java.lang.String, int)"/>
  <method class="jd.crypt.Base64" name="void decodeFileToFile(java.lang.String, java.lang.String)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeBytes(byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeBytes(byte[], int, int, int)"/>
  <method class="jd.crypt.Base64" name="byte[] getDecodabet(int)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeObject(java.io.Serializable)"/>
  <method class="jd.crypt.Base64" name="int access$2(byte[], int, byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="java.lang.String encodeFromFile(java.lang.String)"/>
  <method class="jd.crypt.Base64" name="byte[] encode3to4(byte[], byte[], int, int)"/>
  <method class="jd.crypt.Base64" name="boolean decodeToFile(java.lang.String, java.lang.String)"/>
  <method class="jd.crypt.Base64" name="void encodeFileToFile(java.lang.String, java.lang.String)"/>
  <class name="jd.crypt.JDCrypt"/>
  <method class="jd.crypt.JDCrypt" name="byte[] encrypt(java.lang.String, byte[], byte[])"/>
  <method class="jd.crypt.JDCrypt" name="java.lang.String decrypt(byte[], byte[], byte[])"/>
  <method class="jd.crypt.JDCrypt" name="java.lang.String decrypt(byte[])"/>
  <method class="jd.crypt.JDCrypt" name="byte[] encrypt(java.lang.String, byte[])"/>
  <method class="jd.crypt.JDCrypt" name="java.lang.String decrypt(byte[], byte[])"/>
  <method class="jd.crypt.JDCrypt" name="byte[] sign()"/>
  <method class="jd.crypt.JDCrypt" name="byte[] encrypt(java.lang.String)"/>
  <class name="jd.crypt.AEStables"/>
  <field class="jd.crypt.AEStables" name="L"/>
  <field class="jd.crypt.AEStables" name="inv"/>
  <field class="jd.crypt.AEStables" name="invS"/>
  <field class="jd.crypt.AEStables" name="S"/>
  <field class="jd.crypt.AEStables" name="powX"/>
  <field class="jd.crypt.AEStables" name="E"/>
  <method class="jd.crypt.AEStables" name="void loadPowX()"/>
  <method class="jd.crypt.AEStables" name="byte FFMul(byte, byte)"/>
  <method class="jd.crypt.AEStables" name="byte SBox(byte)"/>
  <method class="jd.crypt.AEStables" name="void loadInvS()"/>
  <method class="jd.crypt.AEStables" name="void loadE()"/>
  <method class="jd.crypt.AEStables" name="byte FFInv(byte)"/>
  <method class="jd.crypt.AEStables" name="int ithBit(byte, int)"/>
  <method class="jd.crypt.AEStables" name="byte Rcon(int)"/>
  <method class="jd.crypt.AEStables" name="void loadL()"/>
  <method class="jd.crypt.AEStables" name="byte FFMulFast(byte, byte)"/>
  <method class="jd.crypt.AEStables" name="int subBytes(byte)"/>
  <method class="jd.crypt.AEStables" name="void loadS()"/>
  <method class="jd.crypt.AEStables" name="void loadInv()"/>
  <method class="jd.crypt.AEStables" name="byte invSBox(byte)"/>
  <class name="jd.crypt.Base16Decoder"/>
  <class name="jd.crypt.AESdecrypt"/>
  <field class="jd.crypt.AESdecrypt" name="w"/>
  <field class="jd.crypt.AESdecrypt" name="nk"/>
  <field class="jd.crypt.AESdecrypt" name="Nb"/>
  <field class="jd.crypt.AESdecrypt" name="wCount"/>
  <field class="jd.crypt.AESdecrypt" name="tab"/>
  <field class="jd.crypt.AESdecrypt" name="nr"/>
  <method class="jd.crypt.AESdecrypt" name="void KeyExpansion(byte[], byte[])"/>
  <method class="jd.crypt.AESdecrypt" name="void InvShiftRows(byte[][])"/>
  <method class="jd.crypt.AESdecrypt" name="void InvMixColumns(byte[][])"/>
  <method class="jd.crypt.AESdecrypt" name="void InvSubBytes(byte[][])"/>
  <method class="jd.crypt.AESdecrypt" name="void InvCipher(byte[], byte[])"/>
  <method class="jd.crypt.AESdecrypt" name="void InvAddRoundKey(byte[][])"/>
  <method class="jd.UpdateDevWorkspace$1" name="void onMessage(jd.event.MessageEvent)"/>
  <class name="jd.UpdateDevWorkspace"/>
  <method class="jd.UpdateDevWorkspace" name="void main(java.lang.String[])"/>
  <method class="jd.UpdateDevWorkspace" name="void updateSVN(java.lang.String, java.lang.String)"/>
  <class name="jd.CPluginWrapper"/>
  <field class="jd.CPluginWrapper" name="C_WRAPPER"/>
  <method class="jd.CPluginWrapper" name="jd.plugins.Plugin getPlugin()"/>
  <method class="jd.CPluginWrapper" name="java.util.ArrayList getCWrapper()"/>
  <method class="jd.CPluginWrapper" name="boolean canHandle(java.lang.String)"/>
  <method class="jd.CPluginWrapper" name="jd.plugins.PluginsC getPlugin()"/>
  <method class="jd.CPluginWrapper" name="jd.plugins.PluginsC loadPlugin()"/>
  <class name="jd.ParameterManager"/>
  <field class="jd.ParameterManager" name="logger"/>
  <field class="jd.ParameterManager" name="startDownload"/>
  <field class="jd.ParameterManager" name="serialVersionUID"/>
  <method class="jd.ParameterManager" name="void processParameters(java.lang.String[])"/>
  <method class="jd.ParameterManager" name="void showCmdHelp()"/>
  <class name="jd.SplashProgressImage"/>
  <field class="jd.SplashProgressImage" name="dur"/>
  <field class="jd.SplashProgressImage" name="startTime"/>
  <field class="jd.SplashProgressImage" name="image"/>
  <method class="jd.SplashProgressImage" name="java.awt.Image getImage()"/>
  <method class="jd.SplashProgressImage" name="float getAlpha()"/>
  <method class="jd.Benchmark$1" name="void run()"/>
  <class name="jd.Benchmark"/>
  <field class="jd.Benchmark" name="DURATION"/>
  <method class="jd.Benchmark" name="void main(java.lang.String[])"/>
  <class name="jd.OptionalPluginWrapper"/>
  <field class="jd.OptionalPluginWrapper" name="annotation"/>
  <field class="jd.OptionalPluginWrapper" name="version"/>
  <field class="jd.OptionalPluginWrapper" name="revision"/>
  <field class="jd.OptionalPluginWrapper" name="name"/>
  <field class="jd.OptionalPluginWrapper" name="id"/>
  <field class="jd.OptionalPluginWrapper" name="OPTIONAL_WRAPPER"/>
  <method class="jd.OptionalPluginWrapper" name="java.util.ArrayList getOptionalWrapper()"/>
  <method class="jd.OptionalPluginWrapper" name="java.lang.String getVersion()"/>
  <method class="jd.OptionalPluginWrapper" name="java.lang.String getID()"/>
  <method class="jd.OptionalPluginWrapper" name="jd.plugins.PluginOptional loadPlugin()"/>
  <method class="jd.OptionalPluginWrapper" name="boolean isEnabled()"/>
  <method class="jd.OptionalPluginWrapper" name="java.lang.String getConfigParamKey()"/>
  <method class="jd.OptionalPluginWrapper" name="double getJavaVersion()"/>
  <method class="jd.OptionalPluginWrapper" name="jd.plugins.PluginOptional getPlugin()"/>
  <method class="jd.OptionalPluginWrapper" name="jd.plugins.OptionalPlugin getAnnotation()"/>
  <method class="jd.OptionalPluginWrapper" name="java.lang.String getHost()"/>
  <method class="jd.OptionalPluginWrapper" name="int compareTo(jd.PluginWrapper)"/>
  <method class="jd.OptionalPluginWrapper" name="jd.plugins.Plugin getPlugin()"/>
  <field class="jd.Config$6" name="this$0"/>
  <method class="jd.Config$6" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <field class="jd.Config$5" name="this$0"/>
  <method class="jd.Config$5" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <field class="jd.Config$4" name="this$0"/>
  <method class="jd.Config$4" name="void valueChanged(javax.swing.event.ListSelectionEvent)"/>
  <field class="jd.Config$3" name="this$0"/>
  <method class="jd.Config$3" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <class name="jd.Config$ConfigTableModel"/>
  <field class="jd.Config$ConfigTableModel" name="this$0"/>
  <field class="jd.Config$ConfigTableModel" name="columnNames"/>
  <field class="jd.Config$ConfigTableModel" name="serialVersionUID"/>
  <method class="jd.Config$ConfigTableModel" name="boolean isCellEditable(int, int)"/>
  <method class="jd.Config$ConfigTableModel" name="java.lang.Class getColumnClass(int)"/>
  <method class="jd.Config$ConfigTableModel" name="java.lang.String getColumnName(int)"/>
  <method class="jd.Config$ConfigTableModel" name="int getRowCount()"/>
  <method class="jd.Config$ConfigTableModel" name="int getColumnCount()"/>
  <method class="jd.Config$ConfigTableModel" name="java.lang.Object getValueAt(int, int)"/>
  <field class="jd.Config$2" name="this$0"/>
  <method class="jd.Config$2" name="int compare(jd.config.SubConfiguration, jd.config.SubConfiguration)"/>
  <method class="jd.Config$2" name="int compare(java.lang.Object, java.lang.Object)"/>
  <field class="jd.Config$1" name="this$0"/>
  <field class="jd.Config$1" name="val$laf"/>
  <field class="jd.Config$1" name="val$tmplaf"/>
  <method class="jd.Config$1" name="void controlEvent(jd.event.ControlEvent)"/>
  <field class="jd.Config$7" name="this$0"/>
  <method class="jd.Config$7" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <class name="jd.Config"/>
  <field class="jd.Config" name="mainConfig"/>
  <field class="jd.Config" name="frame"/>
  <field class="jd.Config" name="configSelection"/>
  <field class="jd.Config" name="remove"/>
  <field class="jd.Config" name="currentConfig"/>
  <field class="jd.Config" name="configs"/>
  <field class="jd.Config" name="edit"/>
  <field class="jd.Config" name="values"/>
  <field class="jd.Config" name="tableModel"/>
  <field class="jd.Config" name="add"/>
  <field class="jd.Config" name="table"/>
  <field class="jd.Config" name="keys"/>
  <method class="jd.Config" name="java.util.ArrayList access$4(jd.Config)"/>
  <method class="jd.Config" name="javax.swing.JFrame access$2(jd.Config)"/>
  <method class="jd.Config" name="javax.swing.JButton access$9(jd.Config)"/>
  <method class="jd.Config" name="void sort()"/>
  <method class="jd.Config" name="void createMap(java.util.HashMap, java.util.ArrayList, java.util.ArrayList, java.lang.String)"/>
  <method class="jd.Config" name="javax.swing.JButton access$10(jd.Config)"/>
  <method class="jd.Config" name="int[] access$8(jd.Config)"/>
  <method class="jd.Config" name="java.util.ArrayList access$0(jd.Config)"/>
  <method class="jd.Config" name="int[] getSelectedRows()"/>
  <method class="jd.Config" name="jd.Config$ConfigTableModel access$7(jd.Config)"/>
  <method class="jd.Config" name="void initGUI()"/>
  <method class="jd.Config" name="void access$6(jd.Config, jd.config.SubConfiguration)"/>
  <method class="jd.Config" name="void access$5(jd.Config)"/>
  <method class="jd.Config" name="void setCurrentConfig(jd.config.SubConfiguration)"/>
  <method class="jd.Config" name="jd.config.SubConfiguration access$11(jd.Config)"/>
  <method class="jd.Config" name="java.util.ArrayList access$1(jd.Config)"/>
  <method class="jd.Config" name="javax.swing.JComboBox access$3(jd.Config)"/>
  <class name="jd.JDInitFlags"/>
  <field class="jd.JDInitFlags" name="SHOW_SPLASH"/>
  <field class="jd.JDInitFlags" name="SWITCH_DEBUG"/>
  <field class="jd.JDInitFlags" name="SWITCH_NEW_INSTANCE"/>
  <field class="jd.JDInitFlags" name="SWITCH_RETURNED_FROM_UPDATE"/>
  <field class="jd.JDInitFlags" name="STOP"/>
  <field class="jd.JDInitFlags" name="ENOUGH_MEMORY"/>
  <field class="jd.ObjectConverter$2" name="this$0"/>
  <method class="jd.ObjectConverter$2" name="void exceptionThrown(java.lang.Exception)"/>
  <field class="jd.ObjectConverter$1" name="this$0"/>
  <method class="jd.ObjectConverter$1" name="void exceptionThrown(java.lang.Exception)"/>
  <class name="jd.ObjectConverter"/>
  <field class="jd.ObjectConverter" name="post"/>
  <field class="jd.ObjectConverter" name="exception"/>
  <field class="jd.ObjectConverter" name="pre"/>
  <method class="jd.ObjectConverter" name="java.lang.String toString(java.lang.Object)"/>
  <method class="jd.ObjectConverter" name="java.lang.Object toObject(java.lang.String)"/>
  <field class="jd.Main$5" name="this$0"/>
  <method class="jd.Main$5" name="void run()"/>
  <field class="jd.Main$4" name="this$0"/>
  <field class="jd.Main$4" name="val$controller"/>
  <field class="jd.Main$4" name="val$init"/>
  <method class="jd.Main$4" name="java.lang.Object runSave()"/>
  <field class="jd.Main$3" name="val$args"/>
  <field class="jd.Main$3" name="val$main"/>
  <method class="jd.Main$3" name="void run()"/>
  <method class="jd.Main$2" name="java.lang.Object runSave()"/>
  <field class="jd.Main$1" name="counter"/>
  <field class="jd.Main$1" name="params"/>
  <method class="jd.Main$1" name="java.lang.String handle(java.lang.String)"/>
  <class name="jd.Main"/>
  <field class="jd.Main" name="LOGGER"/>
  <field class="jd.Main" name="instanceStarted"/>
  <field class="jd.Main" name="instanceID"/>
  <method class="jd.Main" name="java.lang.String getCaptcha(java.lang.String, java.lang.String)"/>
  <method class="jd.Main" name="java.util.logging.Logger access$1()"/>
  <method class="jd.Main" name="void access$0(jd.Main)"/>
  <method class="jd.Main" name="void javaCheck()"/>
  <method class="jd.Main" name="void heapCheck()"/>
  <method class="jd.Main" name="void main(java.lang.String[])"/>
  <method class="jd.Main" name="void loadDynamics()"/>
  <method class="jd.Main" name="void go()"/>
  <method class="jd.Main" name="void preInitChecks()"/>
  <method class="jd.Main" name="boolean returnedfromUpdate()"/>
  <method class="jd.Main" name="void initMACProperties()"/>
  <method class="jd.Main" name="void start(java.lang.String[])"/>
  <field class="jd.Installer$3$3" name="this$1"/>
  <field class="jd.Installer$3$3" name="serialVersionUID"/>
  <method class="jd.Installer$3$3" name="void packed()"/>
  <method class="jd.Installer$3$3" name="void setReturnValue(boolean)"/>
  <field class="jd.Installer$3$2" name="val$list"/>
  <field class="jd.Installer$3$2" name="this$1"/>
  <method class="jd.Installer$3$2" name="void valueChanged(javax.swing.event.ListSelectionEvent)"/>
  <field class="jd.Installer$3$1" name="ids"/>
  <field class="jd.Installer$3$1" name="this$1"/>
  <field class="jd.Installer$3$1" name="serialVersionUID"/>
  <method class="jd.Installer$3$1" name="java.util.ArrayList getIds()"/>
  <method class="jd.Installer$3$1" name="int getSize()"/>
  <method class="jd.Installer$3$1" name="java.lang.Object getElementAt(int)"/>
  <field class="jd.Installer$3" name="this$0"/>
  <field class="jd.Installer$3" name="dialog"/>
  <method class="jd.Installer$3" name="jd.Installer access$2(jd.Installer$3)"/>
  <method class="jd.Installer$3" name="jd.gui.swing.dialog.ContainerDialog access$0(jd.Installer$3)"/>
  <method class="jd.Installer$3" name="java.lang.Object runSave()"/>
  <method class="jd.Installer$3" name="void access$1(jd.Installer$3, jd.gui.swing.dialog.ContainerDialog)"/>
  <field class="jd.Installer$2$1" name="val$config"/>
  <field class="jd.Installer$2$1" name="this$1"/>
  <field class="jd.Installer$2$1" name="serialVersionUID"/>
  <method class="jd.Installer$2$1" name="void packed()"/>
  <method class="jd.Installer$2$1" name="void setReturnValue(boolean)"/>
  <field class="jd.Installer$2" name="val$config"/>
  <method class="jd.Installer$2" name="java.lang.Object runSave()"/>
  <method class="jd.Installer$2" name="java.lang.Integer runSave()"/>
  <field class="jd.Installer$1" name="this$0"/>
  <method class="jd.Installer$1" name="java.lang.Object runSave()"/>
  <class name="jd.Installer"/>
  <field class="jd.Installer" name="countryCode"/>
  <field class="jd.Installer" name="br"/>
  <field class="jd.Installer" name="dlFolder"/>
  <field class="jd.Installer" name="aborted"/>
  <field class="jd.Installer" name="languageCode"/>
  <field class="jd.Installer" name="serialVersionUID"/>
  <method class="jd.Installer" name="void installFirefoxAddon()"/>
  <method class="jd.Installer" name="boolean isAborted()"/>
  <method class="jd.Installer" name="void access$3(jd.Installer)"/>
  <method class="jd.Installer" name="java.io.File access$5(jd.Installer)"/>
  <method class="jd.Installer" name="void askInstallFlashgot()"/>
  <method class="jd.Installer" name="void access$4(jd.Installer, jd.gui.swing.components.BrowseFile)"/>
  <method class="jd.Installer" name="void access$2(jd.Installer, java.io.File)"/>
  <method class="jd.Installer" name="java.lang.String access$0(jd.Installer)"/>
  <method class="jd.Installer" name="jd.gui.swing.components.BrowseFile access$1(jd.Installer)"/>
  <method class="jd.Installer" name="void showConfig()"/>
  <method class="jd.Installer" name="javax.swing.JPanel getInstallerPanel()"/>
  <class name="jd.PluginWrapper"/>
  <field class="jd.PluginWrapper" name="CNL_2"/>
  <field class="jd.PluginWrapper" name="LOAD_ON_INIT"/>
  <field class="jd.PluginWrapper" name="flags"/>
  <field class="jd.PluginWrapper" name="loadedPlugin"/>
  <field class="jd.PluginWrapper" name="CL"/>
  <field class="jd.PluginWrapper" name="alwaysenabled"/>
  <field class="jd.PluginWrapper" name="acceptOnlyURIs"/>
  <field class="jd.PluginWrapper" name="DEBUG_ONLY"/>
  <field class="jd.PluginWrapper" name="pattern"/>
  <field class="jd.PluginWrapper" name="className"/>
  <field class="jd.PluginWrapper" name="WRAPPER"/>
  <field class="jd.PluginWrapper" name="ALWAYS_ENABLED"/>
  <field class="jd.PluginWrapper" name="logger"/>
  <field class="jd.PluginWrapper" name="host"/>
  <field class="jd.PluginWrapper" name="ACCEPTONLYSURLSFALSE"/>
  <method class="jd.PluginWrapper" name="java.lang.String getCoder()"/>
  <method class="jd.PluginWrapper" name="java.lang.String getHost()"/>
  <method class="jd.PluginWrapper" name="boolean isAcceptOnlyURIs()"/>
  <method class="jd.PluginWrapper" name="java.lang.String getVersion()"/>
  <method class="jd.PluginWrapper" name="void setUsePlugin(boolean)"/>
  <method class="jd.PluginWrapper" name="boolean usePlugin()"/>
  <method class="jd.PluginWrapper" name="jd.plugins.Plugin getNewPluginInstance()"/>
  <method class="jd.PluginWrapper" name="java.lang.String getID()"/>
  <method class="jd.PluginWrapper" name="void setHost(java.lang.String)"/>
  <method class="jd.PluginWrapper" name="void setPattern(java.util.regex.Pattern)"/>
  <method class="jd.PluginWrapper" name="int getFlags()"/>
  <method class="jd.PluginWrapper" name="void setAcceptOnlyURIs(boolean)"/>
  <method class="jd.PluginWrapper" name="jd.plugins.Plugin getPlugin()"/>
  <method class="jd.PluginWrapper" name="boolean isLoaded()"/>
  <method class="jd.PluginWrapper" name="java.util.regex.Pattern getPattern()"/>
  <method class="jd.PluginWrapper" name="int compareTo(jd.PluginWrapper)"/>
  <method class="jd.PluginWrapper" name="jd.config.SubConfiguration getPluginConfig()"/>
  <method class="jd.PluginWrapper" name="boolean canHandle(java.lang.String)"/>
  <method class="jd.PluginWrapper" name="void setClassName(java.lang.String)"/>
  <method class="jd.PluginWrapper" name="jd.PluginWrapper getWrapper(java.lang.String)"/>
  <method class="jd.PluginWrapper" name="int compareTo(java.lang.Object)"/>
  <method class="jd.PluginWrapper" name="jd.plugins.Plugin getNewInstance(java.lang.String)"/>
  <method class="jd.PluginWrapper" name="java.lang.String getConfigName()"/>
  <method class="jd.PluginWrapper" name="boolean hasConfig()"/>
  <method class="jd.PluginWrapper" name="java.lang.String getClassName()"/>
  <field class="jd.KikinDialog$4" name="this$0"/>
  <method class="jd.KikinDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <field class="jd.KikinDialog$3" name="this$0"/>
  <method class="jd.KikinDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <field class="jd.KikinDialog$2" name="this$0"/>
  <method class="jd.KikinDialog$2" name="void hyperlinkUpdate(javax.swing.event.HyperlinkEvent)"/>
  <field class="jd.KikinDialog$1" name="this$0"/>
  <method class="jd.KikinDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)"/>
  <class name="jd.KikinDialog"/>
  <field class="jd.KikinDialog" name="textField"/>
  <field class="jd.KikinDialog" name="label"/>
  <field class="jd.KikinDialog" name="checkbox"/>
  <field class="jd.KikinDialog" name="serialVersionUID"/>
  <method class="jd.KikinDialog" name="javax.swing.JComponent contentInit()"/>
  <method class="jd.KikinDialog" name="java.lang.Integer getReturnID()"/>
  <method class="jd.KikinDialog" name="void packed()"/>
  <method class="jd.KikinDialog" name="javax.swing.JCheckBox access$0(jd.KikinDialog)"/>
  <method class="jd.KikinDialog" name="javax.swing.JButton access$1(jd.KikinDialog)"/>
  <class name="jd.Tester"/>
  <method class="jd.Tester" name="void main(java.lang.String[])"/>
  <class name="jd.DecryptPluginWrapper"/>
  <field class="jd.DecryptPluginWrapper" name="revision"/>
  <field class="jd.DecryptPluginWrapper" name="DECRYPT_WRAPPER"/>
  <field class="jd.DecryptPluginWrapper" name="uninitialized"/>
  <field class="jd.DecryptPluginWrapper" name="LOCK"/>
  <method class="jd.DecryptPluginWrapper" name="jd.plugins.Plugin getPlugin()"/>
  <method class="jd.DecryptPluginWrapper" name="java.lang.String getVersion()"/>
  <method class="jd.DecryptPluginWrapper" name="jd.plugins.PluginForDecrypt getPlugin()"/>
  <method class="jd.DecryptPluginWrapper" name="java.util.ArrayList getDecryptWrapper()"/>
  <method class="jd.DecryptPluginWrapper" name="boolean hasPlugin(java.lang.String)"/>
  <field class="jd.JDInit$2" name="this$0"/>
  <method class="jd.JDInit$2" name="void run()"/>
  <field class="jd.JDInit$1" name="this$0"/>
  <method class="jd.JDInit$1" name="void run()"/>
  <class name="jd.JDInit"/>
  <field class="jd.JDInit" name="CL"/>
  <field class="jd.JDInit" name="logger"/>
  <field class="jd.JDInit" name="installerVisible"/>
  <field class="jd.JDInit" name="TEST_INSTALLER"/>
  <method class="jd.JDInit" name="void loadPluginOptional()"/>
  <method class="jd.JDInit" name="void movePluginUpdates(java.io.File)"/>
  <method class="jd.JDInit" name="void loadCPlugins()"/>
  <method class="jd.JDInit" name="jd.config.Configuration loadConfiguration()"/>
  <method class="jd.JDInit" name="java.lang.ClassLoader getPluginClassLoader()"/>
  <method class="jd.JDInit" name="void initBrowser()"/>
  <method class="jd.JDInit" name="void submitVersion()"/>
  <method class="jd.JDInit" name="boolean installerWasVisible()"/>
  <method class="jd.JDInit" name="void loadPluginForHost()"/>
  <method class="jd.JDInit" name="void checkUpdate()"/>
  <method class="jd.JDInit" name="void loadPluginForDecrypt()"/>
  <method class="jd.JDInit" name="void initGUI(jd.controlling.JDController)"/>
  <method class="jd.JDInit" name="void initControllers()"/>
  <method class="jd.JDInit" name="void initPlugins()"/>
  <method class="jd.JDInit" name="void init()"/>
  <field class="jd.SplashScreen$2" name="this$0"/>
  <method class="jd.SplashScreen$2" name="java.lang.Object runSave()"/>
  <field class="jd.SplashScreen$1" name="this$0"/>
  <method class="jd.SplashScreen$1" name="java.lang.Object runSave()"/>
  <class name="jd.SplashScreen"/>
  <field class="jd.SplashScreen" name="progress"/>
  <field class="jd.SplashScreen" name="curString"/>
  <field class="jd.SplashScreen" name="image"/>
  <field class="jd.SplashScreen" name="SPLASH_FINISH"/>
  <field class="jd.SplashScreen" name="window"/>
  <field class="jd.SplashScreen" name="SPLASH_PROGRESS"/>
  <field class="jd.SplashScreen" name="y"/>
  <field class="jd.SplashScreen" name="label"/>
  <field class="jd.SplashScreen" name="x"/>
  <field class="jd.SplashScreen" name="gd"/>
  <method class="jd.SplashScreen" name="javax.swing.JWindow access$0(jd.SplashScreen)"/>
  <method class="jd.SplashScreen" name="java.lang.String access$2(jd.SplashScreen)"/>
  <method class="jd.SplashScreen" name="void finish()"/>
  <method class="jd.SplashScreen" name="void controlEvent(jd.event.ControlEvent)"/>
  <method class="jd.SplashScreen" name="void incProgress()"/>
  <method class="jd.SplashScreen" name="javax.swing.JProgressBar access$1(jd.SplashScreen)"/>
  <method class="jd.SplashScreen" name="void initGui()"/>
  <class name="jd.JDClassLoader"/>
  <field class="jd.JDClassLoader" name="jars"/>
  <field class="jd.JDClassLoader" name="rootClassLoader"/>
  <field class="jd.JDClassLoader" name="rootDir"/>
  <field class="jd.JDClassLoader" name="lafs"/>
  <field class="jd.JDClassLoader" name="logger"/>
  <field class="jd.JDClassLoader" name="S"/>
  <field class="jd.JDClassLoader" name="classLoaderParent"/>
  <field class="jd.JDClassLoader" name="jarFile"/>
  <method class="jd.JDClassLoader" name="java.lang.Class loadClass(java.lang.String, boolean)"/>
  <method class="jd.JDClassLoader" name="byte[] loadClassData(java.util.jar.JarFile, java.util.jar.JarEntry)"/>
  <method class="jd.JDClassLoader" name="boolean comp(byte[])"/>
  <method class="jd.JDClassLoader" name="java.util.Vector getJars()"/>
  <method class="jd.JDClassLoader" name="java.net.URL findResource(java.lang.String)"/>
  <method class="jd.JDClassLoader" name="java.net.URL getResource(java.lang.String)"/>
  <method class="jd.JDClassLoader" name="java.util.ArrayList getLafs()"/>
  <method class="jd.JDClassLoader" name="java.util.Enumeration getResources(java.lang.String)"/>
  <method class="jd.JDClassLoader" name="byte[] getSig(java.lang.String)"/>
  <method class="jd.JDClassLoader" name="java.lang.String findJar(java.lang.String)"/>
  <method class="jd.JDClassLoader" name="java.net.URL getResource(byte[])"/>
  <class name="jd.HostPluginWrapper"/>
  <field class="jd.HostPluginWrapper" name="HOST_WRAPPER"/>
  <field class="jd.HostPluginWrapper" name="revision"/>
  <field class="jd.HostPluginWrapper" name="uninitialized"/>
  <field class="jd.HostPluginWrapper" name="AGB_CHECKED"/>
  <field class="jd.HostPluginWrapper" name="LOCK"/>
  <method class="jd.HostPluginWrapper" name="javax.swing.ImageIcon getIcon()"/>
  <method class="jd.HostPluginWrapper" name="java.lang.String getVersion()"/>
  <method class="jd.HostPluginWrapper" name="boolean isAGBChecked()"/>
  <method class="jd.HostPluginWrapper" name="jd.plugins.PluginForHost getPlugin()"/>
  <method class="jd.HostPluginWrapper" name="java.lang.String getLabel()"/>
  <method class="jd.HostPluginWrapper" name="boolean isPremiumEnabled()"/>
  <method class="jd.HostPluginWrapper" name="void setAGBChecked(java.lang.Boolean)"/>
  <method class="jd.HostPluginWrapper" name="int compareTo(jd.PluginWrapper)"/>
  <method class="jd.HostPluginWrapper" name="java.lang.String toString()"/>
  <method class="jd.HostPluginWrapper" name="boolean hasPlugin(java.lang.String)"/>
  <method class="jd.HostPluginWrapper" name="java.util.ArrayList getHostWrapper()"/>
  <method class="jd.HostPluginWrapper" name="jd.plugins.Plugin getPlugin()"/>
  <class name="org.apache.xerces.parsers.DOMParser"/>
</expose>
<map>
  <class name="jd.parser.html.HTMLParser$1Httppattern" map="1Httppattern"/>
  <class name="jd.config.ConfigEntry$1" map="1"/>
  <class name="jd.plugins.a.D$1" map="1"/>
  <class name="jd.plugins.a.C$1" map="1"/>
  <class name="jd.plugins.PluginForDecrypt$1DThread" map="1DThread"/>
  <class name="jd.plugins.FilePackage$1" map="1"/>
  <class name="jd.plugins.AccountMenuItemSyncer$1" map="1"/>
  <class name="jd.update.WebUpdater$1" map="1"/>
  <class name="jd.update.FileUpdate$1" map="1"/>
  <class name="jd.update.Main$2" map="2"/>
  <class name="jd.update.Main$1" map="1"/>
  <class name="jd.nrouter.UPNPRouter$2" map="2"/>
  <class name="jd.nrouter.UPNPRouter$1" map="1"/>
  <class name="jd.nrouter.RouterUtils$1" map="1"/>
  <class name="jd.nrouter.IPCheck$1" map="1"/>
  <class name="jd.utils.locale.JDL$1" map="1"/>
  <class name="jd.utils.Updater$2" map="2"/>
  <class name="jd.utils.Updater$1" map="1"/>
  <class name="jd.utils.ReplaceInFiles$1" map="1"/>
  <class name="jd.utils.JDFileReg$1" map="1"/>
  <class name="jd.utils.JDUtilities$3" map="3"/>
  <class name="jd.utils.JDUtilities$2" map="2"/>
  <class name="jd.utils.JDUtilities$1" map="1"/>
  <class name="jd.utils.WebUpdate$4$1" map="1"/>
  <class name="jd.utils.WebUpdate$4" map="4"/>
  <class name="jd.utils.WebUpdate$3" map="3"/>
  <class name="jd.utils.WebUpdate$2$2" map="2"/>
  <class name="jd.utils.WebUpdate$2$1" map="1"/>
  <class name="jd.utils.WebUpdate$2" map="2"/>
  <class name="jd.utils.WebUpdate$1" map="1"/>
  <class name="jd.router.reconnectrecorder.Utils$1" map="1"/>
  <class name="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$2" map="2"/>
  <class name="jd.router.reconnectrecorder.Gui$JDRRInfoPopup$1" map="1"/>
  <class name="jd.router.RouterInfoCollector$5" map="5"/>
  <class name="jd.router.RouterInfoCollector$4" map="4"/>
  <class name="jd.router.RouterInfoCollector$3" map="3"/>
  <class name="jd.router.RouterInfoCollector$2" map="2"/>
  <class name="jd.router.RouterInfoCollector$1" map="1"/>
  <class name="jd.router.UPnPInfo$2" map="2"/>
  <class name="jd.router.UPnPInfo$1" map="1"/>
  <class name="jd.router.GetRouterInfo$9" map="9"/>
  <class name="jd.router.GetRouterInfo$8" map="8"/>
  <class name="jd.router.GetRouterInfo$2isalvs" map="2isalvs"/>
  <class name="jd.router.GetRouterInfo$7" map="7"/>
  <class name="jd.router.GetRouterInfo$6" map="6"/>
  <class name="jd.router.GetRouterInfo$5" map="5"/>
  <class name="jd.router.GetRouterInfo$4" map="4"/>
  <class name="jd.router.GetRouterInfo$3" map="3"/>
  <class name="jd.router.GetRouterInfo$2" map="2"/>
  <class name="jd.router.GetRouterInfo$1isalvs" map="1isalvs"/>
  <class name="jd.router.GetRouterInfo$10" map="10"/>
  <class name="jd.router.GetRouterInfo$1" map="1"/>
  <class name="jd.router.ConvertRouterData$1" map="1"/>
  <class name="jd.router.FindRouterIP$1" map="1"/>
  <class name="jd.controlling.reconnect.Reconnecter$1" map="1"/>
  <class name="jd.controlling.AccountController$2" map="2"/>
  <class name="jd.controlling.AccountController$1" map="1"/>
  <class name="jd.controlling.DistributeData$2DThread" map="2DThread"/>
  <class name="jd.controlling.DistributeData$1DThread" map="1DThread"/>
  <class name="jd.controlling.ByteBufferController$2" map="2"/>
  <class name="jd.controlling.ByteBufferController$1" map="1"/>
  <class name="jd.controlling.LinkCheck$3" map="3"/>
  <class name="jd.controlling.LinkCheck$2" map="2"/>
  <class name="jd.controlling.LinkCheck$1" map="1"/>
  <class name="jd.controlling.PasswordListController$1" map="1"/>
  <class name="jd.controlling.SingleDownloadController$1" map="1"/>
  <class name="jd.controlling.HTACCESSController$1" map="1"/>
  <class name="jd.controlling.DownloadController$1" map="1"/>
  <class name="jd.controlling.JDController$3$1" map="1"/>
  <class name="jd.controlling.JDController$3" map="3"/>
  <class name="jd.controlling.JDController$2" map="2"/>
  <class name="jd.controlling.JDController$1" map="1"/>
  <class name="jd.controlling.JDController$EventSender$1" map="1"/>
  <class name="jd.controlling.DownloadWatchDog$1" map="1"/>
  <class name="jd.controlling.ProgressController$1" map="1"/>
  <class name="jd.controlling.LinkGrabberController$2" map="2"/>
  <class name="jd.controlling.LinkGrabberController$1" map="1"/>
  <class name="jd.UpdateDevWorkspace$1" map="1"/>
  <class name="jd.Benchmark$1" map="1"/>
  <class name="jd.Config$6" map="6"/>
  <class name="jd.Config$5" map="5"/>
  <class name="jd.Config$4" map="4"/>
  <class name="jd.Config$3" map="3"/>
  <class name="jd.Config$2" map="2"/>
  <class name="jd.Config$1" map="1"/>
  <class name="jd.Config$7" map="7"/>
  <class name="jd.ObjectConverter$2" map="2"/>
  <class name="jd.ObjectConverter$1" map="1"/>
  <class name="jd.Main$5" map="5"/>
  <class name="jd.Main$4" map="4"/>
  <class name="jd.Main$3" map="3"/>
  <class name="jd.Main$2" map="2"/>
  <class name="jd.Main$1" map="1"/>
  <class name="jd.Installer$3$3" map="3"/>
  <class name="jd.Installer$3$2" map="2"/>
  <class name="jd.Installer$3$1" map="1"/>
  <class name="jd.Installer$3" map="3"/>
  <class name="jd.Installer$2$1" map="1"/>
  <class name="jd.Installer$2" map="2"/>
  <class name="jd.Installer$1" map="1"/>
  <class name="jd.KikinDialog$4" map="4"/>
  <class name="jd.KikinDialog$3" map="3"/>
  <class name="jd.KikinDialog$2" map="2"/>
  <class name="jd.KikinDialog$1" map="1"/>
  <class name="jd.JDInit$2" map="2"/>
  <class name="jd.JDInit$1" map="1"/>
  <class name="jd.SplashScreen$2" map="2"/>
  <class name="jd.SplashScreen$1" map="1"/>
</map>
</yguard>
